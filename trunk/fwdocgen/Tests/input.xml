<?xml version="1.0" ?>
<ndoc>
  <assembly name="NDoc.Test">
    <module name="NDoc.Test.dll">
      <namespace name="NDoc.Test">
        <class name="NamespaceDoc" id="T:NDoc.Test.NamespaceDoc" access="Public">
          <documentation>
            <summary>
              <p>This documentation will show up as the summary of a class
            <see cref="T:NDoc.Test.NamespaceDoc" />, when the UseNamespaceDocSummaries
            configuration flag is set to <see langword="false" />. When
            UseNamespaceDocSummaries is set to <see langword="true" />,
            the summary will show up as the summary of the <see cref="N:NDoc.Test" />
            namespace.</p>
              <p>This allows you to reference other types from within the
            summary documentation for the namespace, without having to use
            fully qualified ids. E.g. the reference to <see cref="T:NDoc.Test.Class" /> is
            created by using "&lt;see cref="Class"/&gt;" instead of
            "&lt;see cref="T:NDoc.Test.Class"/&gt;" as you have to say using
            the namespace summaries dialog.</p>
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.NamespaceDoc.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the NamespaceDoc class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NamespaceDoc.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NamespaceDoc.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NamespaceDoc.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NamespaceDoc.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NamespaceDoc.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NamespaceDoc.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Class" id="T:NDoc.Test.Class" access="Public">
          <documentation>
            <summary>Represents a normal class.</summary>
            <remarks>Conceptualizing random endpoints in a access matrix
            provides reach extentions enterprise wide. Respective divisions
            historically insignificant, upscale trendlines in a management
            inventory analysis survivabilty format.</remarks>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Class.#ctor" access="Public" overload="1">
            <documentation>
              <overloads>Initializes a new instance of the Class class.</overloads>
              <summary>Initializes a new instance of the Class class with no param.</summary>
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.Class.#ctor(System.Int32)" access="Public" overload="2">
            <documentation>
              <summary>Initializes a new instance of the Class class with an integer.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.Class.#ctor(System.String)" access="Public" overload="3">
            <documentation>
              <summary>Initializes a new instance of the Class class with a string.</summary>
            </documentation>
            <parameter name="s" type="System.String" />
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.Class.#ctor(System.Double)" access="Family" overload="4">
            <documentation>
              <summary>Initializes a new instance of the Class class with a double.</summary>
            </documentation>
            <parameter name="d" type="System.Double" />
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.Class.#ctor(System.Int32,System.Int32,System.Int32)"
            access="Public" overload="5">
            <documentation>
              <summary>Initializes a new instance of the Class class with 3 integers.</summary>
              <param name="i1">This is the first integer parameter.
            This is the first integer parameter. This is the first integer
            parameter. This is the first integer parameter.</param>
              <param name="i2">This is the second integer parameter.</param>
              <param name="i3">This is the third integer parameter.</param>
              <remarks>
            Yes, the <paramref name="i3" /> parameter is of type int.
            </remarks>
            </documentation>
            <parameter name="i1" type="System.Int32" />
            <parameter name="i2" type="System.Int32" />
            <parameter name="i3" type="System.Int32" />
          </constructor>
          <field name="Field" id="F:NDoc.Test.Class.Field" access="Public" type="System.Int32">
            <documentation>
              <summary>Holds an <c>int</c> value.</summary>
            </documentation>
          </field>
          <field name="ReadOnlyField" id="F:NDoc.Test.Class.ReadOnlyField" access="Public" type="System.Int32"
            initOnly="true">
            <documentation>
              <summary>Holds an read-only<c>int</c> value.</summary>
            </documentation>
          </field>
          <field name="StaticField" id="F:NDoc.Test.Class.StaticField" access="Public" type="System.Int32"
            contract="Static">
            <documentation>
              <summary>Holds a static <c>int</c> value.</summary>
            </documentation>
          </field>
          <property name="Property" id="P:NDoc.Test.Class.Property" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false">
            <documentation>
              <summary>Gets a value.</summary>
            </documentation>
          </property>
          <property name="StaticProperty" id="P:NDoc.Test.Class.StaticProperty" access="Public" type="System.Int32"
            contract="Static" get="true" set="false">
            <documentation>
              <summary>Gets a static value.</summary>
            </documentation>
          </property>
          <property name="Item" id="P:NDoc.Test.Class.Item(System.Int32)" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false" overload="1">
            <documentation>
              <summary>This overloaded indexer accepts an int.</summary>
              <param name="i">The int index.</param>
              <value>Always returns 0.</value>
              <remarks>No comment.</remarks>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </property>
          <property name="Item" id="P:NDoc.Test.Class.Item(System.String)" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false" overload="2">
            <documentation>
              <summary>This overloaded indexer accepts a string.</summary>
            </documentation>
            <parameter name="s" type="System.String" />
          </property>
          <property name="Item" id="P:NDoc.Test.Class.Item(System.Int32,System.Int32,System.Int32)"
            access="Public" type="System.Int32" contract="Normal" get="true" set="false" overload="3">
            <documentation>
              <summary>This overloaded indexer accepts three ints.</summary>
            </documentation>
            <parameter name="i1" type="System.Int32" />
            <parameter name="i2" type="System.Int32" />
            <parameter name="i3" type="System.Int32" />
          </property>
          <method name="Finalize" id="M:NDoc.Test.Class.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Class.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Class.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Class.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Method" id="M:NDoc.Test.Class.Method" access="Public" contract="Normal" overload="1"
            returnType="System.Void">
            <documentation>
              <summary>Executes some code.</summary>
            </documentation>
          </method>
          <method name="Method" id="M:NDoc.Test.Class.Method(System.Int32,System.Int32,System.Int32)"
            access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>Executes some code.</summary>
            </documentation>
            <parameter name="i1" type="System.Int32" />
            <parameter name="i2" type="System.Int32" />
            <parameter name="i3" type="System.Int32" />
          </method>
          <method name="StaticMethod" id="M:NDoc.Test.Class.StaticMethod" access="Public" contract="Static"
            returnType="System.Void">
            <documentation>
              <summary>Executes some static code.</summary>
            </documentation>
          </method>
          <method name="ParameterModifyers" id="M:NDoc.Test.Class.ParameterModifyers(System.Int32@,System.Int32@,System.Object[])"
            access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>Uses some parameter modifyers.</summary>
            </documentation>
            <parameter name="refParam" type="System.Int32" direction="ref" />
            <parameter name="outParam" type="System.Int32" direction="out" />
            <parameter name="paramArray" type="System.Object[]" isParamArray="true" />
          </method>
          <method name="ParameterModifyers" id="M:NDoc.Test.Class.ParameterModifyers(System.Int32,System.Int32@,System.Int32@,System.Object[])"
            access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>An overload.</summary>
            </documentation>
            <parameter name="a" type="System.Int32" />
            <parameter name="refParam" type="System.Int32" direction="ref" />
            <parameter name="outParam" type="System.Int32" direction="out" />
            <parameter name="paramArray" type="System.Object[]" isParamArray="true" />
          </method>
          <method name="RaisesSomeEvents" id="M:NDoc.Test.Class.RaisesSomeEvents" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Raises some events.
            </summary>
              <remarks>
                <para>
            Raises the <see cref="E:NDoc.Test.Class.Event" /> event when <see cref="M:NDoc.Test.Class.Method" /> is called,
            if <see cref="F:NDoc.Test.Class.Field" /> is greater than 0.
            </para>
                <para>
            The above paragraph is only intended to test crefs on different member types...
            </para>
              </remarks>
              <event cref="E:NDoc.Test.Class.Event">Raised when something occurs.</event>
              <event cref="E:NDoc.Test.Class.AccessorsEvent">Raised when it occurs...</event>
              <event cref="E:NDoc.Test.Class.ProtectedEvent">Raised when something else occurs.</event>
              <event cref="E:NDoc.Test.Class.EventWithArgs">Raised when it feels like it.</event>
              <event cref="E:System.Diagnostics.EventLog.EntryWritten">Raised when an entry was written to the event log.</event>
              <event cref="!:SomeUnknownEvent">Unknown.</event>
              <event cref="E:NDoc.Test.Class.EventWithMoreArgs">Never raised?</event>
              <event cref="E:NDoc.Test.Class.MultiEvent">Raised many times?</event>
              <exception cref="T:System.Exception">
            Some exception is thrown.
            </exception>
              <exception cref="T:NDoc.Test.MyException">
            Some other exception may also be thrown.
            </exception>
              <exception cref="!:SomeUnknownException">Unknown.</exception>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Class.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Class.MemberwiseClone" access="Family" declaringType="System.Object"
            contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <operator name="op_LogicalNot" id="M:NDoc.Test.Class.op_LogicalNot(NDoc.Test.Class)" access="Public"
            contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>This is my first overloaded operator.</summary>
              <remarks>Why do we have to declare them as static?</remarks>
            </documentation>
            <parameter name="x" type="NDoc.Test.Class" />
          </operator>
          <event name="Event" id="E:NDoc.Test.Class.Event" access="Public" contract="Normal" type="NDoc.Test.Handler"
            multicast="true">
            <documentation>
              <summary>This is a simple event that uses the Handler delegate.</summary>
            </documentation>
          </event>
          <event name="AccessorsEvent" id="E:NDoc.Test.Class.AccessorsEvent" access="Public" contract="Normal"
            type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>This event uses the <b>add</b> and <b>remove</b> accessors.</summary>
            </documentation>
          </event>
          <event name="EventWithArgs" id="E:NDoc.Test.Class.EventWithArgs" access="Public" contract="Normal"
            type="NDoc.Test.HandlerWithArgs" multicast="true">
            <documentation>
              <summary>This event has arguments.</summary>
            </documentation>
          </event>
          <event name="EventWithMoreArgs" id="E:NDoc.Test.Class.EventWithMoreArgs" access="Public"
            contract="Normal" type="NDoc.Test.HandlerWithMoreArgs" multicast="true">
            <documentation>
              <summary>This event has more arguments.</summary>
              <remarks>Check the links in the Event Data table...</remarks>
            </documentation>
          </event>
          <event name="ProtectedEvent" id="E:NDoc.Test.Class.ProtectedEvent" access="Family" contract="Normal"
            type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>This event is protected.</summary>
            </documentation>
          </event>
          <event name="StaticEvent" id="E:NDoc.Test.Class.StaticEvent" access="Public" contract="Static"
            type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>Can you do this?</summary>
            </documentation>
          </event>
          <event name="MultiEvent" id="E:NDoc.Test.Class.MultiEvent" access="Public" contract="Normal"
            type="NDoc.Test.MulticastHandler" multicast="true">
            <documentation>
              <summary>An event with one property.</summary>
            </documentation>
          </event>
        </class>
        <class name="EventArgsOne" id="T:NDoc.Test.EventArgsOne" access="Public">
          <documentation>
            <summary>This event has one property.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.EventArgsOne.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the EventArgsOne class.</summary>
            </documentation>
          </constructor>
          <property name="OneProperty" id="P:NDoc.Test.EventArgsOne.OneProperty" access="Public" type="System.Boolean"
            contract="Normal" get="true" set="true">
            <documentation>
              <summary>This is a unique event argument property.</summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.EventArgsOne.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.EventArgsOne.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.EventArgsOne.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.EventArgsOne.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.EventArgsOne.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.EventArgsOne.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="EventArgsTest" id="T:NDoc.Test.EventArgsTest" access="Public" baseType="CancelEventArgs">
          <documentation>
            <summary>This is an event arguments class.</summary>
          </documentation>
          <base name="CancelEventArgs" id="T:System.ComponentModel.CancelEventArgs" type="System.ComponentModel.CancelEventArgs">
            <base name="EventArgs" id="T:System.EventArgs" type="System.EventArgs" />
          </base>
          <constructor name=".ctor" id="M:NDoc.Test.EventArgsTest.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the EventArgsTest class.</summary>
            </documentation>
          </constructor>
          <property name="EventArgsTestProperty" id="P:NDoc.Test.EventArgsTest.EventArgsTestProperty"
            access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>This is an event arguments property.</summary>
            </documentation>
          </property>
          <property name="Cancel" id="P:NDoc.Test.EventArgsTest.Cancel" access="Public" declaringType="System.ComponentModel.CancelEventArgs"
            type="System.Boolean" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
                <para> Gets or sets a
      value indicating whether the event should be canceled.</para>
              </summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.EventArgsTest.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.EventArgsTest.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.EventArgsTest.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.EventArgsTest.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.EventArgsTest.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.EventArgsTest.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="EventArgsDerived" id="T:NDoc.Test.EventArgsDerived" access="Public" baseType="EventArgsTest">
          <documentation>
            <summary>This is a derived event arguments class.</summary>
          </documentation>
          <base name="EventArgsTest" id="T:NDoc.Test.EventArgsTest" type="NDoc.Test.EventArgsTest">
            <base name="CancelEventArgs" id="T:System.ComponentModel.CancelEventArgs" type="System.ComponentModel.CancelEventArgs">
              <base name="EventArgs" id="T:System.EventArgs" type="System.EventArgs" />
            </base>
          </base>
          <constructor name=".ctor" id="M:NDoc.Test.EventArgsDerived.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the EventArgsDerived class.</summary>
            </documentation>
          </constructor>
          <property name="EventArgsDerivedProperty" id="P:NDoc.Test.EventArgsDerived.EventArgsDerivedProperty"
            access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>This event arguments property is declared in the derived class.</summary>
            </documentation>
          </property>
          <property name="EventArgsTestProperty" id="P:NDoc.Test.EventArgsDerived.EventArgsTestProperty"
            access="Public" declaringType="NDoc.Test.EventArgsTest" type="System.String" contract="Normal"
            get="true" set="true">
            <documentation>
              <summary>This is an event arguments property.</summary>
            </documentation>
          </property>
          <property name="Cancel" id="P:NDoc.Test.EventArgsDerived.Cancel" access="Public" declaringType="System.ComponentModel.CancelEventArgs"
            type="System.Boolean" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
                <para> Gets or sets a
      value indicating whether the event should be canceled.</para>
              </summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.EventArgsDerived.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.EventArgsDerived.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.EventArgsDerived.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.EventArgsDerived.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.EventArgsDerived.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.EventArgsDerived.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="ImplementsTwoInterfaces" id="T:NDoc.Test.ImplementsTwoInterfaces" access="Public">
          <documentation>
            <summary>This class implements two empty interfaces.</summary>
          </documentation>
          <implements>Interface1</implements>
          <implements>Interface2</implements>
          <constructor name=".ctor" id="M:NDoc.Test.ImplementsTwoInterfaces.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the ImplementsTwoInterfaces class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.ImplementsTwoInterfaces.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.ImplementsTwoInterfaces.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.ImplementsTwoInterfaces.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.ImplementsTwoInterfaces.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.ImplementsTwoInterfaces.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.ImplementsTwoInterfaces.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Abstract" id="T:NDoc.Test.Abstract" access="Public" abstract="true">
          <documentation>
            <summary>Represents an abstract class.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Abstract.#ctor" access="Family">
            <documentation>
              <summary>Initializes a new instance of the Abstract class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Abstract.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Abstract.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Abstract.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Abstract.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Abstract.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Abstract.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="InterfaceEvent" id="E:NDoc.Test.Abstract.InterfaceEvent" access="Public" contract="Abstract"
            type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>This event is decalred in the Abstract class.</summary>
            </documentation>
          </event>
        </class>
        <class name="Base" id="T:NDoc.Test.Base" access="Public">
          <documentation>
            <summary>Represents a base class.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Base.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Base class.</summary>
            </documentation>
          </constructor>
          <field name="BaseField" id="F:NDoc.Test.Base.BaseField" access="Public" type="System.Int32">
            <documentation>
              <summary>This field is declared in the Base class.</summary>
            </documentation>
          </field>
          <property name="BaseProperty" id="P:NDoc.Test.Base.BaseProperty" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false">
            <documentation>
              <summary>This property is declared in the Base class.</summary>
            </documentation>
          </property>
          <method name="TwoVirtualOverloads" id="M:NDoc.Test.Base.TwoVirtualOverloads(System.Int32)"
            access="Public" contract="Virtual" overload="1" returnType="System.Void">
            <documentation>
              <summary>This virtual method is declared in the Base class.</summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="TwoVirtualOverloads" id="M:NDoc.Test.Base.TwoVirtualOverloads(System.String)"
            access="Public" contract="Virtual" overload="2" returnType="System.Void">
            <documentation>
              <summary>This virtual method is declared in the Base class.</summary>
            </documentation>
            <parameter name="key" type="System.String" />
          </method>
          <method name="Finalize" id="M:NDoc.Test.Base.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Base.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Base.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Base.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="BaseMethod" id="M:NDoc.Test.Base.BaseMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
          </method>
          <method name="NewMethod" id="M:NDoc.Test.Base.NewMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class without the "new" keyword.</summary>
            </documentation>
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Base.Overloaded(System.Int32)" access="Public"
            contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Base.Overloaded(System.Byte)" access="Public"
            contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
            <parameter name="i" type="System.Byte" />
          </method>
          <method name="StaticBaseMethod" id="M:NDoc.Test.Base.StaticBaseMethod" access="Public" contract="Static"
            returnType="System.Void">
            <documentation>
              <summary>A static method in the Base class.</summary>
              <remarks>This should not appear in derived classes.</remarks>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Base.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Base.MemberwiseClone" access="Family" declaringType="System.Object"
            contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="BaseEvent" id="E:NDoc.Test.Base.BaseEvent" access="Public" contract="Normal"
            type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>This event is declared in the Base class.</summary>
            </documentation>
          </event>
        </class>
        <class name="Derived" id="T:NDoc.Test.Derived" access="Public" baseType="Base">
          <documentation>
            <summary>Represents a derived class.</summary>
          </documentation>
          <base name="Base" id="T:NDoc.Test.Base" type="NDoc.Test.Base" />
          <constructor name=".ctor" id="M:NDoc.Test.Derived.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Derived class.</summary>
            </documentation>
          </constructor>
          <field name="BaseField" id="F:NDoc.Test.Derived.BaseField" access="Public" type="System.Int32"
            declaringType="NDoc.Test.Base">
            <documentation>
              <summary>This field is declared in the Base class.</summary>
            </documentation>
          </field>
          <property name="DerivedProperty" id="P:NDoc.Test.Derived.DerivedProperty" access="Public"
            type="System.Int32" contract="Normal" get="true" set="false">
            <documentation>
              <summary>This property is declared in the Derived class.</summary>
            </documentation>
          </property>
          <property name="BaseProperty" id="P:NDoc.Test.Derived.BaseProperty" access="Public" declaringType="NDoc.Test.Base"
            type="System.Int32" contract="Normal" get="true" set="false">
            <documentation>
              <summary>This property is declared in the Base class.</summary>
            </documentation>
          </property>
          <method name="TwoVirtualOverloads" id="M:NDoc.Test.Derived.TwoVirtualOverloads(System.Int32)"
            access="Public" declaringType="NDoc.Test.Base" contract="Virtual" overload="1" returnType="System.Void">
            <documentation>
              <summary>This virtual method is declared in the Base class.</summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="TwoVirtualOverloads" id="M:NDoc.Test.Derived.TwoVirtualOverloads(System.String)"
            access="Public" contract="Override" overload="2" returnType="System.Void">
            <documentation>
              <summary>This method is overriden in the Derived class.</summary>
              <remarks>Only one of the two overloads is overriden.</remarks>
            </documentation>
            <parameter name="key" type="System.String" />
          </method>
          <method name="Finalize" id="M:NDoc.Test.Derived.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Derived.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Derived.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Derived.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="DerivedMethod" id="M:NDoc.Test.Derived.DerivedMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Derived class.</summary>
              <remarks>This is a reference to a parent member: <see cref="P:NDoc.Test.Base.BaseProperty" /></remarks>
            </documentation>
          </method>
          <method name="NewMethod" id="M:NDoc.Test.Derived.NewMethod" access="Public" hiding="true"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Derived class with the "new" keyword.</summary>
            </documentation>
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived.Overloaded(System.String)" access="Public"
            contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>This method is overloaded in the Derived class.</summary>
            </documentation>
            <parameter name="s" type="System.String" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived.Overloaded(System.Double)" access="Public"
            contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>This method is also overloaded in the Derived class.</summary>
            </documentation>
            <parameter name="d" type="System.Double" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived.Overloaded(System.Char)" access="Public"
            contract="Normal" overload="3" returnType="System.Void">
            <documentation>
              <summary>This method is also overloaded in the Derived class.</summary>
            </documentation>
            <parameter name="c" type="System.Char" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived.Overloaded(NDoc.Test.Interface)" access="Public"
            contract="Normal" overload="4" returnType="System.Void">
            <documentation>
              <summary>This method is also overloaded in the Derived class.</summary>
              <remarks>This method accepts a type declared in the same namespace.</remarks>
            </documentation>
            <parameter name="i" type="NDoc.Test.Interface" />
          </method>
          <method name="StaticDerivedMethod" id="M:NDoc.Test.Derived.StaticDerivedMethod" access="Public"
            contract="Static" returnType="System.Void">
            <documentation>
              <summary>A static method in the Derived class.</summary>
              <remarks>This should not appear in derived classes.</remarks>
            </documentation>
          </method>
          <method name="BaseMethod" id="M:NDoc.Test.Derived.BaseMethod" access="Public" declaringType="NDoc.Test.Base"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived.Overloaded(System.Int32)" access="Public"
            declaringType="NDoc.Test.Base" contract="Normal" overload="5" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived.Overloaded(System.Byte)" access="Public"
            declaringType="NDoc.Test.Base" contract="Normal" overload="6" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
            <parameter name="i" type="System.Byte" />
          </method>
          <method name="GetType" id="M:NDoc.Test.Derived.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Derived.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="BaseEvent" id="E:NDoc.Test.Derived.BaseEvent" access="Public" contract="Normal"
            type="NDoc.Test.Handler" declaringType="NDoc.Test.Base" multicast="true">
            <documentation>
              <summary>This event is declared in the Base class.</summary>
            </documentation>
          </event>
        </class>
        <class name="Derived2" id="T:NDoc.Test.Derived2" access="Public" baseType="Derived">
          <documentation>
            <summary>Represents another derived class.</summary>
          </documentation>
          <base name="Derived" id="T:NDoc.Test.Derived" type="NDoc.Test.Derived">
            <base name="Base" id="T:NDoc.Test.Base" type="NDoc.Test.Base" />
          </base>
          <constructor name=".ctor" id="M:NDoc.Test.Derived2.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Derived2 class.</summary>
            </documentation>
          </constructor>
          <field name="BaseField" id="F:NDoc.Test.Derived2.BaseField" access="Public" type="System.Int32"
            declaringType="NDoc.Test.Base">
            <documentation>
              <summary>This field is declared in the Base class.</summary>
            </documentation>
          </field>
          <property name="DerivedProperty" id="P:NDoc.Test.Derived2.DerivedProperty" access="Public"
            declaringType="NDoc.Test.Derived" type="System.Int32" contract="Normal" get="true" set="false">
            <documentation>
              <summary>This property is declared in the Derived class.</summary>
            </documentation>
          </property>
          <property name="BaseProperty" id="P:NDoc.Test.Derived2.BaseProperty" access="Public" declaringType="NDoc.Test.Base"
            type="System.Int32" contract="Normal" get="true" set="false">
            <documentation>
              <summary>This property is declared in the Base class.</summary>
            </documentation>
          </property>
          <method name="TwoVirtualOverloads" id="M:NDoc.Test.Derived2.TwoVirtualOverloads(System.Int32)"
            access="Public" contract="Override" overload="1" returnType="System.Void">
            <documentation>
              <summary>This method is overriden in the Derived class.</summary>
              <remarks>Both overloads are overriden in this class.</remarks>
            </documentation>
            <parameter name="key" type="System.Int32" />
          </method>
          <method name="TwoVirtualOverloads" id="M:NDoc.Test.Derived2.TwoVirtualOverloads(System.String)"
            access="Public" contract="Override" overload="2" returnType="System.Void">
            <documentation>
              <summary>This method is overriden in the Derived class.</summary>
              <remarks>Both overloads are overriden in this class.</remarks>
            </documentation>
            <parameter name="key" type="System.String" />
          </method>
          <method name="Finalize" id="M:NDoc.Test.Derived2.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Derived2.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Derived2.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Derived2.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived2.Overloaded(System.Object)" access="Public"
            contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Add only one overload in Derived2 class.
            </summary>
            </documentation>
            <parameter name="o" type="System.Object" />
          </method>
          <method name="DerivedMethod" id="M:NDoc.Test.Derived2.DerivedMethod" access="Public" declaringType="NDoc.Test.Derived"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Derived class.</summary>
            </documentation>
          </method>
          <method name="NewMethod" id="M:NDoc.Test.Derived2.NewMethod" access="Public" declaringType="NDoc.Test.Derived"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Derived class with the "new" keyword.</summary>
            </documentation>
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived2.Overloaded(System.String)" access="Public"
            declaringType="NDoc.Test.Derived" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>This method is overloaded in the Derived class.</summary>
            </documentation>
            <parameter name="s" type="System.String" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived2.Overloaded(System.Double)" access="Public"
            declaringType="NDoc.Test.Derived" contract="Normal" overload="3" returnType="System.Void">
            <documentation>
              <summary>This method is also overloaded in the Derived class.</summary>
            </documentation>
            <parameter name="d" type="System.Double" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived2.Overloaded(System.Char)" access="Public"
            declaringType="NDoc.Test.Derived" contract="Normal" overload="4" returnType="System.Void">
            <documentation>
              <summary>This method is also overloaded in the Derived class.</summary>
            </documentation>
            <parameter name="c" type="System.Char" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived2.Overloaded(NDoc.Test.Interface)" access="Public"
            declaringType="NDoc.Test.Derived" contract="Normal" overload="5" returnType="System.Void">
            <documentation>
              <summary>This method is also overloaded in the Derived class.</summary>
            </documentation>
            <parameter name="i" type="NDoc.Test.Interface" />
          </method>
          <method name="BaseMethod" id="M:NDoc.Test.Derived2.BaseMethod" access="Public" declaringType="NDoc.Test.Base"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived2.Overloaded(System.Int32)" access="Public"
            declaringType="NDoc.Test.Base" contract="Normal" overload="6" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="Overloaded" id="M:NDoc.Test.Derived2.Overloaded(System.Byte)" access="Public"
            declaringType="NDoc.Test.Base" contract="Normal" overload="7" returnType="System.Void">
            <documentation>
              <summary>This method is declared in the Base class.</summary>
            </documentation>
            <parameter name="i" type="System.Byte" />
          </method>
          <method name="GetType" id="M:NDoc.Test.Derived2.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Derived2.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="EventInDerived" id="E:NDoc.Test.Derived2.EventInDerived" access="Public" contract="Normal"
            type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>
            This event is declared in the Derived2 class.
            </summary>
            </documentation>
          </event>
          <event name="BaseEvent" id="E:NDoc.Test.Derived2.BaseEvent" access="Public" contract="Normal"
            type="NDoc.Test.Handler" declaringType="NDoc.Test.Base" multicast="true">
            <documentation>
              <summary>This event is declared in the Base class.</summary>
            </documentation>
          </event>
        </class>
        <class name="Outer" id="T:NDoc.Test.Outer" access="Public">
          <documentation>
            <summary>Represents an outer class.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Outer.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Outer class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Outer.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Outer.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Outer.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Outer.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetInnerClassObject" id="M:NDoc.Test.Outer.GetInnerClassObject" access="Public"
            contract="Normal" returnType="NDoc.Test.Outer.Inner">
            <documentation>
              <summary>Function returning a public inner class oject.</summary>
            </documentation>
          </method>
          <method name="TestInnerClassObject" id="M:NDoc.Test.Outer.TestInnerClassObject(NDoc.Test.Outer.Inner)"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Function with a public inner class oject parameter.</summary>
            </documentation>
            <parameter name="TheInner" type="NDoc.Test.Outer.Inner" />
          </method>
          <method name="GetType" id="M:NDoc.Test.Outer.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Outer.MemberwiseClone" access="Family" declaringType="System.Object"
            contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Outer.Inner" id="T:NDoc.Test.Outer.Inner" access="NestedPublic">
          <documentation>
            <summary>Represents an inner class.</summary>
            <remarks>These are some remarks.</remarks>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Outer.Inner.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Inner class.</summary>
            </documentation>
          </constructor>
          <field name="InnerField" id="F:NDoc.Test.Outer.Inner.InnerField" access="Public" type="System.Int32">
            <documentation>
              <summary>This is a field of the inner class.</summary>
              <remarks>These are some remarks</remarks>
            </documentation>
          </field>
          <property name="InnerProperty" id="P:NDoc.Test.Outer.Inner.InnerProperty" access="Public"
            type="System.Int32" contract="Normal" get="true" set="false">
            <documentation>
              <summary>This is a property of the inner class.</summary>
              <remarks>These are some remarks</remarks>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.Outer.Inner.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Outer.Inner.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Outer.Inner.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Outer.Inner.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="InnerMethod" id="M:NDoc.Test.Outer.Inner.InnerMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This is a method of the inner class.</summary>
              <remarks>These are some remarks</remarks>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Outer.Inner.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Outer.Inner.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="See" id="T:NDoc.Test.See" access="Public">
          <documentation>
            <summary>This class has lots of &lt;see&gt; elements in the remarks.</summary>
            <remarks>See <see cref="T:NDoc.Test.Class" />.
            See <see cref="T:NDoc.Test.Interface" />.
            See <see cref="T:NDoc.Test.Struct1" />.
            See <see cref="M:NDoc.Test.Base.BaseMethod" />.
            See <see cref="M:NDoc.Test.Derived.DerivedMethod" />.
            See <see cref="T:NDoc.Test.Outer" />.
            See <see cref="T:NDoc.Test.Outer.Inner" />.
            See <see cref="T:NDoc.Test.Handler" />.
            See <see cref="T:NDoc.Test.Enum" />.
            See <see cref="F:NDoc.Test.Enum.Bar" />.
            See <see href="http://ndoc.sf.net/" />.
            See <see href="http://ndoc.sf.net/">NDOC</see>.
            </remarks>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.See.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the See class.</summary>
            </documentation>
          </constructor>
          <field name="Field1" id="F:NDoc.Test.See.Field1" access="Public" type="System.Int32">
            <documentation>
              <summary>
            This field's documentation references <see cref="M:NDoc.Test.See.RefProp1" />.
            </summary>
            </documentation>
          </field>
          <property name="Prop1" id="P:NDoc.Test.See.Prop1" access="Public" type="System.String" contract="Normal"
            get="true" set="false">
            <documentation>
              <summary>
            This properties' documentation references <see cref="T:System.IO.TextWriter" />.
            </summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.See.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.See.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.See.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.See.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="RefProp1" id="M:NDoc.Test.See.RefProp1" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>
            This method's documentation references <see cref="P:NDoc.Test.See.Prop1" /> and
            <see cref="F:NDoc.Test.See.Field1" />.
            </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.See.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.See.MemberwiseClone" access="Family" declaringType="System.Object"
            contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="SeeAlso" id="T:NDoc.Test.SeeAlso" access="Public">
          <documentation>
            <summary>This class has lots of &lt;seealso&gt; elements.</summary>
            <remarks>NDoc adds a special form of the &lt;seealso&gt; element.
            Instead of a cref attribute, you can specify a href attribute some text
            content just like a normal HTML &lt;a&gt; element.</remarks>
            <seealso href="http://ndoc.sf.net/">the ndoc homepage</seealso>
            <seealso cref="T:NDoc.Test.Class" />
            <seealso cref="T:NDoc.Test.Interface" />
            <seealso cref="T:NDoc.Test.Struct1" />
            <seealso cref="M:NDoc.Test.Base.BaseMethod" />
            <seealso cref="M:NDoc.Test.Derived.DerivedMethod" />
            <seealso cref="T:NDoc.Test.Outer" />
            <seealso cref="T:NDoc.Test.Outer.Inner" />
            <seealso cref="T:NDoc.Test.Handler" />
            <seealso cref="T:NDoc.Test.Enum" />
            <seealso cref="F:NDoc.Test.Enum.Bar" />
            <seealso href="http://slashdot.org/">Slashdot</seealso>
            <seealso cref="T:System.Object" />
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.SeeAlso.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the SeeAlso class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.SeeAlso.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.SeeAlso.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.SeeAlso.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.SeeAlso.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="AlsoSee" id="M:NDoc.Test.SeeAlso.AlsoSee" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This method has lots of &lt;seealso&gt; elements.</summary>
              <seealso cref="T:NDoc.Test.Class" />
              <seealso cref="T:NDoc.Test.Interface" />
              <seealso cref="T:NDoc.Test.Struct1" />
              <seealso cref="M:NDoc.Test.Base.BaseMethod" />
              <seealso cref="M:NDoc.Test.Derived.DerivedMethod" />
              <seealso cref="T:NDoc.Test.Outer" />
              <seealso cref="T:NDoc.Test.Outer.Inner" />
              <seealso cref="T:NDoc.Test.Handler" />
              <seealso cref="T:NDoc.Test.Enum" />
            </documentation>
          </method>
          <method name="SeeSystemClass" id="M:NDoc.Test.SeeAlso.SeeSystemClass" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.Object"/&gt;</summary>
              <seealso cref="T:System.Object" />
            </documentation>
          </method>
          <method name="SeeSystemField" id="M:NDoc.Test.SeeAlso.SeeSystemField" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.String.Empty"/&gt;</summary>
              <seealso cref="F:System.String.Empty" />
            </documentation>
          </method>
          <method name="SeeSystemProperty" id="M:NDoc.Test.SeeAlso.SeeSystemProperty" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.String.Length"/&gt;</summary>
              <seealso cref="P:System.String.Length" />
            </documentation>
          </method>
          <method name="SeeSystemIndexer" id="M:NDoc.Test.SeeAlso.SeeSystemIndexer" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.Collections.ArrayList.Item"/&gt;</summary>
              <seealso cref="P:System.Collections.ArrayList.Item(System.Int32)" />
            </documentation>
          </method>
          <method name="SeeSystemMethod" id="M:NDoc.Test.SeeAlso.SeeSystemMethod" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.Object.ToString"/&gt;</summary>
              <seealso cref="M:System.Object.ToString" />
            </documentation>
          </method>
          <method name="SeeSystemOverloadedMethod" id="M:NDoc.Test.SeeAlso.SeeSystemOverloadedMethod"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.Object.ToString"/&gt;</summary>
              <seealso cref="M:System.String.Equals(System.Object)" />
            </documentation>
          </method>
          <method name="SeeSystemEvent" id="M:NDoc.Test.SeeAlso.SeeSystemEvent" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.Xml.XmlDocument.NodeChanged"/&gt;</summary>
              <seealso cref="E:System.Xml.XmlDocument.NodeChanged" />
            </documentation>
          </method>
          <method name="SeeSystemInterface" id="M:NDoc.Test.SeeAlso.SeeSystemInterface" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.IDisposable"/&gt;</summary>
              <seealso cref="T:System.IDisposable" />
            </documentation>
          </method>
          <method name="SeeSystemStructure" id="M:NDoc.Test.SeeAlso.SeeSystemStructure" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.DateTime"/&gt;</summary>
              <seealso cref="T:System.DateTime" />
            </documentation>
          </method>
          <method name="SeeSystemDelegate" id="M:NDoc.Test.SeeAlso.SeeSystemDelegate" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.EventHandler"/&gt;</summary>
              <seealso cref="T:System.EventHandler" />
            </documentation>
          </method>
          <method name="SeeSystemEnumeration" id="M:NDoc.Test.SeeAlso.SeeSystemEnumeration" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.DayOfWeek"/&gt;</summary>
              <seealso cref="T:System.DayOfWeek" />
            </documentation>
          </method>
          <method name="SeeSystemNamespace" id="M:NDoc.Test.SeeAlso.SeeSystemNamespace" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>&lt;seealso cref="System.IO"/&gt;</summary>
              <seealso cref="N:System.IO" />
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.SeeAlso.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.SeeAlso.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Properties" id="T:NDoc.Test.Properties" access="Public" abstract="true">
          <documentation>
            <summary>Represents a class containing properties.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Properties.#ctor" access="Family">
            <documentation>
              <summary>Initializes a new instance of the Properties class.</summary>
            </documentation>
          </constructor>
          <property name="GetterAndSetter" id="P:NDoc.Test.Properties.GetterAndSetter" access="Public"
            type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>This property has a getter and a setter.</summary>
            </documentation>
          </property>
          <property name="GetterOnly" id="P:NDoc.Test.Properties.GetterOnly" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false">
            <documentation>
              <summary>This property has a getter only.</summary>
            </documentation>
          </property>
          <property name="SetterOnly" id="P:NDoc.Test.Properties.SetterOnly" access="Public" type="System.Int32"
            contract="Normal" get="false" set="true">
            <documentation>
              <summary>This property has a setter only.</summary>
            </documentation>
          </property>
          <property name="AbstractProperty" id="P:NDoc.Test.Properties.AbstractProperty" access="Public"
            type="System.Int32" contract="Abstract" get="true" set="true">
            <documentation>
              <summary>This property is abstract.</summary>
            </documentation>
          </property>
          <property name="VirtualProperty" id="P:NDoc.Test.Properties.VirtualProperty" access="Public"
            type="System.Int32" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>This property is virtual.</summary>
            </documentation>
          </property>
          <property name="Item" id="P:NDoc.Test.Properties.Item(System.Int32)" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false" overload="1">
            <documentation>
              <summary>This is an overloaded indexer.</summary>
              <remarks>This indexer accepts an int parameter.</remarks>
            </documentation>
            <parameter name="foo" type="System.Int32" />
          </property>
          <property name="Item" id="P:NDoc.Test.Properties.Item(System.String)" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false" overload="2">
            <documentation>
              <summary>This is an overloaded indexer.</summary>
              <remarks>This indexer accepts a string parameter.</remarks>
            </documentation>
            <parameter name="foo" type="System.String" />
          </property>
          <method name="Finalize" id="M:NDoc.Test.Properties.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Properties.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Properties.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Properties.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Properties.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Properties.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Links" id="T:NDoc.Test.Links" access="Public">
          <documentation>
            <summary>Represents a class that has lots of links
            in its documentation.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Links.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Links class.</summary>
            </documentation>
          </constructor>
          <field name="IntField" id="F:NDoc.Test.Links.IntField" access="Public" type="System.Int32">
            <documentation>
              <summary>Holds an integer.</summary>
            </documentation>
          </field>
          <property name="IntProperty" id="P:NDoc.Test.Links.IntProperty" access="Public" type="System.Int32"
            contract="Normal" get="true" set="true">
            <documentation>
              <summary>Gets or sets an integer.</summary>
              <value>an integer</value>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.Links.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Links.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Links.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Links.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="VoidMethod" id="M:NDoc.Test.Links.VoidMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>Returns nothing.</summary>
              <returns>Nada.</returns>
            </documentation>
          </method>
          <method name="IntMethod" id="M:NDoc.Test.Links.IntMethod" access="Public" contract="Normal"
            returnType="System.Int32">
            <documentation>
              <summary>Returns an int.</summary>
            </documentation>
          </method>
          <method name="StringMethod" id="M:NDoc.Test.Links.StringMethod" access="Public" contract="Normal"
            returnType="System.String">
            <documentation>
              <summary>Returns a string.</summary>
            </documentation>
          </method>
          <method name="LotsOfParams" id="M:NDoc.Test.Links.LotsOfParams(System.Int32,System.String,System.Char,System.Double)"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method accepts lots of parameters.</summary>
              <param name="i">an integer</param>
              <param name="s">a string</param>
              <param name="c">a character</param>
              <param name="d">a double</param>
              <remarks>The <paramref name="i" /> param is an integer.
            The <paramref name="s" /> param is a string.</remarks>
            </documentation>
            <parameter name="i" type="System.Int32" />
            <parameter name="s" type="System.String" />
            <parameter name="c" type="System.Char" />
            <parameter name="d" type="System.Double" />
          </method>
          <method name="GetType" id="M:NDoc.Test.Links.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Links.MemberwiseClone" access="Family" declaringType="System.Object"
            contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Example" id="T:NDoc.Test.Example" access="Public">
          <documentation>
            <summary>This class contains some example code.</summary>
            <example>
              <code>
            public class HelloWorld {
             static void Main() {
              System.Console.WriteLine("Hello, World!");
             }
            }
            </code>
            </example>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Example.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Example class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Example.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Example.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Example.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Example.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Example.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Example.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Exceptions" id="T:NDoc.Test.Exceptions" access="Public">
          <documentation>
            <summary>This class contains a method that throws exceptions.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Exceptions.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Exceptions class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Exceptions.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Exceptions.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Exceptions.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Exceptions.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Throw" id="M:NDoc.Test.Exceptions.Throw" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This method throws exceptions.</summary>
              <exception cref="T:System.Exception">A generic exception.</exception>
              <exception cref="T:System.ApplicationException">An application-specific exception.</exception>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Exceptions.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Exceptions.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Langword" id="T:NDoc.Test.Langword" access="Public">
          <documentation>
            <summary>This class contains &lt;see langword=""&gt; elements in the remarks.</summary>
            <remarks>The default style is <see langword="bold" />.
            But <see langword="null" />, <see langword="sealed" />,
            <see langword="static" />, <see langword="abstract" />,
            and <see langword="virtual" /> do more.</remarks>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Langword.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Langword class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Langword.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Langword.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Langword.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Langword.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Langword.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Langword.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Operators" id="T:NDoc.Test.Operators" access="Public">
          <documentation>
            <summary>This class contains all the overloadable operators.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Operators.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Operators class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Operators.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Operators.GetHashCode" access="Public" contract="Override"
            returnType="System.Int32">
            <documentation>
              <summary>GetHashCode method.</summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Operators.Equals(System.Object)" access="Public" contract="Override"
            returnType="System.Boolean">
            <documentation>
              <summary>Equals method.</summary>
            </documentation>
            <parameter name="o" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Operators.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Multiply" id="M:NDoc.Test.Operators.Multiply(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>A multiplication method.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </method>
          <method name="GetType" id="M:NDoc.Test.Operators.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Operators.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <operator name="op_UnaryPlus" id="M:NDoc.Test.Operators.op_UnaryPlus(NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Unary plus operator.</summary>
            </documentation>
            <parameter name="o" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_UnaryNegation" id="M:NDoc.Test.Operators.op_UnaryNegation(NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Unary minus operator.</summary>
            </documentation>
            <parameter name="o" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_LogicalNot" id="M:NDoc.Test.Operators.op_LogicalNot(NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Logical negation operator.</summary>
            </documentation>
            <parameter name="o" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_OnesComplement" id="M:NDoc.Test.Operators.op_OnesComplement(NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Bitwise complement operator.</summary>
            </documentation>
            <parameter name="o" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_Increment" id="M:NDoc.Test.Operators.op_Increment(NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="NDoc.Test.Operators">
            <documentation>
              <summary>Increment operator.</summary>
            </documentation>
            <parameter name="o" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_Decrement" id="M:NDoc.Test.Operators.op_Decrement(NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="NDoc.Test.Operators">
            <documentation>
              <summary>Decrement operator.</summary>
            </documentation>
            <parameter name="o" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_True" id="M:NDoc.Test.Operators.op_True(NDoc.Test.Operators)" access="Public"
            contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>Definitely true operator.</summary>
            </documentation>
            <parameter name="o" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_False" id="M:NDoc.Test.Operators.op_False(NDoc.Test.Operators)" access="Public"
            contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>Definitely false operator.</summary>
            </documentation>
            <parameter name="o" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_Addition" id="M:NDoc.Test.Operators.op_Addition(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Addition operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_Subtraction" id="M:NDoc.Test.Operators.op_Subtraction(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Subtraction operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_Multiply" id="M:NDoc.Test.Operators.op_Multiply(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Multiplication operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_Division" id="M:NDoc.Test.Operators.op_Division(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Division operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_Modulus" id="M:NDoc.Test.Operators.op_Modulus(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Remainder operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_BitwiseAnd" id="M:NDoc.Test.Operators.op_BitwiseAnd(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>And operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_BitwiseOr" id="M:NDoc.Test.Operators.op_BitwiseOr(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Or operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_ExclusiveOr" id="M:NDoc.Test.Operators.op_ExclusiveOr(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Exclusive-or operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_LeftShift" id="M:NDoc.Test.Operators.op_LeftShift(NDoc.Test.Operators,System.Int32)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Left-shift operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="System.Int32" />
          </operator>
          <operator name="op_RightShift" id="M:NDoc.Test.Operators.op_RightShift(NDoc.Test.Operators,System.Int32)"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Right-shift operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="System.Int32" />
          </operator>
          <operator name="op_Equality" id="M:NDoc.Test.Operators.op_Equality(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>Equality operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_Inequality" id="M:NDoc.Test.Operators.op_Inequality(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>Inequality operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_LessThan" id="M:NDoc.Test.Operators.op_LessThan(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>Less-than operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_GreaterThan" id="M:NDoc.Test.Operators.op_GreaterThan(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>Greater-than operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_LessThanOrEqual" id="M:NDoc.Test.Operators.op_LessThanOrEqual(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>Less-than-or-equal operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
          <operator name="op_GreaterThanOrEqual" id="M:NDoc.Test.Operators.op_GreaterThanOrEqual(NDoc.Test.Operators,NDoc.Test.Operators)"
            access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>Greater-than-or-equal operator.</summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.Operators" />
            <parameter name="y" type="NDoc.Test.Operators" />
          </operator>
        </class>
        <class name="TypeConversions" id="T:NDoc.Test.TypeConversions" access="Public">
          <documentation>
            <summary>This class contains various type conversions.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.TypeConversions.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the TypeConversions class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.TypeConversions.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.TypeConversions.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.TypeConversions.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.TypeConversions.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.TypeConversions.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.TypeConversions.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <operator name="op_Explicit" id="M:NDoc.Test.TypeConversions.op_Explicit(NDoc.Test.TypeConversions)~System.Int32"
            access="Public" contract="Static" returnType="System.Int32">
            <documentation>
              <summary>Explicit conversion to an int.</summary>
            </documentation>
            <parameter name="t" type="NDoc.Test.TypeConversions" />
          </operator>
        </class>
        <class name="Lists" id="T:NDoc.Test.Lists" access="Public">
          <documentation>
            <summary>The remarks in this class contains examples of list elements.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Lists.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Lists class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Lists.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Lists.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Lists.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Lists.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="BulletMethod" id="M:NDoc.Test.Lists.BulletMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>BulletMethodSummary</summary>
              <remarks>
                <list type="bullet">
                  <item>
                    <description>Item One</description>
                  </item>
                  <item>
                    <description>Item Two</description>
                  </item>
                  <item>
                    <description>Item Three</description>
                  </item>
                </list>
              </remarks>
            </documentation>
          </method>
          <method name="NumberMethod" id="M:NDoc.Test.Lists.NumberMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>NumberMethodSummary</summary>
              <remarks>
                <list type="number">
                  <item>
                    <description>Item One</description>
                  </item>
                  <item>
                    <description>Item Two</description>
                  </item>
                  <item>
                    <description>Item Three</description>
                  </item>
                </list>
              </remarks>
            </documentation>
          </method>
          <method name="TermMethod" id="M:NDoc.Test.Lists.TermMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>TermMethodSummary</summary>
              <remarks>
                <list type="bullet">
                  <item>
                    <term>Term One</term>
                    <description>Item One</description>
                  </item>
                  <item>
                    <term>Term Two</term>
                    <description>Item Two</description>
                  </item>
                  <item>
                    <term>Term Three</term>
                    <description>Item Three</description>
                  </item>
                </list>
              </remarks>
            </documentation>
          </method>
          <method name="TableMethod" id="M:NDoc.Test.Lists.TableMethod" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>TableMethodSummary</summary>
              <remarks>
                <list type="table">
                  <item>
                    <description>Cell One</description>
                  </item>
                  <item>
                    <description>Cell Two</description>
                  </item>
                  <item>
                    <description>Cell Three</description>
                  </item>
                </list>
              </remarks>
            </documentation>
          </method>
          <method name="TableWithHeaderMethod" id="M:NDoc.Test.Lists.TableWithHeaderMethod" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>TableWithHeaderMethodSummary</summary>
              <remarks>
                <list type="table">
                  <listheader>
                    <description>Header</description>
                  </listheader>
                  <item>
                    <description>Cell One</description>
                  </item>
                  <item>
                    <description>Cell Two</description>
                  </item>
                  <item>
                    <description>Cell Three</description>
                  </item>
                </list>
              </remarks>
            </documentation>
          </method>
          <method name="TwoColumnTableMethod" id="M:NDoc.Test.Lists.TwoColumnTableMethod" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>TwoColumnTableMethodSummary</summary>
              <remarks>
                <list type="table">
                  <listheader>
                    <term>Something</term>
                    <description>Details</description>
                  </listheader>
                  <item>
                    <term>Item 1</term>
                    <description>This is the first item</description>
                  </item>
                  <item>
                    <term>Item 2</term>
                    <description>This is the second item</description>
                  </item>
                  <item>
                    <term>Item 3</term>
                    <description>This is the third item</description>
                  </item>
                </list>
              </remarks>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Lists.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Lists.MemberwiseClone" access="Family" declaringType="System.Object"
            contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Paragraphs" id="T:NDoc.Test.Paragraphs" access="Public">
          <documentation>
            <summary>This class has para elements in its remarks.</summary>
            <remarks>
              <para>This is the first paragraph.</para>
              <para>This is the second paragraph.</para>
            </remarks>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Paragraphs.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Paragraphs class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Paragraphs.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Paragraphs.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Paragraphs.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Paragraphs.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Paragraphs.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Paragraphs.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Permissions" id="T:NDoc.Test.Permissions" access="Public">
          <documentation>
            <summary>This class shows how permission elements are used.</summary>
            <permission cref="T:System.Security.PermissionSet">to inherit from this class.</permission>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Permissions.#ctor" access="Public">
            <documentation>
              <summary>This constructor has permissions.</summary>
              <permission cref="T:System.Security.PermissionSet">to instanciate the <see cref="T:NDoc.Test.Permissions" /> class.</permission>
            </documentation>
          </constructor>
          <field name="RestrictedField" id="F:NDoc.Test.Permissions.RestrictedField" access="Public"
            type="System.String">
            <documentation>
              <summary>This field has permissions.</summary>
              <permission cref="T:System.Security.PermissionSet">to access this field.</permission>
            </documentation>
          </field>
          <property name="RestrictedProperty" id="P:NDoc.Test.Permissions.RestrictedProperty" access="Public"
            type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>This property has permissions.</summary>
              <permission cref="T:System.Security.PermissionSet">to access this property.</permission>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.Permissions.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Permissions.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Permissions.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Permissions.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="RestrictedMethod" id="M:NDoc.Test.Permissions.RestrictedMethod" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method has permissions.</summary>
              <permission cref="T:System.Security.PermissionSet">to execute this method.</permission>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Permissions.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Permissions.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="RestrictedEvent" id="E:NDoc.Test.Permissions.RestrictedEvent" access="Public"
            contract="Normal" type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>This event has permissions.</summary>
              <permission cref="T:System.Security.PermissionSet">to register with this event.</permission>
            </documentation>
          </event>
        </class>
        <class name="SealedClass" id="T:NDoc.Test.SealedClass" access="Public" sealed="true">
          <documentation>
            <summary>This is a sealed class.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.SealedClass.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the SealedClass class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.SealedClass.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.SealedClass.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.SealedClass.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.SealedClass.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.SealedClass.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.SealedClass.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="VisibilityTester" id="T:NDoc.Test.VisibilityTester" access="Public">
          <documentation>
            <summary>This class covers all member visibilities.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.VisibilityTester.#ctor" access="Public" overload="1">
            <documentation>
              <summary>Public constructor</summary>
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.VisibilityTester.#ctor(System.Boolean)" access="Family"
            overload="2">
            <documentation>
              <summary>Protected constructor</summary>
            </documentation>
            <parameter name="a" type="System.Boolean" />
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.VisibilityTester.#ctor(System.Int16)" access="FamilyOrAssembly"
            overload="3">
            <documentation>
              <summary>Protected Internal constructor</summary>
            </documentation>
            <parameter name="a" type="System.Int16" />
          </constructor>
          <field name="publicField" id="F:NDoc.Test.VisibilityTester.publicField" access="Public"
            type="System.Boolean">
            <documentation>
              <summary>Public field</summary>
            </documentation>
          </field>
          <field name="protectedField" id="F:NDoc.Test.VisibilityTester.protectedField" access="Family"
            type="System.Boolean">
            <documentation>
              <summary>Protected field</summary>
            </documentation>
          </field>
          <field name="protectedInternalField" id="F:NDoc.Test.VisibilityTester.protectedInternalField"
            access="FamilyOrAssembly" type="System.Boolean">
            <documentation>
              <summary>Protected Internal field</summary>
            </documentation>
          </field>
          <property name="PublicReadOnlyProperty" id="P:NDoc.Test.VisibilityTester.PublicReadOnlyProperty"
            access="Public" type="System.Boolean" contract="Normal" get="true" set="false">
            <documentation>
              <summary>Public read-only property</summary>
            </documentation>
          </property>
          <property name="PublicWriteOnlyProperty" id="P:NDoc.Test.VisibilityTester.PublicWriteOnlyProperty"
            access="Public" type="System.Boolean" contract="Normal" get="false" set="true">
            <documentation>
              <summary>Public write-only property</summary>
            </documentation>
          </property>
          <property name="ProtectedReadOnlyProperty" id="P:NDoc.Test.VisibilityTester.ProtectedReadOnlyProperty"
            access="Family" type="System.Boolean" contract="Normal" get="true" set="false">
            <documentation>
              <summary>Protected read-only property</summary>
            </documentation>
          </property>
          <property name="ProtectedWriteOnlyProperty" id="P:NDoc.Test.VisibilityTester.ProtectedWriteOnlyProperty"
            access="Family" type="System.Boolean" contract="Normal" get="false" set="true">
            <documentation>
              <summary>Protected write-only property</summary>
            </documentation>
          </property>
          <property name="ProtectedInternalReadOnlyProperty" id="P:NDoc.Test.VisibilityTester.ProtectedInternalReadOnlyProperty"
            access="FamilyOrAssembly" type="System.Boolean" contract="Normal" get="true" set="false">
            <documentation>
              <summary>Protected Internal read-only property</summary>
            </documentation>
          </property>
          <property name="ProtectedInternalWriteOnlyProperty" id="P:NDoc.Test.VisibilityTester.ProtectedInternalWriteOnlyProperty"
            access="FamilyOrAssembly" type="System.Boolean" contract="Normal" get="false" set="true">
            <documentation>
              <summary>Protected Internal write-only property</summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.VisibilityTester.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.VisibilityTester.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.VisibilityTester.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.VisibilityTester.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="PublicMethod" id="M:NDoc.Test.VisibilityTester.PublicMethod" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Public method</summary>
            </documentation>
          </method>
          <method name="ProtectedMethod" id="M:NDoc.Test.VisibilityTester.ProtectedMethod" access="Family"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Protected method</summary>
            </documentation>
          </method>
          <method name="ProtectedInternalMethod" id="M:NDoc.Test.VisibilityTester.ProtectedInternalMethod"
            access="FamilyOrAssembly" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Protected Internal method</summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.VisibilityTester.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.VisibilityTester.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="PublicEvent" id="E:NDoc.Test.VisibilityTester.PublicEvent" access="Public"
            contract="Normal" type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>Public event</summary>
            </documentation>
          </event>
          <event name="ProtectedEvent" id="E:NDoc.Test.VisibilityTester.ProtectedEvent" access="Family"
            contract="Normal" type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>Protected event</summary>
            </documentation>
          </event>
          <event name="ProtectedInternalEvent" id="E:NDoc.Test.VisibilityTester.ProtectedInternalEvent"
            access="FamilyOrAssembly" contract="Normal" type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>Protected Internal event</summary>
            </documentation>
          </event>
        </class>
        <class name="MissingDocumentationBase" id="T:NDoc.Test.MissingDocumentationBase" access="Public">
          <documentation>
            <summary></summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.MissingDocumentationBase.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the MissingDocumentationBase class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.MissingDocumentationBase.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.MissingDocumentationBase.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.MissingDocumentationBase.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.MissingDocumentationBase.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="SomeMethod" id="M:NDoc.Test.MissingDocumentationBase.SomeMethod(System.Int32,System.Boolean)"
            access="Public" contract="Normal" overload="1" returnType="System.Int32">
            <documentation>
              <summary>
            This one's documented!
            </summary>
              <param name="a">A param</param>
              <param name="b">Anotner param</param>
              <returns>returns something</returns>
              <remarks>
                <para>
            This is a remark.
            </para>
              </remarks>
            </documentation>
            <parameter name="a" type="System.Int32" />
            <parameter name="b" type="System.Boolean" />
          </method>
          <method name="SomeMethod" id="M:NDoc.Test.MissingDocumentationBase.SomeMethod(System.Int32,System.Int32)"
            access="Public" contract="Normal" overload="2" returnType="System.Int32">
            <documentation>
              <summary>
            This one's overloaded and documented!
            </summary>
              <param name="a">A param</param>
              <param name="b">Anotner param</param>
              <returns>returns something</returns>
              <remarks>
                <para>
            This is a remark.
            </para>
              </remarks>
            </documentation>
            <parameter name="a" type="System.Int32" />
            <parameter name="b" type="System.Int32" />
          </method>
          <method name="MethodWithEmptyDoc" id="M:NDoc.Test.MissingDocumentationBase.MethodWithEmptyDoc(System.Int32,System.Int32)"
            access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary></summary>
              <param name="a"></param>
              <param name="b"></param>
              <returns></returns>
              <remarks></remarks>
            </documentation>
            <parameter name="a" type="System.Int32" />
            <parameter name="b" type="System.Int32" />
          </method>
          <method name="GetType" id="M:NDoc.Test.MissingDocumentationBase.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.MissingDocumentationBase.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="MissingDocumentationDerived" id="T:NDoc.Test.MissingDocumentationDerived"
          access="Public" baseType="MissingDocumentationBase">
          <documentation>
            <summary></summary>
          </documentation>
          <base name="MissingDocumentationBase" id="T:NDoc.Test.MissingDocumentationBase" type="NDoc.Test.MissingDocumentationBase" />
          <constructor name=".ctor" id="M:NDoc.Test.MissingDocumentationDerived.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the MissingDocumentationDerived class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.MissingDocumentationDerived.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.MissingDocumentationDerived.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.MissingDocumentationDerived.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.MissingDocumentationDerived.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="SomeMethod" id="M:NDoc.Test.MissingDocumentationDerived.SomeMethod(System.Int32,System.Boolean)"
            access="Public" declaringType="NDoc.Test.MissingDocumentationBase" contract="Normal" overload="1"
            returnType="System.Int32">
            <documentation>
              <summary>
            This one's documented!
            </summary>
            </documentation>
            <parameter name="a" type="System.Int32" />
            <parameter name="b" type="System.Boolean" />
          </method>
          <method name="SomeMethod" id="M:NDoc.Test.MissingDocumentationDerived.SomeMethod(System.Int32,System.Int32)"
            access="Public" declaringType="NDoc.Test.MissingDocumentationBase" contract="Normal" overload="2"
            returnType="System.Int32">
            <documentation>
              <summary>
            This one's overloaded and documented!
            </summary>
            </documentation>
            <parameter name="a" type="System.Int32" />
            <parameter name="b" type="System.Int32" />
          </method>
          <method name="MethodWithEmptyDoc" id="M:NDoc.Test.MissingDocumentationDerived.MethodWithEmptyDoc(System.Int32,System.Int32)"
            access="Public" declaringType="NDoc.Test.MissingDocumentationBase" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary></summary>
            </documentation>
            <parameter name="a" type="System.Int32" />
            <parameter name="b" type="System.Int32" />
          </method>
          <method name="GetType" id="M:NDoc.Test.MissingDocumentationDerived.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.MissingDocumentationDerived.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="MyException" id="T:NDoc.Test.MyException" access="Public" baseType="ApplicationException">
          <documentation>
            <summary>
            This is an exception.
            </summary>
          </documentation>
          <base name="ApplicationException" id="T:System.ApplicationException" type="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" type="System.Exception" />
          </base>
          <implements inherited="true">ISerializable</implements>
          <constructor name=".ctor" id="M:NDoc.Test.MyException.#ctor(System.String)" access="Public">
            <documentation>
              <summary>
            This is a constructor for the exception.
            </summary>
              <param name="message">Message for this exception.</param>
            </documentation>
            <parameter name="message" type="System.String" />
          </constructor>
          <property name="Message" id="P:NDoc.Test.MyException.Message" access="Public" declaringType="System.Exception"
            type="System.String" contract="Virtual" get="true" set="false">
            <documentation>
              <summary>
                <para> Gets a message that describes the current exception.</para>
              </summary>
            </documentation>
          </property>
          <property name="InnerException" id="P:NDoc.Test.MyException.InnerException" access="Public"
            declaringType="System.Exception" type="System.Exception" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
                <para> Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</para>
              </summary>
            </documentation>
          </property>
          <property name="TargetSite" id="P:NDoc.Test.MyException.TargetSite" access="Public" declaringType="System.Exception"
            type="System.Reflection.MethodBase" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
                <para> Gets the method that throws
      the current exception.</para>
              </summary>
            </documentation>
          </property>
          <property name="StackTrace" id="P:NDoc.Test.MyException.StackTrace" access="Public" declaringType="System.Exception"
            type="System.String" contract="Virtual" get="true" set="false">
            <documentation>
              <summary>
                <para> Gets a string representation of the frames on the call stack at the time the
      current exception was thrown.</para>
              </summary>
            </documentation>
          </property>
          <property name="HelpLink" id="P:NDoc.Test.MyException.HelpLink" access="Public" declaringType="System.Exception"
            type="System.String" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>
                <para>Gets or sets a link to the help file associated with this
      exception.</para>
              </summary>
            </documentation>
          </property>
          <property name="Source" id="P:NDoc.Test.MyException.Source" access="Public" declaringType="System.Exception"
            type="System.String" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>
                <para> Gets or sets the name
      of the application or the object that causes the error.</para>
              </summary>
            </documentation>
          </property>
          <property name="HResult" id="P:NDoc.Test.MyException.HResult" access="Family" declaringType="System.Exception"
            type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
                <para>Gets or sets HRESULT, a coded numerical value
      that is assigned to a specific exception.</para>
              </summary>
            </documentation>
          </property>
          <method name="GetObjectData" id="M:NDoc.Test.MyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"
            access="Public" declaringType="System.Exception" contract="Virtual" returnType="System.Void">
            <implements name="GetObjectData" interface="ISerializable" interfaceId="T:System.Runtime.Serialization.ISerializable"
              declaringType="System.Runtime.Serialization.ISerializable" />
            <documentation>
              <summary>
                <para>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with information about the exception.</para>
              </summary>
            </documentation>
            <parameter name="info" type="System.Runtime.Serialization.SerializationInfo" />
            <parameter name="context" type="System.Runtime.Serialization.StreamingContext" />
          </method>
          <method name="GetBaseException" id="M:NDoc.Test.MyException.GetBaseException" access="Public"
            declaringType="System.Exception" contract="Virtual" returnType="System.Exception">
            <documentation>
              <summary>
                <para> When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</para>
              </summary>
            </documentation>
          </method>
          <method name="Finalize" id="M:NDoc.Test.MyException.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.MyException.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.MyException.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.MyException.ToString" access="Public" declaringType="System.Exception"
            contract="Override" returnType="System.String">
            <documentation>
              <summary>
                <para> Creates and returns a string
      representation of the current
      exception.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.MyException.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.MyException.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="CustomAttributes" id="T:NDoc.Test.CustomAttributes" access="Public">
          <documentation>
            <summary>This class has custom attributes on it.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.CustomAttributes.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the CustomAttributes class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.CustomAttributes.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.CustomAttributes.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.CustomAttributes.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.CustomAttributes.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.CustomAttributes.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.CustomAttributes.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="JustIndexer" id="T:NDoc.Test.JustIndexer" access="Public">
          <documentation>
            <summary>This class contains just an indexer so that we can see
            if that's what causes the DefaultMemberAttribute attribute to appear.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.JustIndexer.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the JustIndexer class.</summary>
            </documentation>
          </constructor>
          <property name="Item" id="P:NDoc.Test.JustIndexer.Item(System.Int32)" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false">
            <documentation>
              <summary>Am I the default member?</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </property>
          <method name="Finalize" id="M:NDoc.Test.JustIndexer.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.JustIndexer.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.JustIndexer.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.JustIndexer.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.JustIndexer.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.JustIndexer.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="LangAttributes" id="T:NDoc.Test.LangAttributes" access="Public">
          <documentation>
            <summary>The remarks contain some &lt;para&gt; and &lt;code&gt; elements with lang attributes.</summary>
            <remarks>
              <para>This paragraph has no lang attribute.</para>
              <para lang="Visual Basic">This paragraph has a Visual Basic lang attribute.</para>
              <para lang="VB">This paragraph has a VB lang attribute.</para>
              <para lang="C#">This paragraph has a C# lang attribute.</para>
              <para lang="C++, JScript">This paragraph has a C++, JScript lang attribute.</para>
              <code lang="Visual Basic">
            		' This is some Visual Basic code.
            	</code>
              <code lang="VB">
            		' This is some VB code.
            	</code>
              <code lang="C#">
            		// This is some C# code.
            	</code>
              <code lang="C++, JScript">
            		// This is either C++ or JScript code.
            	</code>
            </remarks>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.LangAttributes.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the LangAttributes class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.LangAttributes.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.LangAttributes.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.LangAttributes.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.LangAttributes.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.LangAttributes.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.LangAttributes.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="IncludeExample" id="T:NDoc.Test.IncludeExample" access="Public">
          <documentation>
            <summary>This is an included summary.</summary>
            <remarks>These are some included remarks.</remarks>
            <example>
              <para>This is an included example.</para>
              <code>
				Foo foo = new Foo();
				foo.Bar();</code>
              <para>This next example is not indented in the include file.</para>
              <code>
Foo foo = new Foo();
foo.Bar();</code>
            </example>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.IncludeExample.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the IncludeExample class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.IncludeExample.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.IncludeExample.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.IncludeExample.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.IncludeExample.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.IncludeExample.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.IncludeExample.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="BothInstanceAndStaticOverloads" id="T:NDoc.Test.BothInstanceAndStaticOverloads"
          access="Public">
          <documentation>
            <summary>This class has two methods with the same name but one is an instance method
            and the other is static.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.BothInstanceAndStaticOverloads.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the BothInstanceAndStaticOverloads class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.BothInstanceAndStaticOverloads.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.BothInstanceAndStaticOverloads.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.BothInstanceAndStaticOverloads.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.BothInstanceAndStaticOverloads.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Foo" id="M:NDoc.Test.BothInstanceAndStaticOverloads.Foo" access="Public" contract="Normal"
            overload="1" returnType="System.Void">
            <documentation>
              <summary>This is the instance method.</summary>
            </documentation>
          </method>
          <method name="Foo" id="M:NDoc.Test.BothInstanceAndStaticOverloads.Foo(System.Int32)" access="Public"
            contract="Static" overload="2" returnType="System.Void">
            <documentation>
              <summary>This is the static method.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="GetType" id="M:NDoc.Test.BothInstanceAndStaticOverloads.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.BothInstanceAndStaticOverloads.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="BothInstanceAndStaticOverloads2" id="T:NDoc.Test.BothInstanceAndStaticOverloads2"
          access="Public">
          <documentation>
            <summary>This class has two methods with the same name but one is an instance method
            and the other is static.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the BothInstanceAndStaticOverloads2 class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.GetHashCode"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Foo" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.Foo" access="Public"
            contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>This is the instance method.</summary>
            </documentation>
          </method>
          <method name="Foo" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.Foo(System.String)" access="Public"
            contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>This is another instance method.</summary>
            </documentation>
            <parameter name="name" type="System.String" />
          </method>
          <method name="Foo" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.Foo(System.Int32)" access="Public"
            contract="Static" overload="3" returnType="System.Void">
            <documentation>
              <summary>This is the static method.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="Foo" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.Foo(System.Object)" access="Public"
            contract="Static" overload="4" returnType="System.Void">
            <documentation>
              <summary>This is another static method.</summary>
            </documentation>
            <parameter name="o" type="System.Object" />
          </method>
          <method name="GetType" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.BothInstanceAndStaticOverloads2.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="jjj" id="T:NDoc.Test.jjj" access="Public">
          <documentation>
            <summary>this is jjj</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.jjj.#ctor(NDoc.Test.jjj.fred)" access="Public">
            <documentation>
              <summary>jjj constructor</summary>
              <remarks>jjj blah</remarks>
              <param name="f">f blah</param>
            </documentation>
            <parameter name="f" type="NDoc.Test.jjj.fred" />
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.jjj.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.jjj.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.jjj.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.jjj.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="mmm" id="M:NDoc.Test.jjj.mmm(NDoc.Test.jjj.fred)" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>mmm method</summary>
              <remarks>mmm blah</remarks>
              <param name="f">f blah</param>
            </documentation>
            <parameter name="f" type="NDoc.Test.jjj.fred" />
          </method>
          <method name="GetType" id="M:NDoc.Test.jjj.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.jjj.MemberwiseClone" access="Family" declaringType="System.Object"
            contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="EventWithException" id="T:NDoc.Test.EventWithException" access="Public">
          <documentation>
            <summary>This class has an event that throws an exception.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.EventWithException.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the EventWithException class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.EventWithException.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.EventWithException.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.EventWithException.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.EventWithException.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.EventWithException.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.EventWithException.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="ServiceRequest" id="E:NDoc.Test.EventWithException.ServiceRequest" access="Public"
            contract="Normal" type="System.EventHandler" multicast="true">
            <documentation>
              <exception cref="T:System.Exception">Thrown when... .</exception>
            </documentation>
          </event>
        </class>
        <class name="OverloadedWithNoParameters" id="T:NDoc.Test.OverloadedWithNoParameters" access="Public">
          <documentation>
            <summary>This class has a method that's overloaded where one of the
            overloads doesn't have any parameters.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.OverloadedWithNoParameters.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the OverloadedWithNoParameters class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.OverloadedWithNoParameters.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.OverloadedWithNoParameters.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.OverloadedWithNoParameters.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.OverloadedWithNoParameters.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Method" id="M:NDoc.Test.OverloadedWithNoParameters.Method" access="Public"
            contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>This is an overloaded method.</summary>
              <remarks>This overload has no parameters.</remarks>
            </documentation>
          </method>
          <method name="Method" id="M:NDoc.Test.OverloadedWithNoParameters.Method(System.Int32)" access="Public"
            contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>This is an overloaded method.</summary>
              <remarks>This overload has one parameter.</remarks>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="GetType" id="M:NDoc.Test.OverloadedWithNoParameters.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.OverloadedWithNoParameters.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="CRefToOverloadWithNoParameters" id="T:NDoc.Test.CRefToOverloadWithNoParameters"
          access="Public">
          <documentation>
            <summary>This class wants to ref the method with no parameters
            in the OverloadedWithNoParameters class.
            See <see cref="M:NDoc.Test.OverloadedWithNoParameters.Method" />
            ("OverloadedWithNoParameters.Method").
            See <see cref="M:NDoc.Test.OverloadedWithNoParameters.Method" />
            ("OverloadedWithNoParameters.Method()").
            See <see cref="M:NDoc.Test.OverloadedWithNoParameters.Method(System.Int32)" />
            ("OverloadedWithNoParameters.Method(int)").
            </summary>
            <remarks>
            The link to the method with parameters should point to that correct page.
            </remarks>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.CRefToOverloadWithNoParameters.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the CRefToOverloadWithNoParameters class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.CRefToOverloadWithNoParameters.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.CRefToOverloadWithNoParameters.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.CRefToOverloadWithNoParameters.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.CRefToOverloadWithNoParameters.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.CRefToOverloadWithNoParameters.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.CRefToOverloadWithNoParameters.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="ExplicitImplementation" id="T:NDoc.Test.ExplicitImplementation" access="Public">
          <documentation>
            <summary>Testing explicit interface implementations</summary>
          </documentation>
          <implements>ExplicitInterface</implements>
          <constructor name=".ctor" id="M:NDoc.Test.ExplicitImplementation.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the ExplicitImplementation class.</summary>
            </documentation>
          </constructor>
          <property name="NDoc.Test.ExplicitInterface.ExplicitProperty" id="P:NDoc.Test.ExplicitImplementation.NDoc.Test.ExplicitInterface.ExplicitProperty"
            access="Private" type="System.Int32" contract="Final" get="true" set="false" />
          <property name="ImplicitProperty" id="P:NDoc.Test.ExplicitImplementation.ImplicitProperty"
            access="Public" type="System.Int32" contract="Final" get="true" set="false">
            <implements name="ImplicitProperty" interface="ExplicitInterface" interfaceId="T:NDoc.Test.ExplicitInterface"
              declaringType="NDoc.Test.ExplicitInterface" />
            <documentation>
              <summary>an implicitely implemented property</summary>
            </documentation>
          </property>
          <method name="ImplicitMethod" id="M:NDoc.Test.ExplicitImplementation.ImplicitMethod" access="Public"
            contract="Final" returnType="System.Void">
            <implements name="ImplicitMethod" interface="ExplicitInterface" interfaceId="T:NDoc.Test.ExplicitInterface"
              declaringType="NDoc.Test.ExplicitInterface" />
            <documentation>
              <summary>an implicitely implemented method</summary>
            </documentation>
          </method>
          <method name="ExplicitInterface.ExplicitMethod" id="M:NDoc.Test.ExplicitImplementation.NDoc#Test#ExplicitInterface#ExplicitMethod"
            access="Private" interface="NDoc.Test.ExplicitInterface" contract="Final" returnType="System.Void">
            <implements name="ExplicitMethod" interface="ExplicitInterface" interfaceId="T:NDoc.Test.ExplicitInterface"
              declaringType="NDoc.Test.ExplicitInterface" />
            <documentation>
              <summary>an explicitly implemented method</summary>
            </documentation>
          </method>
          <method name="Finalize" id="M:NDoc.Test.ExplicitImplementation.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.ExplicitImplementation.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.ExplicitImplementation.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.ExplicitImplementation.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.ExplicitImplementation.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.ExplicitImplementation.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="OverloadsTag" id="T:NDoc.Test.OverloadsTag" access="Public">
          <documentation>
            <summary>Test the new overloads tag.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.OverloadsTag.#ctor" access="Public" overload="1">
            <documentation>
              <overloads>This constructor is overloaded.</overloads>
              <summary>This overloaded constructor accepts no parameters.</summary>
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.OverloadsTag.#ctor(System.Int32)" access="Public" overload="2">
            <documentation>
              <summary>This overloaded constructor accepts one int parameter.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </constructor>
          <property name="Item" id="P:NDoc.Test.OverloadsTag.Item(System.Int32)" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false" overload="1">
            <documentation>
              <overloads>This indexer is overloaded.</overloads>
              <summary>This overloaded indexer accepts one int parameter.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </property>
          <property name="Item" id="P:NDoc.Test.OverloadsTag.Item(System.String)" access="Public" type="System.Int32"
            contract="Normal" get="true" set="false" overload="2">
            <documentation>
              <summary>This overloaded indexer accepts one string parameter.</summary>
            </documentation>
            <parameter name="s" type="System.String" />
          </property>
          <method name="Finalize" id="M:NDoc.Test.OverloadsTag.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.OverloadsTag.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.OverloadsTag.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.OverloadsTag.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="OverloadedMethod" id="M:NDoc.Test.OverloadsTag.OverloadedMethod" access="Public"
            contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <overloads>
            This method is overloaded.
            </overloads>
              <summary>This overload accepts no parameters.</summary>
            </documentation>
          </method>
          <method name="OverloadedMethod" id="M:NDoc.Test.OverloadsTag.OverloadedMethod(System.Int32)"
            access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>This overload accepts one int parameter.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="OverloadedMethod2" id="M:NDoc.Test.OverloadsTag.OverloadedMethod2" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method is not overloaded and should not override
            the OverloadedMethod(int i) page.</summary>
            </documentation>
          </method>
          <method name="FullDocOverloadedMethod" id="M:NDoc.Test.OverloadsTag.FullDocOverloadedMethod"
            access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <overloads>
                <summary>This method is overloaded.</summary>
                <remarks>
                  <para>This remark should also appear.</para>
                  <note>This is a note.</note>
                </remarks>
                <example>
                  <para>This is some example code.</para>
                  <code>Foo.Bar.Baz.Quux();</code>
                </example>
              </overloads>
              <summary>This overload accepts no parameters.</summary>
            </documentation>
          </method>
          <method name="FullDocOverloadedMethod" id="M:NDoc.Test.OverloadsTag.FullDocOverloadedMethod(System.Int32)"
            access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>This overload accepts one int parameter.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="GetType" id="M:NDoc.Test.OverloadsTag.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.OverloadsTag.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <operator name="op_Addition" id="M:NDoc.Test.OverloadsTag.op_Addition(NDoc.Test.OverloadsTag,NDoc.Test.OverloadsTag)"
            access="Public" contract="Static" overload="1" returnType="NDoc.Test.OverloadsTag">
            <documentation>
              <overloads>The Addition for <b>OverloadsTag</b>.</overloads>
              <summary>
            Addition that takes two <b>OverloadsTag</b>.
            </summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.OverloadsTag" />
            <parameter name="y" type="NDoc.Test.OverloadsTag" />
          </operator>
          <operator name="op_Addition" id="M:NDoc.Test.OverloadsTag.op_Addition(NDoc.Test.OverloadsTag,System.Int32)"
            access="Public" contract="Static" overload="2" returnType="NDoc.Test.OverloadsTag">
            <documentation>
              <summary>
            Addition that takes an <b>OverloadsTag</b> and an <b>Int32</b>.
            </summary>
            </documentation>
            <parameter name="x" type="NDoc.Test.OverloadsTag" />
            <parameter name="i" type="System.Int32" />
          </operator>
        </class>
        <class name="NotesTest" id="T:NDoc.Test.NotesTest" access="Public">
          <documentation>
            <summary>This class uses note elements on its members.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.NotesTest.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the NotesTest class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NotesTest.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NotesTest.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NotesTest.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NotesTest.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="NoteInSummary" id="M:NDoc.Test.NotesTest.NoteInSummary" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>
                <para>This summary has a note.</para>
                <note>This is a note.</note>
              </summary>
            </documentation>
          </method>
          <method name="NoteInRemarks" id="M:NDoc.Test.NotesTest.NoteInRemarks" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This method has a note in its remarks.</summary>
              <remarks>
                <para>These remarks have a note.</para>
                <note>This is a note.</note>
              </remarks>
            </documentation>
          </method>
          <method name="CautionNote" id="M:NDoc.Test.NotesTest.CautionNote" access="Public" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This method has cautionary note in its remarks.</summary>
              <remarks>
                <para>These remarks have a cautionary note.</para>
                <note type="caution">Watch out!</note>
              </remarks>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NotesTest.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NotesTest.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="IndexerNotNamedItem" id="T:NDoc.Test.IndexerNotNamedItem" access="Public">
          <documentation>
            <summary>This class has an indexer with a name other than Item.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.IndexerNotNamedItem.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the IndexerNotNamedItem class.</summary>
            </documentation>
          </constructor>
          <property name="MyItem" id="P:NDoc.Test.IndexerNotNamedItem.MyItem(System.Int32)" access="Public"
            type="System.Int32" contract="Normal" get="true" set="false">
            <documentation>
              <summary>This indexer is not named Item.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </property>
          <method name="Finalize" id="M:NDoc.Test.IndexerNotNamedItem.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.IndexerNotNamedItem.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.IndexerNotNamedItem.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.IndexerNotNamedItem.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.IndexerNotNamedItem.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.IndexerNotNamedItem.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Matrix" id="T:NDoc.Test.Matrix" access="Public">
          <documentation>
            <summary>This class has a member that uses 2D rectangular arrays.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Matrix.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Matrix class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Matrix.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Matrix.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Matrix.Equals(System.Object)" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Matrix.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Inverse2" id="M:NDoc.Test.Matrix.Inverse2(System.Double[0:,0:])" access="Public"
            contract="Static" returnType="System.Double[,]">
            <documentation>
              <summary>Returns the inverse of a matrix.</summary>
              <param name="matrix">A matrix.</param>
              <returns>The inverted matrix.</returns>
            </documentation>
            <parameter name="matrix" type="System.Double[,]" />
          </method>
          <method name="Inverse3" id="M:NDoc.Test.Matrix.Inverse3(System.Double[0:,0:,0:])" access="Public"
            contract="Static" returnType="System.Double[,,]">
            <documentation>
              <summary>Returns the inverse of a matrix.</summary>
              <param name="matrix">A matrix.</param>
              <returns>The inverted matrix.</returns>
            </documentation>
            <parameter name="matrix" type="System.Double[,,]" />
          </method>
          <method name="GetType" id="M:NDoc.Test.Matrix.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Matrix.MemberwiseClone" access="Family" declaringType="System.Object"
            contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="PublicClassWithPrivateEnum" id="T:NDoc.Test.PublicClassWithPrivateEnum" access="Public">
          <documentation>
            <summary>This public class contains a private enum.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.PublicClassWithPrivateEnum.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the PublicClassWithPrivateEnum class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.PublicClassWithPrivateEnum.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.PublicClassWithPrivateEnum.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.PublicClassWithPrivateEnum.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.PublicClassWithPrivateEnum.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.PublicClassWithPrivateEnum.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.PublicClassWithPrivateEnum.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="RefToByteArrayTest" id="T:NDoc.Test.RefToByteArrayTest" access="Public">
          <documentation>
            <summary>This class has a method that accepts a ref to a byte array.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.RefToByteArrayTest.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the RefToByteArrayTest class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.RefToByteArrayTest.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.RefToByteArrayTest.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.RefToByteArrayTest.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.RefToByteArrayTest.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="RefToByteArray" id="M:NDoc.Test.RefToByteArrayTest.RefToByteArray(System.Byte[]@)"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method that accepts a ref to a byte array.</summary>
              <param name="array">A ref to a byte array.</param>
            </documentation>
            <parameter name="array" type="System.Byte[]" direction="ref" />
          </method>
          <method name="GetType" id="M:NDoc.Test.RefToByteArrayTest.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.RefToByteArrayTest.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="PrivateImplementationDetails" id="T:NDoc.Test.PrivateImplementationDetails"
          access="Public">
          <documentation>
            <summary>This class causes the &lt;PrivateImplementationDetails&gt; 
            class to appear in the compiled assembly.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.PrivateImplementationDetails.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the PrivateImplementationDetails class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.PrivateImplementationDetails.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.PrivateImplementationDetails.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.PrivateImplementationDetails.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.PrivateImplementationDetails.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.PrivateImplementationDetails.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.PrivateImplementationDetails.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="LinkToEnumMember" id="T:NDoc.Test.LinkToEnumMember" access="Public">
          <documentation>
            <summary>See <see cref="F:NDoc.Test.Enum.Foo" />.</summary>
            <remarks>The summary contains a cref to an enum member.</remarks>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.LinkToEnumMember.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the LinkToEnumMember class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.LinkToEnumMember.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.LinkToEnumMember.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.LinkToEnumMember.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.LinkToEnumMember.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.LinkToEnumMember.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.LinkToEnumMember.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="SeeOverloadedStatic" id="T:NDoc.Test.SeeOverloadedStatic" access="Public">
          <documentation>
            <summary>See <see cref="M:NDoc.Test.SeeOverloadedStatic.StaticOverload(System.Int32)" />.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.SeeOverloadedStatic.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the SeeOverloadedStatic class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.SeeOverloadedStatic.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.SeeOverloadedStatic.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.SeeOverloadedStatic.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.SeeOverloadedStatic.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="StaticOverload" id="M:NDoc.Test.SeeOverloadedStatic.StaticOverload(System.Int32)"
            access="Public" contract="Static" overload="1" returnType="System.Void">
            <documentation>
              <summary>Overload one.</summary>
            </documentation>
            <parameter name="i" type="System.Int32" />
          </method>
          <method name="StaticOverload" id="M:NDoc.Test.SeeOverloadedStatic.StaticOverload(System.String)"
            access="Public" contract="Static" overload="2" returnType="System.Void">
            <documentation>
              <summary>Overload two.</summary>
            </documentation>
            <parameter name="s" type="System.String" />
          </method>
          <method name="GetType" id="M:NDoc.Test.SeeOverloadedStatic.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.SeeOverloadedStatic.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="ConstFields" id="T:NDoc.Test.ConstFields" access="Public">
          <documentation>
            <summary>This class contains constant fields.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.ConstFields.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the ConstFields class.</summary>
            </documentation>
          </constructor>
          <field name="ConstString" id="F:NDoc.Test.ConstFields.ConstString" access="Public" type="System.String"
            contract="Static" literal="true">
            <documentation>
              <summary>This is a constant string.</summary>
            </documentation>
          </field>
          <method name="Finalize" id="M:NDoc.Test.ConstFields.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.ConstFields.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.ConstFields.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.ConstFields.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.ConstFields.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.ConstFields.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="InheritedFields" id="T:NDoc.Test.InheritedFields" access="Public" baseType="ResourceManager">
          <documentation>
            <summary>
            A class that inherits fields from a System class.
            </summary>
          </documentation>
          <base name="ResourceManager" id="T:System.Resources.ResourceManager" type="System.Resources.ResourceManager" />
          <constructor name=".ctor" id="M:NDoc.Test.InheritedFields.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the InheritedFields class.</summary>
            </documentation>
          </constructor>
          <field name="MyField" id="F:NDoc.Test.InheritedFields.MyField" access="Public" type="System.Int32"
            contract="Static" initOnly="true">
            <documentation>
              <summary>
            This field is added for comparison.
            </summary>
            </documentation>
          </field>
          <field name="BaseNameField" id="F:NDoc.Test.InheritedFields.BaseNameField" access="Family"
            type="System.String" declaringType="System.Resources.ResourceManager">
            <documentation>
              <summary>
                <para>Indicates the root name of the resource files that the
   <see cref="T:System.Resources.ResourceManager" /> searches for resources.</para>
              </summary>
            </documentation>
          </field>
          <field name="ResourceSets" id="F:NDoc.Test.InheritedFields.ResourceSets" access="Family"
            type="System.Collections.Hashtable" declaringType="System.Resources.ResourceManager">
            <documentation>
              <summary>
                <para> Contains a <see cref="T:System.Collections.Hashtable" /> that returns a mapping from cultures
   to <see cref="T:System.Resources.ResourceSet" /> objects.
   </para>
              </summary>
            </documentation>
          </field>
          <field name="MainAssembly" id="F:NDoc.Test.InheritedFields.MainAssembly" access="Family"
            type="System.Reflection.Assembly" declaringType="System.Resources.ResourceManager">
            <documentation>
              <summary>
                <para>Indicates the main <see cref="T:System.Reflection.Assembly" />
 that contains the
 resources.</para>
              </summary>
            </documentation>
          </field>
          <property name="BaseName" id="P:NDoc.Test.InheritedFields.BaseName" access="Public" declaringType="System.Resources.ResourceManager"
            type="System.String" contract="Virtual" get="true" set="false">
            <documentation>
              <summary>
                <para> Gets the root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</para>
              </summary>
            </documentation>
          </property>
          <property name="IgnoreCase" id="P:NDoc.Test.InheritedFields.IgnoreCase" access="Public" declaringType="System.Resources.ResourceManager"
            type="System.Boolean" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>
                <para>Gets or sets a Boolean value indicating whether the
      current instance of ResourceManager allows case-insensitive resource lookups in
      the <see cref="M:System.Resources.ResourceManager.GetString(System.String)" />and <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> methods.</para>
              </summary>
            </documentation>
          </property>
          <property name="ResourceSetType" id="P:NDoc.Test.InheritedFields.ResourceSetType" access="Public"
            declaringType="System.Resources.ResourceManager" type="System.Type" contract="Virtual" get="true"
            set="false">
            <documentation>
              <summary>
                <para> Gets the <see cref="T:System.Type" />
 of the <see cref="T:System.Resources.ResourceSet" /> the <see cref="T:System.Resources.ResourceManager" /> uses to construct a <see cref="T:System.Resources.ResourceSet" />
 object.</para>
              </summary>
            </documentation>
          </property>
          <method name="GetObject" id="M:NDoc.Test.InheritedFields.GetObject(System.String,System.Globalization.CultureInfo)"
            access="Public" declaringType="System.Resources.ResourceManager" contract="Virtual" overload="1"
            returnType="System.Object">
            <documentation>
              <summary>
                <para>Gets the value of the <see cref="T:System.Object" /> resource localized for
   the specified culture.</para>
              </summary>
            </documentation>
            <parameter name="name" type="System.String" />
            <parameter name="culture" type="System.Globalization.CultureInfo" />
          </method>
          <method name="GetObject" id="M:NDoc.Test.InheritedFields.GetObject(System.String)" access="Public"
            declaringType="System.Resources.ResourceManager" contract="Virtual" overload="2" returnType="System.Object">
            <documentation>
              <summary>
                <para>Returns the value of the specified <see cref="T:System.Object" /> resource. </para>
              </summary>
            </documentation>
            <parameter name="name" type="System.String" />
          </method>
          <method name="GetString" id="M:NDoc.Test.InheritedFields.GetString(System.String,System.Globalization.CultureInfo)"
            access="Public" declaringType="System.Resources.ResourceManager" contract="Virtual" overload="1"
            returnType="System.String">
            <documentation>
              <summary>
                <para>Gets the value of the <see cref="T:System.String" /> resource localized for
   the specified culture.</para>
              </summary>
            </documentation>
            <parameter name="name" type="System.String" />
            <parameter name="culture" type="System.Globalization.CultureInfo" />
          </method>
          <method name="GetString" id="M:NDoc.Test.InheritedFields.GetString(System.String)" access="Public"
            declaringType="System.Resources.ResourceManager" contract="Virtual" overload="2" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns the value of the specified <see cref="T:System.String" />
resource.</para>
              </summary>
            </documentation>
            <parameter name="name" type="System.String" />
          </method>
          <method name="InternalGetResourceSet" id="M:NDoc.Test.InheritedFields.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)"
            access="Family" declaringType="System.Resources.ResourceManager" contract="Virtual" returnType="System.Resources.ResourceSet">
            <documentation>
              <summary>
                <para>Provides the implementation for finding a <see cref="T:System.Resources.ResourceSet" /> .</para>
              </summary>
            </documentation>
            <parameter name="culture" type="System.Globalization.CultureInfo" />
            <parameter name="createIfNotExists" type="System.Boolean" />
            <parameter name="tryParents" type="System.Boolean" />
          </method>
          <method name="GetResourceSet" id="M:NDoc.Test.InheritedFields.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)"
            access="Public" declaringType="System.Resources.ResourceManager" contract="Virtual" returnType="System.Resources.ResourceSet">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Resources.ResourceSet" /> for a
   particular culture.</para>
              </summary>
            </documentation>
            <parameter name="culture" type="System.Globalization.CultureInfo" />
            <parameter name="createIfNotExists" type="System.Boolean" />
            <parameter name="tryParents" type="System.Boolean" />
          </method>
          <method name="GetResourceFileName" id="M:NDoc.Test.InheritedFields.GetResourceFileName(System.Globalization.CultureInfo)"
            access="Family" declaringType="System.Resources.ResourceManager" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Generates the name for the resource file for the given
   <see cref="T:System.Globalization.CultureInfo" /> .</para>
              </summary>
            </documentation>
            <parameter name="culture" type="System.Globalization.CultureInfo" />
          </method>
          <method name="ReleaseAllResources" id="M:NDoc.Test.InheritedFields.ReleaseAllResources"
            access="Public" declaringType="System.Resources.ResourceManager" contract="Virtual" returnType="System.Void">
            <documentation>
              <summary>
                <para>Tells the <see cref="T:System.Resources.ResourceManager" /> to call <see cref="M:System.Resources.ResourceSet.Close" /> on all <see cref="T:System.Resources.ResourceSet" />
objects and release all
resources.</para>
              </summary>
            </documentation>
          </method>
          <method name="Finalize" id="M:NDoc.Test.InheritedFields.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.InheritedFields.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.InheritedFields.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.InheritedFields.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.InheritedFields.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.InheritedFields.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="OverloadsWithDifferentAccess" id="T:NDoc.Test.OverloadsWithDifferentAccess"
          access="Public">
          <documentation>
            <summary>
            Demonstrates overloads with different access.
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.OverloadsWithDifferentAccess.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the OverloadsWithDifferentAccess class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.OverloadsWithDifferentAccess.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.OverloadsWithDifferentAccess.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.OverloadsWithDifferentAccess.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.OverloadsWithDifferentAccess.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="SomeMethod" id="M:NDoc.Test.OverloadsWithDifferentAccess.SomeMethod(System.Int32)"
            access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Public method with int param.
            </summary>
              <param name="index">Some int value</param>
            </documentation>
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="SomeMethod" id="M:NDoc.Test.OverloadsWithDifferentAccess.SomeMethod(System.String)"
            access="Family" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Protected method with string param.
            </summary>
              <param name="name">Some string value</param>
            </documentation>
            <parameter name="name" type="System.String" />
          </method>
          <method name="SomeMethod" id="M:NDoc.Test.OverloadsWithDifferentAccess.SomeMethod(System.Double)"
            access="Public" contract="Static" overload="3" returnType="System.Void">
            <documentation>
              <summary>
            Public static method with double param.
            </summary>
              <param name="index">Some double value</param>
            </documentation>
            <parameter name="index" type="System.Double" />
          </method>
          <method name="SomeMethod" id="M:NDoc.Test.OverloadsWithDifferentAccess.SomeMethod(System.Type)"
            access="Family" contract="Static" overload="4" returnType="System.Void">
            <documentation>
              <summary>
            Protected static method with Type param.
            </summary>
              <param name="name">Some Type value</param>
            </documentation>
            <parameter name="name" type="System.Type" />
          </method>
          <method name="GetType" id="M:NDoc.Test.OverloadsWithDifferentAccess.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.OverloadsWithDifferentAccess.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <interface name="Interface" id="T:NDoc.Test.Interface" access="Public">
          <documentation>
            <summary>This is an interface.</summary>
          </documentation>
          <property name="InterfaceProperty" id="P:NDoc.Test.Interface.InterfaceProperty" access="Public"
            type="System.Int32" contract="Abstract" get="true" set="false">
            <documentation>
              <summary>This is a property in an interface.</summary>
            </documentation>
          </property>
          <method name="InterfaceMethod" id="M:NDoc.Test.Interface.InterfaceMethod" access="Public"
            contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>This is a method in an interface.</summary>
            </documentation>
          </method>
          <event name="InterfaceEvent" id="E:NDoc.Test.Interface.InterfaceEvent" access="Public"
            contract="Abstract" type="NDoc.Test.Handler" multicast="true">
            <documentation>
              <summary>This event is declared in an interface.</summary>
            </documentation>
          </event>
        </interface>
        <interface name="InterfaceInherited" id="T:NDoc.Test.InterfaceInherited" access="Public">
          <documentation>
            <summary>This interface inherits from another interface.</summary>
          </documentation>
          <implements>Interface</implements>
          <method name="OtherMethod" id="M:NDoc.Test.InterfaceInherited.OtherMethod" access="Public"
            contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>This is another method declared in an inteface.</summary>
            </documentation>
          </method>
        </interface>
        <interface name="Interface1" id="T:NDoc.Test.Interface1" access="Public">
          <documentation>
            <summary>This is an empty interface.</summary>
          </documentation>
        </interface>
        <interface name="Interface2" id="T:NDoc.Test.Interface2" access="Public">
          <documentation>
            <summary>This is also an empty interface.</summary>
          </documentation>
        </interface>
        <interface name="Outer.InnerInterface" id="T:NDoc.Test.Outer.InnerInterface" access="NestedPublic">
          <documentation>
            <summary>This is a nested interface.</summary>
          </documentation>
        </interface>
        <interface name="ExplicitInterface" id="T:NDoc.Test.ExplicitInterface" access="Public">
          <documentation>
            <summary>Explicit interface test (public)</summary>
          </documentation>
          <property name="ExplicitProperty" id="P:NDoc.Test.ExplicitInterface.ExplicitProperty" access="Public"
            type="System.Int32" contract="Abstract" get="true" set="false">
            <documentation>
              <summary>Explicit method test</summary>
            </documentation>
          </property>
          <property name="ImplicitProperty" id="P:NDoc.Test.ExplicitInterface.ImplicitProperty" access="Public"
            type="System.Int32" contract="Abstract" get="true" set="false">
            <documentation>
              <summary>Implicit method test</summary>
            </documentation>
          </property>
          <method name="ImplicitMethod" id="M:NDoc.Test.ExplicitInterface.ImplicitMethod" access="Public"
            contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>Implicit method test</summary>
            </documentation>
          </method>
          <method name="ExplicitMethod" id="M:NDoc.Test.ExplicitInterface.ExplicitMethod" access="Public"
            contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>Explicit method test</summary>
            </documentation>
          </method>
        </interface>
        <structure name="Outer.InnerStruct" id="T:NDoc.Test.Outer.InnerStruct" access="NestedPublic">
          <documentation>
            <summary>This is a nested structure.</summary>
          </documentation>
          <base name="ValueType" id="T:System.ValueType" type="System.ValueType" />
          <method name="Finalize" id="M:NDoc.Test.Outer.InnerStruct.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Outer.InnerStruct.GetHashCode" access="Public"
            declaringType="System.ValueType" contract="Override" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Returns the hash code for this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Outer.InnerStruct.Equals(System.Object)" access="Public"
            declaringType="System.ValueType" contract="Override" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Indicates whether this instance and a specified object are equal.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Outer.InnerStruct.ToString" access="Public" declaringType="System.ValueType"
            contract="Override" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns the fully qualified type name of this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Outer.InnerStruct.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Outer.InnerStruct.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </structure>
        <structure name="Struct1" id="T:NDoc.Test.Struct1" access="Public">
          <documentation>
            <summary>This is the first struct.</summary>
          </documentation>
          <base name="ValueType" id="T:System.ValueType" type="System.ValueType" />
          <field name="Field1" id="F:NDoc.Test.Struct1.Field1" access="Public" type="System.Int32">
            <documentation>
              <summary>This is the first field in the first struct.</summary>
            </documentation>
          </field>
          <field name="Field2" id="F:NDoc.Test.Struct1.Field2" access="Public" type="System.String">
            <documentation>
              <summary>This is the second field in the first struct.</summary>
            </documentation>
          </field>
          <property name="Property" id="P:NDoc.Test.Struct1.Property" access="Public" type="System.Int32"
            contract="Normal" get="true" set="true">
            <documentation>
              <summary>A property in a struct.</summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.Struct1.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Struct1.GetHashCode" access="Public" declaringType="System.ValueType"
            contract="Override" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Returns the hash code for this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Struct1.Equals(System.Object)" access="Public" declaringType="System.ValueType"
            contract="Override" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Indicates whether this instance and a specified object are equal.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Struct1.ToString" access="Public" declaringType="System.ValueType"
            contract="Override" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns the fully qualified type name of this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="Method" id="M:NDoc.Test.Struct1.Method" access="Public" contract="Normal"
            returnType="System.Int32">
            <documentation>
              <summary>A method in a struct.</summary>
            </documentation>
          </method>
          <method name="StaticMethod" id="M:NDoc.Test.Struct1.StaticMethod" access="Public" contract="Static"
            returnType="System.Int32">
            <documentation>
              <summary>A static method in a struct.</summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Struct1.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Struct1.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </structure>
        <structure name="Struct2" id="T:NDoc.Test.Struct2" access="Public">
          <documentation>
            <summary>This is the second struct.</summary>
          </documentation>
          <base name="ValueType" id="T:System.ValueType" type="System.ValueType" />
          <method name="Finalize" id="M:NDoc.Test.Struct2.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Struct2.GetHashCode" access="Public" declaringType="System.ValueType"
            contract="Override" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Returns the hash code for this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Struct2.Equals(System.Object)" access="Public" declaringType="System.ValueType"
            contract="Override" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Indicates whether this instance and a specified object are equal.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Struct2.ToString" access="Public" declaringType="System.ValueType"
            contract="Override" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns the fully qualified type name of this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Struct2.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Struct2.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </structure>
        <delegate name="HandlerWithArgs" id="T:NDoc.Test.HandlerWithArgs" access="Public" returnType="System.Void">
          <documentation>
            <summary>This is a delegate with arguments used by Class.</summary>
          </documentation>
          <parameter name="sender" type="System.Object" />
          <parameter name="e" type="NDoc.Test.EventArgsTest" />
        </delegate>
        <delegate name="HandlerWithMoreArgs" id="T:NDoc.Test.HandlerWithMoreArgs" access="Public"
          returnType="System.Void">
          <documentation>
            <summary>This is a delegate with more arguments used by Class.</summary>
          </documentation>
          <parameter name="sender" type="System.Object" />
          <parameter name="e" type="NDoc.Test.EventArgsDerived" />
        </delegate>
        <delegate name="Handler" id="T:NDoc.Test.Handler" access="Public" returnType="System.Void">
          <documentation>
            <summary>This is a simple delegate used by Class.</summary>
          </documentation>
          <parameter name="sender" type="System.Object" />
          <parameter name="e" type="System.EventArgs" />
        </delegate>
        <delegate name="MulticastHandler" id="T:NDoc.Test.MulticastHandler" access="Public" returnType="System.Int32">
          <documentation>
            <summary>This is a multicast delegate.</summary>
          </documentation>
          <parameter name="sender" type="System.Object" />
          <parameter name="e" type="NDoc.Test.EventArgsOne" />
        </delegate>
        <delegate name="Outer.InnerDelegate" id="T:NDoc.Test.Outer.InnerDelegate" access="NestedPublic"
          returnType="System.Void">
          <documentation>
            <summary>This is a nested delegate.</summary>
          </documentation>
          <parameter name="myparam" type="System.String" />
        </delegate>
        <enumeration name="Outer.Inner.InnerInnerEnum" id="T:NDoc.Test.Outer.Inner.InnerInnerEnum" access="NestedPublic">
          <documentation>
            <summary>This is an enumeration nested in a nested class.</summary>
          </documentation>
          <field name="Foo" id="F:NDoc.Test.Outer.Inner.InnerInnerEnum.Foo" access="Public" type="NDoc.Test.Outer.Inner.InnerInnerEnum"
            contract="Static" literal="true">
            <documentation>
              <summary>Foo</summary>
            </documentation>
          </field>
        </enumeration>
        <enumeration name="Outer.InnerEnum" id="T:NDoc.Test.Outer.InnerEnum" access="NestedPublic">
          <documentation>
            <summary>This is a nested enumeration.</summary>
          </documentation>
          <field name="Foo" id="F:NDoc.Test.Outer.InnerEnum.Foo" access="Public" type="NDoc.Test.Outer.InnerEnum"
            contract="Static" literal="true">
            <documentation>
              <summary>Foo</summary>
            </documentation>
          </field>
        </enumeration>
        <enumeration name="Enum" id="T:NDoc.Test.Enum" access="Public">
          <documentation>
            <summary>This is an enumeration.</summary>
          </documentation>
          <field name="Foo" id="F:NDoc.Test.Enum.Foo" access="Public" type="NDoc.Test.Enum" contract="Static"
            literal="true">
            <documentation>
              <summary>Represents Foo.</summary>
            </documentation>
          </field>
          <field name="Bar" id="F:NDoc.Test.Enum.Bar" access="Public" type="NDoc.Test.Enum" contract="Static"
            literal="true">
            <documentation>
              <summary>Represents Bar.</summary>
            </documentation>
          </field>
          <field name="Baz" id="F:NDoc.Test.Enum.Baz" access="Public" type="NDoc.Test.Enum" contract="Static"
            literal="true">
            <documentation>
              <summary>Represents Baz.</summary>
            </documentation>
          </field>
          <field name="Quux" id="F:NDoc.Test.Enum.Quux" access="Public" type="NDoc.Test.Enum" contract="Static"
            literal="true">
            <documentation>
              <summary>Represents Quux.</summary>
            </documentation>
          </field>
        </enumeration>
        <enumeration name="fred" id="T:NDoc.Test.fred" access="Public">
          <documentation>
            <summary> this is fred </summary>
          </documentation>
          <field name="valuea" id="F:NDoc.Test.fred.valuea" access="Public" type="NDoc.Test.fred"
            contract="Static" literal="true">
            <documentation>
              <summary>aaaa</summary>
            </documentation>
          </field>
          <field name="valueb" id="F:NDoc.Test.fred.valueb" access="Public" type="NDoc.Test.fred"
            contract="Static" literal="true">
            <documentation>
              <summary>bbbb</summary>
            </documentation>
          </field>
        </enumeration>
        <enumeration name="jjj.fred" id="T:NDoc.Test.jjj.fred" access="NestedPublic">
          <documentation>
            <summary> this is fred </summary>
          </documentation>
          <field name="valuea" id="F:NDoc.Test.jjj.fred.valuea" access="Public" type="NDoc.Test.jjj.fred"
            contract="Static" literal="true">
            <documentation>
              <summary>aaaa</summary>
            </documentation>
          </field>
          <field name="valueb" id="F:NDoc.Test.jjj.fred.valueb" access="Public" type="NDoc.Test.jjj.fred"
            contract="Static" literal="true">
            <documentation>
              <summary>bbbb</summary>
            </documentation>
          </field>
        </enumeration>
      </namespace>
      <namespace name="NDoc.Test.NewStuff">
        <class name="NamespaceDoc" id="T:NDoc.Test.NewStuff.NamespaceDoc" access="Public">
          <documentation>
            <summary>
            This is another example of namespace summary documentation,
            when the UseNamespaceDocSummaries flag is set.
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.NamespaceDoc.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the NamespaceDoc class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.NamespaceDoc.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.NamespaceDoc.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.NamespaceDoc.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.NamespaceDoc.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.NamespaceDoc.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.NamespaceDoc.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="NewBase" id="T:NDoc.Test.NewStuff.NewBase" access="Public">
          <documentation>
            <summary>
            Base class used to test the new modifier. See <see cref="T:NDoc.Test.NewStuff.NewDerived" />
            for details. Members in this class are named to demonstrate syntax
            in the derived class.
            </summary>
          </documentation>
          <implements>IInterfaceA</implements>
          <implements>IInterfaceB</implements>
          <implements>IInterfaceE</implements>
          <implements>IInterfaceF</implements>
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.NewBase.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the NewBase class.</summary>
            </documentation>
          </constructor>
          <field name="NewMethodSNOKOM" id="F:NDoc.Test.NewStuff.NewBase.NewMethodSNOKOM" access="Public"
            type="System.Int32">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </field>
          <field name="NewVirtualMethodSNOKOM" id="F:NDoc.Test.NewStuff.NewBase.NewVirtualMethodSNOKOM"
            access="Public" type="System.Int32">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </field>
          <field name="NewField" id="F:NDoc.Test.NewStuff.NewBase.NewField" access="Public" type="System.Int32">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </field>
          <field name="NewConst" id="F:NDoc.Test.NewStuff.NewBase.NewConst" access="Public" type="System.Int32"
            contract="Static" literal="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </field>
          <property name="Item" id="P:NDoc.Test.NewStuff.NewBase.Item(System.Int32)" access="Public"
            type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </property>
          <property name="NewFieldSNOKOM" id="P:NDoc.Test.NewStuff.NewBase.NewFieldSNOKOM" access="Public"
            type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <property name="NewProperty" id="P:NDoc.Test.NewStuff.NewBase.NewProperty" access="Public"
            type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <property name="OverrideProperty" id="P:NDoc.Test.NewStuff.NewBase.OverrideProperty" access="Public"
            type="System.Int32" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <property name="NewVirtualProperty" id="P:NDoc.Test.NewStuff.NewBase.NewVirtualProperty" access="Public"
            type="System.Int32" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <method name="InterfaceMethodOverride" id="M:NDoc.Test.NewStuff.NewBase.InterfaceMethodOverride"
            access="Public" contract="Virtual" returnType="System.Void">
            <implements name="InterfaceMethodOverride" interface="IInterfaceF" interfaceId="T:NDoc.Test.NewStuff.IInterfaceF"
              declaringType="NDoc.Test.NewStuff.IInterfaceF" />
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
          <method name="NewInterfaceMethod" id="M:NDoc.Test.NewStuff.NewBase.NewInterfaceMethod" access="Public"
            contract="Final" returnType="System.Void">
            <implements name="NewInterfaceMethod" interface="IInterfaceE" interfaceId="T:NDoc.Test.NewStuff.IInterfaceE"
              declaringType="NDoc.Test.NewStuff.IInterfaceE" />
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
          <method name="InheritedImplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.NewBase.InheritedImplicitInterfaceMethod"
            access="Public" contract="Final" returnType="System.Void">
            <implements name="InheritedImplicitInterfaceMethod" interface="IInterfaceA" interfaceId="T:NDoc.Test.NewStuff.IInterfaceA"
              declaringType="NDoc.Test.NewStuff.IInterfaceA" />
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
          <method name="IInterfaceB.InheritedExplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.NewBase.NDoc#Test#NewStuff#IInterfaceB#InheritedExplicitInterfaceMethod"
            access="Private" interface="NDoc.Test.NewStuff.IInterfaceB" contract="Final" returnType="System.Void">
            <implements name="InheritedExplicitInterfaceMethod" interface="IInterfaceB" interfaceId="T:NDoc.Test.NewStuff.IInterfaceB"
              declaringType="NDoc.Test.NewStuff.IInterfaceB" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewBase.NewMethodWithOverload(System.Int64)"
            access="Public" contract="Virtual" overload="1" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="l" type="System.Int64" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewBase.NewMethodWithOverload(System.Double)"
            access="Public" contract="Virtual" overload="2" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="d" type="System.Double" />
          </method>
          <method name="NewVirtualMethod" id="M:NDoc.Test.NewStuff.NewBase.NewVirtualMethod(System.Int32)"
            access="Public" contract="Virtual" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="OverrideMethod" id="M:NDoc.Test.NewStuff.NewBase.OverrideMethod(System.Int32)"
            access="Public" contract="Virtual" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.NewBase.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.NewBase.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.NewBase.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.NewBase.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="NewPropertySNOKOM" id="M:NDoc.Test.NewStuff.NewBase.NewPropertySNOKOM(System.Int32)"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewVirtualPropertySNOKOM" id="M:NDoc.Test.NewStuff.NewBase.NewVirtualPropertySNOKOM(System.Int32)"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewMethod" id="M:NDoc.Test.NewStuff.NewBase.NewMethod(System.Int32)" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewBase.NewMethodWithOverload(System.Int32)"
            access="Public" contract="Normal" overload="3" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewBase.NewMethodWithOverload(System.Int16)"
            access="Public" contract="Normal" overload="4" returnType="System.Void">
            <documentation>
              <summary>
            public void NewMethodWithOverload(short h)
            </summary>
              <param name="h"></param>
            </documentation>
            <parameter name="h" type="System.Int16" />
          </method>
          <method name="NewStaticMethod" id="M:NDoc.Test.NewStuff.NewBase.NewStaticMethod(System.Int32)"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.NewBase.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.NewBase.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="NewBase.NewClass" id="T:NDoc.Test.NewStuff.NewBase.NewClass" access="NestedPublic">
          <documentation>
            <summary>no comment</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.NewBase.NewClass.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the NewClass class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.NewBase.NewClass.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.NewBase.NewClass.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.NewBase.NewClass.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.NewBase.NewClass.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.NewBase.NewClass.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.NewBase.NewClass.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="NewDerived" id="T:NDoc.Test.NewStuff.NewDerived" access="Public" baseType="NewBase">
          <documentation>
            <summary>
            This class provides new implementations for the base class members.
            </summary>
          </documentation>
          <base name="NewBase" id="T:NDoc.Test.NewStuff.NewBase" type="NDoc.Test.NewStuff.NewBase" />
          <implements inherited="true">IInterfaceA</implements>
          <implements inherited="true">IInterfaceB</implements>
          <implements inherited="true">IInterfaceE</implements>
          <implements inherited="true">IInterfaceF</implements>
          <implements>IInterfaceC</implements>
          <implements>IInterfaceD</implements>
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.NewDerived.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the NewDerived class.</summary>
            </documentation>
          </constructor>
          <field name="Field" id="F:NDoc.Test.NewStuff.NewDerived.Field" access="Public" type="System.Int32">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </field>
          <field name="NewField" id="F:NDoc.Test.NewStuff.NewDerived.NewField" access="Public" type="System.Int32"
            hiding="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </field>
          <field name="NewFieldSNOKOM" id="F:NDoc.Test.NewStuff.NewDerived.NewFieldSNOKOM" access="Public"
            type="System.Int32" hiding="true">
            <documentation>
              <summary>
            "Same Name Other Kind Of Member"
            </summary>
            </documentation>
          </field>
          <field name="Const" id="F:NDoc.Test.NewStuff.NewDerived.Const" access="Public" type="System.Int32"
            contract="Static" literal="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </field>
          <field name="NewConst" id="F:NDoc.Test.NewStuff.NewDerived.NewConst" access="Public" type="System.Int32"
            hiding="true" contract="Static" literal="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </field>
          <property name="Item" id="P:NDoc.Test.NewStuff.NewDerived.Item(System.Int32)" access="Public"
            hiding="true" type="System.Int32" contract="Normal" get="true" set="true" overload="1">
            <documentation>
              <summary>This indexer is new</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </property>
          <property name="Item" id="P:NDoc.Test.NewStuff.NewDerived.Item(System.String)" access="Public"
            type="System.Int32" contract="Normal" get="true" set="true" overload="2">
            <documentation>
              <summary>This indexer is an overload</summary>
            </documentation>
            <parameter name="n" type="System.String" />
          </property>
          <property name="Property" id="P:NDoc.Test.NewStuff.NewDerived.Property" access="Public" type="System.Int32"
            contract="Normal" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <property name="NewProperty" id="P:NDoc.Test.NewStuff.NewDerived.NewProperty" access="Public"
            hiding="true" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <property name="VirtualProperty" id="P:NDoc.Test.NewStuff.NewDerived.VirtualProperty" access="Public"
            type="System.Int32" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <property name="OverrideProperty" id="P:NDoc.Test.NewStuff.NewDerived.OverrideProperty" access="Public"
            type="System.Int32" contract="Override" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <property name="NewVirtualProperty" id="P:NDoc.Test.NewStuff.NewDerived.NewVirtualProperty"
            access="Public" hiding="true" type="System.Int32" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </property>
          <property name="NewPropertySNOKOM" id="P:NDoc.Test.NewStuff.NewDerived.NewPropertySNOKOM"
            access="Public" hiding="true" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            "Same Name Other Kind Of Member"
            </summary>
            </documentation>
          </property>
          <property name="NewVirtualPropertySNOKOM" id="P:NDoc.Test.NewStuff.NewDerived.NewVirtualPropertySNOKOM"
            access="Public" hiding="true" type="System.Int32" contract="Virtual" get="true" set="true">
            <documentation>
              <summary>
            "Same Name Other Kind Of Member"
            </summary>
            </documentation>
          </property>
          <method name="ImplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.NewDerived.ImplicitInterfaceMethod"
            access="Public" contract="Final" returnType="System.Void">
            <implements name="ImplicitInterfaceMethod" interface="IInterfaceC" interfaceId="T:NDoc.Test.NewStuff.IInterfaceC"
              declaringType="NDoc.Test.NewStuff.IInterfaceC" />
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
          <method name="IInterfaceD.ExplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.NewDerived.NDoc#Test#NewStuff#IInterfaceD#ExplicitInterfaceMethod"
            access="Private" interface="NDoc.Test.NewStuff.IInterfaceD" contract="Final" returnType="System.Void">
            <implements name="ExplicitInterfaceMethod" interface="IInterfaceD" interfaceId="T:NDoc.Test.NewStuff.IInterfaceD"
              declaringType="NDoc.Test.NewStuff.IInterfaceD" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewDerived.NewMethodWithOverload(System.Int64)"
            access="Public" hiding="true" contract="Virtual" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            new public virtual void NewMethodWithOverload(long l)
            </summary>
              <param name="l"></param>
            </documentation>
            <parameter name="l" type="System.Int64" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewDerived.NewMethodWithOverload(System.Object)"
            access="Public" contract="Virtual" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            public virtual void NewMethodWithOverload(object o)
            </summary>
              <param name="o"></param>
            </documentation>
            <parameter name="o" type="System.Object" />
          </method>
          <method name="NewVirtualMethodSNOKOM" id="M:NDoc.Test.NewStuff.NewDerived.NewVirtualMethodSNOKOM(System.Int32)"
            access="Public" hiding="true" contract="Virtual" returnType="System.Void">
            <documentation>
              <summary>
            "Same Name Other Kind Of Member"
            </summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewVirtualMethod" id="M:NDoc.Test.NewStuff.NewDerived.NewVirtualMethod(System.Int32)"
            access="Public" hiding="true" contract="Virtual" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="VirtualMethod" id="M:NDoc.Test.NewStuff.NewDerived.VirtualMethod(System.Int32)"
            access="Public" contract="Virtual" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="InterfaceMethodOverride" id="M:NDoc.Test.NewStuff.NewDerived.InterfaceMethodOverride"
            access="Public" contract="Override" returnType="System.Void">
            <implements name="InterfaceMethodOverride" interface="IInterfaceF" interfaceId="T:NDoc.Test.NewStuff.IInterfaceF"
              declaringType="NDoc.Test.NewStuff.IInterfaceF" />
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
          <method name="InheritedImplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.NewDerived.InheritedImplicitInterfaceMethod"
            access="Public" declaringType="NDoc.Test.NewStuff.NewBase" contract="Final" returnType="System.Void">
            <implements name="InheritedImplicitInterfaceMethod" interface="IInterfaceA" interfaceId="T:NDoc.Test.NewStuff.IInterfaceA"
              declaringType="NDoc.Test.NewStuff.IInterfaceA" />
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
          <method name="IInterfaceB.InheritedExplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.NewDerived.NDoc#Test#NewStuff#IInterfaceB#InheritedExplicitInterfaceMethod"
            access="Private" interface="NDoc.Test.NewStuff.IInterfaceB" declaringType="NDoc.Test.NewStuff.NewBase"
            contract="Final" returnType="System.Void">
            <implements name="InheritedExplicitInterfaceMethod" interface="IInterfaceB" interfaceId="T:NDoc.Test.NewStuff.IInterfaceB"
              declaringType="NDoc.Test.NewStuff.IInterfaceB" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewDerived.NewMethodWithOverload(System.Double)"
            access="Public" contract="Override" overload="3" returnType="System.Void">
            <documentation>
              <summary>
            public override void NewMethodWithOverload(double d)
            </summary>
              <param name="d"></param>
            </documentation>
            <parameter name="d" type="System.Double" />
          </method>
          <method name="OverrideMethod" id="M:NDoc.Test.NewStuff.NewDerived.OverrideMethod(System.Int32)"
            access="Public" contract="Override" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.NewDerived.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.NewDerived.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.NewDerived.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.NewDerived.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Method" id="M:NDoc.Test.NewStuff.NewDerived.Method(System.Int32)" access="Public"
            contract="Normal" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewMethod" id="M:NDoc.Test.NewStuff.NewDerived.NewMethod(System.Int32)" access="Public"
            hiding="true" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewMethodSNOKOM" id="M:NDoc.Test.NewStuff.NewDerived.NewMethodSNOKOM(System.Int32)"
            access="Public" hiding="true" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            "Same Name Other Kind Of Member"
            </summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewDerived.NewMethodWithOverload(System.String)"
            access="Public" contract="Normal" overload="4" returnType="System.Void">
            <documentation>
              <summary>
            public void NewMethodWithOverload(string s)
            </summary>
              <param name="s"></param>
            </documentation>
            <parameter name="s" type="System.String" />
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewDerived.NewMethodWithOverload(System.Int32)"
            access="Public" hiding="true" contract="Normal" overload="5" returnType="System.Void">
            <documentation>
              <summary>
            new public void NewMethodWithOverload(int n)
            </summary>
              <param name="n"></param>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewStaticMethod" id="M:NDoc.Test.NewStuff.NewDerived.NewStaticMethod(System.Int32)"
            access="Public" hiding="true" contract="Static" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
            <parameter name="n" type="System.Int32" />
          </method>
          <method name="NewInterfaceMethod" id="M:NDoc.Test.NewStuff.NewDerived.NewInterfaceMethod"
            access="Public" hiding="true" contract="Normal" returnType="System.Void">
            <implements name="NewInterfaceMethod" interface="IInterfaceE" interfaceId="T:NDoc.Test.NewStuff.IInterfaceE"
              declaringType="NDoc.Test.NewStuff.IInterfaceE" />
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
          <method name="NewMethodWithOverload" id="M:NDoc.Test.NewStuff.NewDerived.NewMethodWithOverload(System.Int16)"
            access="Public" declaringType="NDoc.Test.NewStuff.NewBase" contract="Normal" overload="6"
            returnType="System.Void">
            <documentation>
              <summary>
            public void NewMethodWithOverload(short h)
            </summary>
            </documentation>
            <parameter name="h" type="System.Int16" />
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.NewDerived.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.NewDerived.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="NewDerived.NewClass" id="T:NDoc.Test.NewStuff.NewDerived.NewClass" access="NestedPublic"
          hiding="true">
          <documentation>
            <summary>no comment</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.NewDerived.NewClass.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the NewClass class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.NewDerived.NewClass.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.NewDerived.NewClass.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.NewDerived.NewClass.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.NewDerived.NewClass.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.NewDerived.NewClass.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.NewDerived.NewClass.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Base" id="T:NDoc.Test.NewStuff.Base" access="Public">
          <documentation>
            <summary>
            Do you see F?
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.Base.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Base class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.Base.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.Base.GetHashCode" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.Base.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.Base.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="F" id="M:NDoc.Test.NewStuff.Base.F" access="Public" contract="Static" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.Base.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.Base.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Derived" id="T:NDoc.Test.NewStuff.Derived" access="Public" baseType="Base">
          <documentation>
            <summary>
            Now F is gone (private)!
            </summary>
          </documentation>
          <base name="Base" id="T:NDoc.Test.NewStuff.Base" type="NDoc.Test.NewStuff.Base" />
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.Derived.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Derived class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.Derived.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.Derived.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.Derived.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.Derived.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.Derived.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.Derived.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="MoreDerived" id="T:NDoc.Test.NewStuff.MoreDerived" access="Public" baseType="Derived">
          <documentation>
            <summary>
            Where is F?
            </summary>
          </documentation>
          <base name="Derived" id="T:NDoc.Test.NewStuff.Derived" type="NDoc.Test.NewStuff.Derived">
            <base name="Base" id="T:NDoc.Test.NewStuff.Base" type="NDoc.Test.NewStuff.Base" />
          </base>
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.MoreDerived.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the MoreDerived class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.MoreDerived.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.MoreDerived.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.MoreDerived.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.MoreDerived.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.MoreDerived.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.MoreDerived.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="SomeClass" id="T:NDoc.Test.NewStuff.SomeClass" access="Public">
          <documentation>
            <summary>
            Uses MoreDerived.F (actually Base.F)
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.NewStuff.SomeClass.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the SomeClass class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.NewStuff.SomeClass.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.NewStuff.SomeClass.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.NewStuff.SomeClass.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.NewStuff.SomeClass.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.NewStuff.SomeClass.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.NewStuff.SomeClass.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <interface name="IInterfaceA" id="T:NDoc.Test.NewStuff.IInterfaceA" access="Public">
          <documentation>
            <summary>no comment</summary>
          </documentation>
          <method name="InheritedImplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.IInterfaceA.InheritedImplicitInterfaceMethod"
            access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
        </interface>
        <interface name="IInterfaceB" id="T:NDoc.Test.NewStuff.IInterfaceB" access="Public">
          <documentation>
            <summary>no comment</summary>
          </documentation>
          <method name="InheritedExplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.IInterfaceB.InheritedExplicitInterfaceMethod"
            access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
        </interface>
        <interface name="IInterfaceC" id="T:NDoc.Test.NewStuff.IInterfaceC" access="Public">
          <documentation>
            <summary>no comment</summary>
          </documentation>
          <method name="ImplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.IInterfaceC.ImplicitInterfaceMethod"
            access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
        </interface>
        <interface name="IInterfaceD" id="T:NDoc.Test.NewStuff.IInterfaceD" access="Public">
          <documentation>
            <summary>no comment</summary>
          </documentation>
          <method name="ExplicitInterfaceMethod" id="M:NDoc.Test.NewStuff.IInterfaceD.ExplicitInterfaceMethod"
            access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
        </interface>
        <interface name="IInterfaceE" id="T:NDoc.Test.NewStuff.IInterfaceE" access="Public">
          <documentation>
            <summary>no comment</summary>
          </documentation>
          <method name="NewInterfaceMethod" id="M:NDoc.Test.NewStuff.IInterfaceE.NewInterfaceMethod"
            access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
        </interface>
        <interface name="IInterfaceF" id="T:NDoc.Test.NewStuff.IInterfaceF" access="Public">
          <documentation>
            <summary>no comment</summary>
          </documentation>
          <method name="InterfaceMethodOverride" id="M:NDoc.Test.NewStuff.IInterfaceF.InterfaceMethodOverride"
            access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>no comment</summary>
            </documentation>
          </method>
        </interface>
      </namespace>
      <namespace name="NDoc.Test.EditorBrowsableAttr">
        <class name="NotBrowsableClass" id="T:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass"
          access="Public">
          <documentation>
            <summary>This class is marked with EditorBrowsableState.Never.</summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the NotBrowsableClass class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass.Finalize"
            access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass.GetHashCode"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass.ToString"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="NotBrowsableClassMethod" id="M:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass.NotBrowsableClassMethod"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method is defined in NotBrowsableClass.</summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="BrowsableNotBrowsableClass" id="T:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass"
          access="Public" baseType="NotBrowsableClass">
          <documentation>
            <summary>This class is marked with EditorBrowsableState.Always,
            but inherits from a class with EditorBrowsableState.Never.</summary>
            <remarks>
              <para>Links to NotBrowsableClass and its members should be disabled,
            including in the namespace hierarchy.</para>
              <para>Note that this illustrates a very bad usage of the 
            EditorBrowsable attribute.</para>
            </remarks>
          </documentation>
          <base name="NotBrowsableClass" id="T:NDoc.Test.EditorBrowsableAttr.NotBrowsableClass"
            type="NDoc.Test.EditorBrowsableAttr.NotBrowsableClass" />
          <constructor name=".ctor" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.#ctor"
            access="Public">
            <documentation>
              <summary>Initializes a new instance of the BrowsableNotBrowsableClass class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.Finalize"
            access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.GetHashCode"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.ToString"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="BrowsableNotBrowsableClassMethod" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.BrowsableNotBrowsableClassMethod"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This method is defined in BrowsableNotBrowsableClass.</summary>
            </documentation>
          </method>
          <method name="NotBrowsableClassMethod" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.NotBrowsableClassMethod"
            access="Public" declaringType="NDoc.Test.EditorBrowsableAttr.NotBrowsableClass" contract="Normal"
            returnType="System.Void">
            <documentation>
              <summary>This method is defined in NotBrowsableClass.</summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.GetType"
            access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableNotBrowsableClass.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="BrowsableClass" id="T:NDoc.Test.EditorBrowsableAttr.BrowsableClass" access="Public">
          <documentation>
            <summary>This class is marked with EditorBrowsableState.Always. </summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.#ctor" access="Public"
            overload="1">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Always.</summary>
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.#ctor(System.Int32)"
            access="Public" overload="2">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Advanced.</summary>
            </documentation>
            <parameter name="advanced" type="System.Int32" />
          </constructor>
          <constructor name=".ctor" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.#ctor(System.Boolean)"
            access="Public" overload="3">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Never.</summary>
            </documentation>
            <parameter name="never" type="System.Boolean" />
          </constructor>
          <field name="AlwaysField" id="F:NDoc.Test.EditorBrowsableAttr.BrowsableClass.AlwaysField"
            access="Public" type="System.Int32">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Always.</summary>
            </documentation>
          </field>
          <field name="AdvancedField" id="F:NDoc.Test.EditorBrowsableAttr.BrowsableClass.AdvancedField"
            access="Public" type="System.Int32">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Advanced.</summary>
            </documentation>
          </field>
          <field name="NeverField" id="F:NDoc.Test.EditorBrowsableAttr.BrowsableClass.NeverField"
            access="Public" type="System.Int32">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Never.</summary>
            </documentation>
          </field>
          <property name="AlwaysProperty" id="P:NDoc.Test.EditorBrowsableAttr.BrowsableClass.AlwaysProperty"
            access="Public" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Always.</summary>
            </documentation>
          </property>
          <property name="AdvancedProperty" id="P:NDoc.Test.EditorBrowsableAttr.BrowsableClass.AdvancedProperty"
            access="Public" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Advanced.</summary>
            </documentation>
          </property>
          <property name="NeverProperty" id="P:NDoc.Test.EditorBrowsableAttr.BrowsableClass.NeverProperty"
            access="Public" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Never.</summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.GetHashCode"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.Equals(System.Object)"
            access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="AlwaysMethod" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.AlwaysMethod"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Always.</summary>
            </documentation>
          </method>
          <method name="AdvancedMethod" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.AdvancedMethod"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Advanced.</summary>
            </documentation>
          </method>
          <method name="NeverMethod" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.NeverMethod"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Never.</summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <operator name="op_Increment" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.op_Increment(NDoc.Test.EditorBrowsableAttr.BrowsableClass)"
            access="Public" contract="Static" returnType="NDoc.Test.EditorBrowsableAttr.BrowsableClass">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Always.</summary>
            </documentation>
            <parameter name="a" type="NDoc.Test.EditorBrowsableAttr.BrowsableClass" />
          </operator>
          <operator name="op_OnesComplement" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.op_OnesComplement(NDoc.Test.EditorBrowsableAttr.BrowsableClass)"
            access="Public" contract="Static" returnType="NDoc.Test.EditorBrowsableAttr.BrowsableClass">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Advanced.</summary>
            </documentation>
            <parameter name="a" type="NDoc.Test.EditorBrowsableAttr.BrowsableClass" />
          </operator>
          <operator name="op_Decrement" id="M:NDoc.Test.EditorBrowsableAttr.BrowsableClass.op_Decrement(NDoc.Test.EditorBrowsableAttr.BrowsableClass)"
            access="Public" contract="Static" returnType="NDoc.Test.EditorBrowsableAttr.BrowsableClass">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Never.</summary>
            </documentation>
            <parameter name="a" type="NDoc.Test.EditorBrowsableAttr.BrowsableClass" />
          </operator>
          <event name="AlwaysEvent" id="E:NDoc.Test.EditorBrowsableAttr.BrowsableClass.AlwaysEvent"
            access="Public" contract="Normal" type="NDoc.Test.EditorBrowsableAttr.BrowsableHandler"
            multicast="true">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Always.</summary>
            </documentation>
          </event>
          <event name="AdvancedEvent" id="E:NDoc.Test.EditorBrowsableAttr.BrowsableClass.AdvancedEvent"
            access="Public" contract="Normal" type="NDoc.Test.EditorBrowsableAttr.BrowsableHandler"
            multicast="true">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Advanced.</summary>
            </documentation>
          </event>
          <event name="NeverEvent" id="E:NDoc.Test.EditorBrowsableAttr.BrowsableClass.NeverEvent"
            access="Public" contract="Normal" type="NDoc.Test.EditorBrowsableAttr.BrowsableHandler"
            multicast="true">
            <documentation>
              <summary>This member is marked as EditorBrowsableState.Never.</summary>
            </documentation>
          </event>
        </class>
        <delegate name="BrowsableHandler" id="T:NDoc.Test.EditorBrowsableAttr.BrowsableHandler" access="Public"
          returnType="System.Void">
          <documentation>
            <summary>This delegate is marked with EditorBrowsableState.Advanced</summary>
          </documentation>
          <parameter name="sender" type="System.Object" />
          <parameter name="e" type="System.EventArgs" />
        </delegate>
      </namespace>
      <namespace name="NDoc.Test.Attributes">
        <class name="IsTestedAttribute" id="T:NDoc.Test.Attributes.IsTestedAttribute" access="Public"
          baseType="Attribute">
          <documentation>
            <summary>
            "IsTested" custom attribute class
            </summary>
          </documentation>
          <base name="Attribute" id="T:System.Attribute" type="System.Attribute" />
          <constructor name=".ctor" id="M:NDoc.Test.Attributes.IsTestedAttribute.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the IsTestedAttribute class.</summary>
            </documentation>
          </constructor>
          <property name="TypeId" id="P:NDoc.Test.Attributes.IsTestedAttribute.TypeId" access="Public"
            declaringType="System.Attribute" type="System.Object" contract="Virtual" get="true" set="false">
            <documentation>
              <summary>
                <para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute" />.</para>
              </summary>
            </documentation>
          </property>
          <method name="IsDefaultAttribute" id="M:NDoc.Test.Attributes.IsTestedAttribute.IsDefaultAttribute"
            access="Public" declaringType="System.Attribute" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para> When overridden in a derived class, returns an indication
      whether the value of this instance is
      the
      default value for the derived class.
      </para>
              </summary>
            </documentation>
          </method>
          <method name="Match" id="M:NDoc.Test.Attributes.IsTestedAttribute.Match(System.Object)"
            access="Public" declaringType="System.Attribute" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para> When overridden in a
      derived class, returns a value indicating whether this instance equals a specified object.
      </para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="Finalize" id="M:NDoc.Test.Attributes.IsTestedAttribute.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Attributes.IsTestedAttribute.GetHashCode" access="Public"
            declaringType="System.Attribute" contract="Override" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Returns the hash code for this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Attributes.IsTestedAttribute.Equals(System.Object)"
            access="Public" declaringType="System.Attribute" contract="Override" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Attributes.IsTestedAttribute.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Attributes.IsTestedAttribute.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Attributes.IsTestedAttribute.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="AuthorAttribute" id="T:NDoc.Test.Attributes.AuthorAttribute" access="Public"
          baseType="Attribute">
          <documentation>
            <summary>
            "Author" custom attribute class
            </summary>
          </documentation>
          <base name="Attribute" id="T:System.Attribute" type="System.Attribute" />
          <constructor name=".ctor" id="M:NDoc.Test.Attributes.AuthorAttribute.#ctor(System.String)" access="Public">
            <documentation>
              <summary>
            Constructor
            </summary>
              <param name="name"></param>
            </documentation>
            <parameter name="name" type="System.String" />
          </constructor>
          <property name="Name" id="P:NDoc.Test.Attributes.AuthorAttribute.Name" access="Public" type="System.String"
            contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            Name property of the Author attribute
            </summary>
            </documentation>
          </property>
          <property name="Version" id="P:NDoc.Test.Attributes.AuthorAttribute.Version" access="Public"
            type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            "IsTested" Attribute applied onto a property.
            </summary>
            </documentation>
          </property>
          <property name="TypeId" id="P:NDoc.Test.Attributes.AuthorAttribute.TypeId" access="Public"
            declaringType="System.Attribute" type="System.Object" contract="Virtual" get="true" set="false">
            <documentation>
              <summary>
                <para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute" />.</para>
              </summary>
            </documentation>
          </property>
          <method name="IsDefaultAttribute" id="M:NDoc.Test.Attributes.AuthorAttribute.IsDefaultAttribute"
            access="Public" declaringType="System.Attribute" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para> When overridden in a derived class, returns an indication
      whether the value of this instance is
      the
      default value for the derived class.
      </para>
              </summary>
            </documentation>
          </method>
          <method name="Match" id="M:NDoc.Test.Attributes.AuthorAttribute.Match(System.Object)" access="Public"
            declaringType="System.Attribute" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para> When overridden in a
      derived class, returns a value indicating whether this instance equals a specified object.
      </para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="Finalize" id="M:NDoc.Test.Attributes.AuthorAttribute.Finalize" access="Family"
            declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Attributes.AuthorAttribute.GetHashCode" access="Public"
            declaringType="System.Attribute" contract="Override" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Returns the hash code for this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Attributes.AuthorAttribute.Equals(System.Object)"
            access="Public" declaringType="System.Attribute" contract="Override" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Attributes.AuthorAttribute.ToString" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Attributes.AuthorAttribute.GetType" access="Public"
            declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Attributes.AuthorAttribute.MemberwiseClone"
            access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Account" id="T:NDoc.Test.Attributes.Account" access="Public">
          <documentation>
            <summary>
            Class with the "Author" attribute
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:NDoc.Test.Attributes.Account.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Account class.</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:NDoc.Test.Attributes.Account.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Attributes.Account.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Attributes.Account.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Attributes.Account.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="AddOrder" id="M:NDoc.Test.Attributes.Account.AddOrder(NDoc.Test.Attributes.Order)"
            access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Method with the "IsTested" attribute
            </summary>
            </documentation>
            <parameter name="orderToAdd" type="NDoc.Test.Attributes.Order" />
          </method>
          <method name="GetType" id="M:NDoc.Test.Attributes.Account.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Attributes.Account.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Order" id="T:NDoc.Test.Attributes.Order" access="Public">
          <documentation>
            <summary>
            Class with 3 attributes:  Author(name="Jane Programmer", Version=2), IsTested and XmlType.
            </summary>
            <remarks>This class has the [Serializable] attribute.</remarks>
          </documentation>
          <attribute name="System.SerializableAttribute" />
          <constructor name=".ctor" id="M:NDoc.Test.Attributes.Order.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Order class.</summary>
            </documentation>
          </constructor>
          <field name="Number" id="F:NDoc.Test.Attributes.Order.Number" access="Public" type="System.Int32">
            <documentation>
              <summary>
            Field with XmlElement attribute.
            </summary>
            </documentation>
          </field>
          <field name="What" id="F:NDoc.Test.Attributes.Order.What" access="Public" type="System.String">
            <documentation>
              <summary>
            Another field with XmlElement attribute.
            </summary>
            </documentation>
          </field>
          <field name="dummy" id="F:NDoc.Test.Attributes.Order.dummy" access="Public" type="System.Boolean">
            <documentation>
              <summary>
            This field has the [NonSerialized] attribute.
            </summary>
            </documentation>
            <attribute name="System.NonSerializedAttribute" />
          </field>
          <method name="Finalize" id="M:NDoc.Test.Attributes.Order.Finalize" access="Family" declaringType="System.Object"
            contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:NDoc.Test.Attributes.Order.GetHashCode" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:NDoc.Test.Attributes.Order.Equals(System.Object)" access="Public"
            declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:NDoc.Test.Attributes.Order.ToString" access="Public" declaringType="System.Object"
            contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:NDoc.Test.Attributes.Order.GetType" access="Public" declaringType="System.Object"
            contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:NDoc.Test.Attributes.Order.MemberwiseClone" access="Family"
            declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
      </namespace>
    </module>
  </assembly>
</ndoc>