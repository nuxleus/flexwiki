<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAnt.Contrib.Tasks</name>
    </assembly>
    <members>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.LabelTask">
            <summary>
            Allows creation of view labels in StarTeam repositories.
            </summary>
            <remarks>
            <para>Often when building projects you wish to label the source control repository.</para>
            <para>By default this task creates view labels with the build option turned on.</para>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stlabel </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Creates a label in a StarTeam repository.</para>
              <code><![CDATA[
            	<!-- 
            	constructs a 'url' containing connection information to pass to the task 
            	alternatively you can set each attribute manually 
            	-->
            	<property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname"/>
            	<stlabel label="3.1 (label title goes here)" description="This is a label description" url="${ST.url}"/>	
              ]]></code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamTask">
            <summary>
            Base star team task.
            </summary>
            <remarks>
            <para> 
            Common super class for all StarTeam tasks. At this level of the hierarchy we are concerned only with obtaining a
            connection to the StarTeam server.  The subclass <see cref="T:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask"/>, abstracts tree-walking 
            behavior common to many subtasks.
            </para>
            <para>This class ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html </para>
            <para>You need to have the StarTeam SDK installed for StarTeam tasks to function correctly.</para>
            </remarks>
            <seealso cref="T:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask"/>
            <author> <a href="mailto:jcyip@thoughtworks.com">Jason Yip</a></author>
            <author> <a href="mailto:stevec@ignitesports.com">Steve Cohen</a></author>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._username">
            <value> The username of the connection</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._password">
            <value> The username of the connection</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._servername">
            <value> name of Starteam server to connect to</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._serverport">
            <value> port of Starteam server to connect to</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._projectname">
            <value> name of Starteam project to connect to</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._viewname">
            <value> name of Starteam view to connect to</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._server">
            <value>The starteam server through which all activities will be done.</value>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.createSnapshotView(StarTeam.StView)">
            <summary>
            Derived classes must override this method to instantiate a view configured appropriately to its task.
            </summary>
            <param name="rawview">the unconfigured <code>View</code></param>
            <returns>the view appropriately configured.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.openView">
            <summary>
            All tasks will call on this method to connect to StarTeam and open the view for processing.  
            </summary>
            <returns>the a view to be used for processing.</returns>
            <seealso cref="M:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.createSnapshotView(StarTeam.StView)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.getUserName(System.Int32)">
            <summary> Returns the name of the user or a blank string if the user is not found.</summary>
            <param name="userID">a user's ID</param>
            <returns>the name of the user</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.servername">
            <summary>
            Name of StarTeamServer.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.serverport">
            <summary>
            Port number of the StarTeam connection.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.projectname">
            <summary>
            The name of the StarTeam project to be acted on
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.viewname">
            <summary>
            The name of the StarTeam view to be acted on.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.username">
            <summary>
            The StarTeam user name used for login.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.password">
            <summary> 
            The password used for login.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url">
            <summary> 
            One stop to set all parameters needed to connect to a StarTeam server.
            </summary>
            <remarks>
            <para>If you do not wish to specify a url you can set each parameter individually. 
            You must set all connection parameters for the task to be able to connect to the StarTeam server.</para>
            </remarks>
            <example>
            <para>Here is how to configure the url string.</para>
            <code>servername:portnum/project/view</code>
            <para>You can optionally specify a username and password.</para>
            <code>username:password@servername:portnum/project/view</code>
            </example>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.servername"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.serverport"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.projectname"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.viewname"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.username"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.password"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._labelName">
            <summary> The name of the label to be set in Starteam.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._description">
            <summary> The label description to be set in Starteam.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._isBuildLabel">
            <summary> Is the label being created a build label.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._labelAsOfDate">
            <summary> If set the datetime to set the label as of.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._isAsOfDateSet">
            <summary> Kludgy flag to keep track if date has been set. 
            Please kill this if you can. Here based on experiences I have had with VB.NET</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._isRevision">
            <summary> Does user wish to make a revision label?</summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.LabelTask.createSnapshotView(StarTeam.StView)">
            <summary> 
            Override of base-class abstract function creates an appropriately configured view.  
            For labels this a view configured as of this.lastBuild.
            </summary>
            <param name="raw">the unconfigured <code>View</code></param>
            <returns>the snapshot <code>View</code> appropriately configured.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.Label">
            <summary> 
            The name to be given to the label; required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.BuildLabel">
            <summary> Should label be marked build : default is true</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.RevisionLabel">
            <summary> 
            Should label created be a revision label : default is false
            </summary>
            <remarks>
            <see cref="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.BuildLabel"/> has no effect if this is set <c>true</c> as revision labels cannot have a build status.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.Description">
            <summary> Optional description of the label to be stored in the StarTeam project.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.LastBuild">
            <summary> 
            Optional: If this property is set the label will be created as of the datetime specified. 
            Please provide a datetime format that can be parsed via <see cref="M:System.DateTime.Parse(System.String)"/>.
            </summary>
            <remarks>
            This property is ignored when <see cref="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.RevisionLabel"/> set to <c>true</c>. 
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel">
            <summary>
            Task for supporting labeling of repositories with incremented version 
            numbers. The version number calculated will be concatenated to the 
            <see cref="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.Label"/>.
            </summary>
            <remarks>
            <para>
            Instruments root of repository with <c>versionnumber.xml</c> file.
            </para>
            <para>
            If this file is not present, it is created and checked into StarTeam. 
            The default version number is 1.0.0. By default the build number is 
            incremented. Properties are present to allow setting and incrementing 
            of major, minor, and build versions.
            </para>
            <para>
            When label is created, properties are set to expose version information 
            and the new label :
            </para>
            <list type="bullet">
                <item>
                    <description>label</description>
                </item>
                <item>
                    <description>Version.text</description>
                </item>
                <item>
                    <description>Version.major</description>
                </item>
                <item>
                    <description>Version.minor</description>
                </item>
                <item>
                    <description>Version.build</description>
                </item>
            </list>
            <note>
            Incrementing or setting major or minor versions does NOT reset the 
            build version.
            </note>
            </remarks>
            <example>
              <para>Increment the build version.</para>
              <code>
                <![CDATA[
            <stautolabel url="${ST.url}" />
                ]]>
              </code>
            </example>
            <example>
              <para>Set the major version.</para>
              <code>
                <![CDATA[
            <stautolabel majorversion="2" url="${ST.url}" />
                ]]>
              </code>
            </example>
            <example>
              <para>Increment the minor version.</para>
              <code>
                <![CDATA[
            <stautolabel incrementminor="true" url="${ST.url}" />
                ]]>
              </code>
            </example>
            <example>
              <para>Example <c>versionnumber.xml</c> file.</para>
              <code>
                <![CDATA[
            <?xml version="1.0"?>
            <stautolabel>
            	<version major="1" minor="0" build="0" />
            </stautolabel>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.ExecuteTask">
            <summary>
            Looks for versionnumber.xml at root of repository. 
            Updates the xml in this file to correspond with properties set by user and checks in changes. 
            A label is then created based on properties set. 
            </summary>
            <remarks>
            Default behavior is to <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementBuild"/> number. 
            If user sets <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MajorVersion"/>, <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MinorVersion"/>, or <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.BuildVersion"/> no incrementing is done 
            and the exact version set and/or read from versionnumber.xml is used.
            <para>The title of the Label is the <see cref="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.Label"/> property concatenated with the version number Major.Minor.Build</para>
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.getVersionStFile(StarTeam.StView)">
            <summary>
            Locate the <c>versionnumber.xml</c> file in the repository. If it 
            is not present, the file is created. The file is checked out 
            exclusively for editing.
            </summary>
            <param name="snapshot">StarTeam view we are working with.</param>
            <returns>
            StarTeam file handle containing version xml.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.createVersionStFile(StarTeam.StFolder)">
            <summary>
            Creates the versionumber.xml file in the repository.
            </summary>
            <param name="stFolder">StarTeam folder desired to put the versionnumber.xml files into</param>
            <returns>StarTeam File handle to the created file.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.VersionFile">
            <summary> 
            Allows user to specify the filename where the version xml is stored. 
            The default is <c>versionnumber.xml</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementMajor">
            <summary> 
            Increment major version number. The default is <see langword="false"/>.
            If <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MajorVersion"/> is set, this property is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementMinor">
            <summary> 
            Increment minor version number. The default is <see langword="false"/>. 
            If <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MinorVersion"/> is set, this property is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementBuild">
            <summary> 
            Increment build version number. The default is <see langword="true"/>.
            If <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.BuildVersion"/> is set, this property is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MajorVersion">
            <summary> 
            Major version number used for label.  If this value is set, 
            <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementMajor"/> is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MinorVersion">
            <summary> 
            Minor version number used for label. If this value is set, 
            <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementMinor"/> is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.BuildVersion">
            <summary> 
            Build version number used for label. 
            If this value is set. <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementBuild"/> is ignored.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin">
            <summary>
            Task to check in files to StarTeam repositories. 
            </summary>
            <remarks>
            <para>You add files to the repository that are not controlled by setting <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.adduncontrolled"/>.</para>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stcheckin </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Recursively checks in all files in the project.</para>
              <code><![CDATA[
            	<!-- 
            	constructs a 'url' containing connection information to pass to the task 
            	alternatively you can set each attribute manually 
            	-->
            	<property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname"/>
            	<stcheckin forced="true" rootstarteamfolder="/" recursive="true" url="${ST.url}" />
              ]]></code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask">
            <summary>
            Base for tree based star team tasks.
            </summary>
            <remarks>
            <para>
            Abstracts tree-walking behavior common to many subtasks.
            </para>
            <para>
            This class provides tree iteration functionality. Derived classes will implement their specific task 
            functionally using the visitor pattern, specifically by implementing the method <see cref="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.visit(StarTeam.StFolder,System.IO.FileInfo)"/>
            </para>
            <para>This class ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html </para>
            <para>You need to have the StarTeam SDK installed for StarTeam tasks to function correctly.</para>
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.ExecuteTask">
            <summary>
            Does the work of opening the supplied Starteam view and calling 
            the <see cref="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.visit(StarTeam.StFolder,System.IO.FileInfo)"/> method setting the pattern in motion to perform the task.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.getLabelID(StarTeam.StView)">
            <summary> 
            Helper method calls on the StarTeam API to retrieve an ID number for the specified view, corresponding to this.label.
            </summary>
            <returns>The Label identifier or <c>-1</c> if no label was provided.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.visit(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> Derived classes must override this class to define actual processing to be performed on each folder in the tree defined for the task</summary>
            <param name="rootStarteamFolder">the StarTeam folderto be visited</param>
            <param name="rootLocalFolder">the local mapping of rootStarteamFolder</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.testPreconditions">
            <summary> 
            Derived classes must override this method to define tests for any preconditons required by the task.  
            This method is called at the beginning of the ExecuteTask method. 
            </summary>
            <seealso cref="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.ExecuteTask"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.listLocalFiles(System.IO.FileInfo)">
            <summary> 
            Gets the collection of the local file names in the supplied directory.
            We need to check this collection against what we find in Starteam to
            understand what we need to do in order to synch with the repository.
            </summary>
            <remarks>
            The goal is to keep track of which local files are not controlled by StarTeam.
            </remarks>
            <param name="localFolder">Local folder to scan</param>
            <returns>hashtable whose keys represent a file or directory in localFolder.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.delistLocalFile(System.Collections.Hashtable,System.IO.FileInfo)">
            <summary> 
            Removes file being worked with from the <see cref="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.listLocalFiles(System.IO.FileInfo)"/> generated hashtable.
            </summary>
            <remarks>
            The goal is to keep track of which local files are not controlled by StarTeam.
            </remarks>
            <param name="localFiles">Hashtable of the current directory's file|dire</param>
            <param name="thisfile">file to remove from list.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.IsIncluded(System.String)">
            <summary>
            Evaluates defined <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Includes"/> and <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Excludes"/> patterns against a filename. 
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.ToRegexPattern(System.String)">
            <summary>
                Lifted/Modified from <see cref="T:NAnt.Core.DirectoryScanner"/> to convert patterns to match filenames to regularexpressions.
            </summary>
            <param name="nantPattern">Search pattern - meant to be just a filename with no path info</param>
            <remarks>The directory seperation code in here most likely is overkill.</remarks>
            <returns>Regular expresssion for searching matching file names</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.populatePatterns(System.Collections.Specialized.StringCollection,System.Collections.Specialized.StringCollection@)">
            <summary>
            Convert path patterns to regularexpression patterns. Stored in the given string collection.
            </summary>
            <param name="paths">collection of paths to expand into regular expressions</param>
            <param name="patterns">collection to store the given regularexpression patterns</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.rootstarteamfolder">
            <summary>
            Root StarTeam folder to begin operations on. Defaults to the root of the view.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.RootLocalFolder">
            <summary>
            Root Local folder where files are to be checkout/in or manipulated. Defaults to the StarTeam default folder. 
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Includes">
            <summary>
            Accepts comma de-limited list of expressions to include in tree operations. 
            If nothing is set ALL filespecs are included.
            </summary>
            <example>
            <para>Match all C# files in the directory</para>
            <code>*.cs</code>
            </example>
            <remarks>
            Expressions should be just for filename matching. 
            Technically relative directory information is accepted but will never match.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Excludes">
            <summary>
            Accepts comma de-limited list of expressions to exclude from tree operations. 
            If nothing is specified. NO filespecs are excluded.
            </summary>
            <example>
            <para>Match <b>No</b> C# files in the directory</para>
            <code>*.cs</code>
            </example>
            <remarks>
            <para>
            If a excludes pattern is set with no <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Includes"/> patterns present includes defaults to "*"
            </para>
            Expressions should be just for filename matching. 
            Technically relative directory information is accepted but will never match.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.recursive">
             <summary>
            Default : true - should tasks recurse through tree.
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Forced">
            <summary>
            Default : false - force check in/out actions regardless of the status that StarTeam is maintaining for the file. 
            </summary>
            <remarks>
            <para>If <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.RootLocalFolder"/> is set then this property should be set <c>true</c>. 
            Otherwise the checkout will be based on how the repository compares to local target folder.
            </para>
            <para>Note that if forced is not on. Files with status Modified and Merge will not be processed.</para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Label">
            <summary> 
            Label used for checkout. If no label is set latest state of repository is checked out.
            </summary>
            <remarks>
            The label must exist in starteam or an exception will be thrown. 
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.starTeamLockTypeStatics">
            <summary>classes used to access static values</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.starteamFolderFactory">
            <summary>Facotry classes used when files and folders are added to the repository. Populated when adduncontrolled is enabled.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin._createFolders">
            <value> will folders be created for new items found with the checkin.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin._comment">
            <value> The comment which will be stored with the checkin.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin._addUncontrolled">
            <value> holder for the add Uncontrolled attribute.  If true, all local files not in StarTeam will be added to the repository.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin._lockStatus">
            <value> This attribute tells whether unlocked files on checkin (so that other users may access them) checkout or to 
            leave the checkout status alone (default).
            </value>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.createSnapshotView(StarTeam.StView)">
            <summary>
            Override of base-class abstract function creates an appropriately configured view.  For checkins this is
            always the current or "tip" view.
            </summary>
            <param name="raw">the unconfigured <code>View</code></param>
            <returns>the snapshot <code>View</code> appropriately configured.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.testPreconditions">
            <summary> Implements base-class abstract function to define tests for any preconditons required by the task</summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.visit(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> Implements base-class abstract function to perform the checkin operation on the files in each folder of the tree.</summary>
            <param name="starteamFolder">the StarTeam folder to which files will be checked in</param>
            <param name="targetFolder">local folder from which files will be checked in</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.addUncontrolledItems(System.Collections.Hashtable,StarTeam.StFolder)">
            <summary> Adds to the StarTeam repository everything on the local machine that is not currently in the repository.</summary>
            <param name="localFiles">Hasttable containing files missing in the repository for the current folder</param>
            <param name="folder">StarTeam folder to which these items are to be added.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.add(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> Adds the file or directpry to the repository.</summary>
            <param name="parentFolder">StarTeam folder underwhich items will be added.</param>
            <param name="file">the file or directory to add</param>
            <returns>true if the file was successfully added otherwise false.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.adduncontrolled">
            <summary> 
            if true, any files or folders NOT in StarTeam will be added to the repository.  Defaults to "false".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.unlocked">
            <summary> 
            Set to do an unlocked checkout; optional, default is false; 
            If true, file will be unlocked so that other users may change it.  If false, lock status will not change. 
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout">
            <summary>
            Task to check out files from StarTeam repositories. 
            </summary>
            <remarks>
            <para>You can check out by <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Label"/> and control the type of lock with <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.locktype"/>.</para>
            <para>You can delete files that are not in source control by setting <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.deleteuncontrolled"/>.</para>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stcheckout </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Recursively checks out all files in the project with an exclusive lock.</para>
              <code><![CDATA[
            	<!-- 
            	constructs a 'url' containing connection information to pass to the task 
            	alternatively you can set each attribute manually 
            	-->
            	<property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname"/>
            	<stcheckout locktype="exclusive" rootstarteamfolder="/" recursive="true" url="${ST.url}" />
              ]]></code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout._createDirs">
            <value> holder for the createDirs property.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout._deleteUncontrolled">
            <value> holder for the deleteUncontrolled property.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout._lockStatus">
            <value> holder for the lockstatus property. </value>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.createSnapshotView(StarTeam.StView)">
            <summary> 
            Override of base-class abstract function creates an appropriately configured view for checkout. 
            If a label is specified it is used otherwise the current view of the repository is used.
            </summary>
            <param name="raw">the unconfigured <code>StarTeam View</code></param>
            <returns>the snapshot <code>StarTeam View</code> appropriately configured.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.testPreconditions">
            <summary> Implements base-class abstract function to define tests for any preconditons required by the task</summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.visit(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> 
            Implements base-class abstract function to perform the checkout operation on the files in each folder of the tree.
            </summary>
            <param name="starteamFolder">the StarTeam folder from which files to be checked out</param>
            <param name="targetFolder">the local mapping of the starteam folder</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.deleteUncontrolledItems(System.Collections.Hashtable)">
            <summary> 
            Deletes everything on the local machine that is not in the repository.
            </summary>
            <param name="localFiles">Hashtable containing filenames to be deleted</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.delete(System.IO.FileInfo)">
            <summary> Utility method to delete the file (and it's children) from the local drive.</summary>
            <param name="file">the file or directory to delete.</param>
            <returns>was the file successfully deleted</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.createworkingdirs">
            <summary> 
            Default : true - Create directories that are in the Starteam repository even if they are empty.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.deleteuncontrolled">
            <summary> 
            <b>Not fully tested CAREFUL</b> Default : false - Should all local files <b>NOT</b> in StarTeam be deleted?
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.locktype">
            <summary> 
            What type of lock to apply to files checked out. 
            <list type="bullet">
            	<listheader>
            		<term>LockType</term>
            	</listheader>
            	<item>
            		<term>unchanged</term>
            		<description>default: do not make any changes to the lock state of items.</description>
            	</item>
            	<item>
            		<term>exclusive</term>
            		<description>Exclusively lock items. No other users can update the object while it is exclusively locked.</description>
            	</item>
            	<item>
            		<term>nonexclusive</term>
            		<description>Put a non-exclusive lock on the item.</description>
            	</item>
            	<item>
            		<term>unlocked</term>
            		<description>Remove locks from all items checked out. This accompanied by force would effectively override a lock and replace local contents with the current version.</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamLabel">
            <summary>
            Allows creation of view labels in StarTeam repositories.
            </summary>
            <remarks>
            <para>Often when building projects you wish to label the source control repository.</para>
            <para>By default this task creates view labels with the build option turned on.</para>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stlabel </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Creates a label in a StarTeam repository.</para>
              <code><![CDATA[
            	<!-- 
            	constructs a 'url' containing connection information to pass to the task 
            	alternatively you can set each attribute manually 
            	-->
            	<property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname"/>
            	<stlabel label="3.1 (label title goes here)" description="This is a label description" url="${ST.url}"/>	
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamLabel.ExecuteTask">
            <summary>
            This method does the work of creating the new view and checking it 
            into Starteam.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamList">
            <summary>
            List items in StarTeam repositories.
            </summary>
            <remarks>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stlist </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Lists all files in a StarTeam repository.</para>
              <code><![CDATA[
            	<!-- 
            	constructs a 'url' containing connection information to pass to the task 
            	alternatively you can set each attribute manually 
            	-->
            	<property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname"/>
            	<stlist rootstarteamfolder="/" recursive="true" url="${ST.url}"/>	
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamList.createSnapshotView(StarTeam.StView)">
            <summary>
            Override of base-class abstract function creates an appropriately configured view for checkoutlists. 
            The current view or a view of the label specified <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Label"/>.
            </summary>
            <param name="raw">the unconfigured <c>View</c></param>
            <returns>the snapshot <c>View</c> appropriately configured.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamList.testPreconditions">
            <summary>Required base-class abstract function implementation is a no-op here.</summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamList.visit(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> Implements base-class abstract function to perform the checkout
            operation on the files in each folder of the tree.</summary>
            <param name="starteamFolder">the StarTeam folder from which files to be checked out</param>
            <param name="targetFolder">the local mapping of rootStarteamFolder</param>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.AddTask">
            <summary>
            Used to add files to a Visual SourceSafe database.  If the file is currently
            in the SourceSafe database a message will be logged but files will continue to be added.
            </summary>
            <remarks>    
            This version does not support recursive adds.  Only adds in the root directory will be added to the
            SourceSafe database.
            </remarks>
            <example>
              <code><![CDATA[
                <vssadd dbpath="C:\SourceSafeFolder\srcsafe.ini" user="user1" password="" path="$/Somefolder">
                  <fileset basedir="C:\SourceFolder\">  
                    <includes name="*.dll"/>
                  </fileset>
                </vssadd>
              ]]></code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.BaseTask">
            <summary>
            The base abstract class for all Visual Source Safe Tasks.  
            Provides the core attributes, and functionality for opening an item 
            in a Visual Source Safe database.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Open">
            <summary>
            Opens the Source Safe database and sets the reference to the specified
            item and version.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.dbPath">
            <summary>
            The absolute path to the folder that contains the srcsafe.ini. Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Path">
            <summary>
            The source safe project or file path, starting with "$/".  Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Password">
            <summary>
            The password to use to login to the Source Safe database.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.User">
            <summary>
            The user id to use to login to the Source Safe database. Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Version">
            <summary>
            A version of the path to reference. Accepts multiple forms, 
            including the label, version number, or date of the version. 
            If omitted, the latest version is used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.AddTask.Comment">
            <summary>
            Places a comment on all files added into the SourceSafe repository.  Not Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.AddTask.AddFileSet">
            <summary>
            List of files that should be added to SourceSafe.  Note: Recursive adds not supported.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.CheckinTask">
            <summary>
            Used to checkin files into Visual Source Safe.
            </summary>
            <example>
              <para>Checkin all files from an absolute directory to a local sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckin 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                  comment="NAnt checkin"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkin a file from a relative directory to a remote sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckin 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest\myFile.cs"
                  recursive="false"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                  comment="NAnt checkin"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Comment">
            <summary>
            The comment for the new version.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.LocalPath">
            <summary>
            The absolute path to the local working directory. Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Recursive">
            <summary>
            Determines whether to perform a recursive checkin. 
            Default value is true when omitted.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Writable">
            <summary>
            Determines whether to leave the file(s) as writable. 
            Default value is false when omitted.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask">
            <summary>
            Task used to checkout files from Visual Source Safe.
            </summary>
            <example>
              <para>Checkout the latest files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkout a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vsscheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest"
                  recursive="false"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.LocalPath">
            <summary>
            The absolute path to the local working directory. Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.Recursive">
            <summary>
            Determines whether to perform a recursive checkout. 
            Default value is true when omitted.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.Writable">
            <summary>
            Determines whether to leave the file(s) as writable. 
            Default value is true when omitted.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.DiffTask">
            <summary>
            Used to generate differences in a vss database. It will show all changes to a project
            after the specified label.
            </summary>
            <remarks>
            This only shows differences between the current version and the version specified.
            </remarks>
            <example>
              <code><![CDATA[
                       <vssdiff
                           dbpath='ss.ini'
                           path='$/My Project'
                           label='My Label'
                           user='ssuser'
                           outputfile='diff.xml'
                       />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.DiffTask.Label">
            <summary>
            The value of the label to compare to. Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.DiffTask.OutputFile">
            <summary>
            The output file to generate (xml)
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.GetTask">
            <summary>
            Used to retreive an item or project from a Visual Source Safe database.
            </summary>
            <example>
              <para>Get the latest files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Get the latest version of a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
            <example>
              <para>Get the latest version of a file from a remote sourcesafe database. Remove any deleted files from local image.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  removedeleted="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeletedFromLocalImage">
            <summary>
            Checks to see if we should remove local copies of deleted files, and starts
            the scan.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeletedFromLocalImage(SourceSafeTypeLib.IVSSItem,System.String)">
            <summary>
            Scans the Project Item for deleted files and removes their local
            copies from the local image of the project. Obeys the recursive setting
            (and thus optionally calls itself recursively).
            </summary>
            <param name="item">The VSS Item (project) to check for deletions</param>
            <param name="localPathPrefix">The path to the folder of the item being processed</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.LocalPath">
            <summary>
            The absolute path to the local working directory. Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Recursive">
            <summary>
            Determines whether to perform the get recursively.
            Default value is true when omitted.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Replace">
            <summary>
            Determines whether to replace writable files.
            Default value is false when omitted.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Writable">
            <summary>
            Determines whether the files will be read-only.
            Default value is false when omitted.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeleted">
            <summary>
            Determines whether files marked "deleted" in the
            repository will be removed from the local copy.
            Default value is false when omitted.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.UseModificationTime">
            <summary>
            Determines whether the timestamp on the local copy
            will be the modification time (if false or omitted, 
            the checkout time will be used)
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.LabelTask">
            <summary>
            Used to apply a label to a Visual Source Safe item.
            </summary>
            <example>
              <para>Label all files in a local sourcesafe database. (Automatically applies the label recursively)</para>
              <code><![CDATA[
                <vsslabel 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                  comment="NAnt label"
                  label="myLabel"
                />
              ]]></code>
            </example>
            <example>
              <para>Label a file in a remote sourcesafe database.</para>
              <code><![CDATA[
                <vsslabel 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                  comment="NAnt label"
                  label="myLabel"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.LabelTask.Comment">
            <summary>
            The label comment.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.LabelTask.Label">
            <summary>
            The value of the label. Required.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask">
            <summary>
            Task is used to undo a checkout from SourceSafe
            </summary>
            <example>
              <para>Undo a checkout of all of the files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vssundocheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkout a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vssundocheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest"
                  recursive="false"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask.LocalPath">
            <summary>
            The absolute path to the local working directory. This is required if you wish to 
            have your local file replaced with the latest version from SourceSafe.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask.Recursive">
            <summary>
            Determines whether to perform a recursive UndoCheckOut. 
            Default value is true when omitted.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ADSIBaseTask">
            <summary>
            Base NAnt task for working with ADSI.  This task contains only the path of the ADSI
            object that you want to work with.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIBaseTask.Path">
            <summary>
            The ADSI path of the location where we want to work with.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ADSIGetPropertyTask">
            <summary>
            Used to get the value of a property from an ADSI object.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSIGetPropertyTask.ExecuteTask">
            <summary>
            Sets the specified property
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIGetPropertyTask.PropName">
            <summary>
            The name of the property to get
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIGetPropertyTask.StoreIn">
            <summary>
            The system property to store the value in.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ADSISetPropertyTask">
            <summary>
            Sets a property on an ADSI object.
            </summary>
            <remarks>
            This task uses a heuristic to determine the type of the property in ADSI.  The following cases are notable:
            <list type="bulleted">
              <item>If the property does not exist on the item, it is inserted as a string.</item>
              <item>If the property already exists, this method will attempt to preserve
              the type of the property.  The types this method knows about are String,
              Boolean, and Int32.</item>
              <item>If the property exists and is an array, the value is added to 
              the array, but only if it is not already present.</item>
            </list>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <adsisetprop path="${iis.path}/Root" propname="AuthAnonymous" propvalue="true" />
                ]]>
              </code>
            </example>
            <example>
              <code>
                <![CDATA[
            <adsisetprop path="${iis.path}/Root/GWSSample">
                <properties>
                    <option name="AuthBasic" value="false" />
                    <option name="AuthNTLM" value="true" />
                </properties>
            </adsisetprop>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSISetPropertyTask.ExecuteTask">
            <summary>
            Sets the specified property
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSISetPropertyTask.SetProperty(System.DirectoryServices.DirectoryEntry,System.String,System.String)">
            <summary>
            Sets the named property on the specified <see cref="T:System.DirectoryServices.DirectoryEntry"/> 
            to the given value.
            </summary>
            <param name="entry">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> we're modifying.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="propertyValue">The value to set the property to.</param>
            <remarks>
            The following cases are notable:
            <list type="bulleted">
              <item>
              If the property does not exist on the item, it is inserted as a 
              string.
              </item>
              <item>
              If the property already exists, this method will attempt to preserve
              the type of the property.  The types this method knows about are 
              <see cref="T:System.String"/>, <see creef="bool"/>, and <see cref="T:System.Int32"/>.
              </item>
              <item>
              If the property exists and is an array, the value is added to the 
              array, but only if it's not already present.
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSISetPropertyTask.PropertyName">
            <summary>
            The name of the property to set.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSISetPropertyTask.PropertyValue">
            <summary>
            The new value of the property.
            </summary>
        </member>
        <member name="T:NAnt.Optional.Tasks.AxImpTask">
            <summary>Generates a Windows Forms Control that wraps
            ActiveX Controls defined in an OCX.</summary>
            <example>
              <code><![CDATA[<aximp ocx="MyControl.ocx" out="MyFormsControl.dll" />]]></code>
            </example>
        </member>
        <member name="M:NAnt.Optional.Tasks.AxImpTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.Ocx">
            <summary>Filename of the .ocx file.</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.Out">
            <summary>Filename of the generated assembly.</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.PublicKeyFile">
            <summary>File containing strong name public key.</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.KeyFile">
            <summary>File containing strong name key pair.</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.KeyContainer">
            <summary>File of key container holding strong name key pair.</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.DelaySign">
            <summary>Force strong name delay signing .</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.GenerateSource">
            <summary>If C# source code for the Windows
            Form wrapper should be generated.</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.Silent">
            <summary>Prevents AxImp from displaying success message.</summary>
        </member>
        <member name="P:NAnt.Optional.Tasks.AxImpTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.COMRegisterTask">
            <summary>Register COM servers or typelibraries.</summary>
            <remarks>
                <para>COM register task will try and register any type of COM related file that needs registering. .exe files will be registered as exe servers, .tlb files registered with RegisterTypeLib and for all other filetypes it will attempt to register them as dll servers.</para>
            </remarks>
            <example>
              <para>Register a single dll server.</para>
              <code><![CDATA[<comregister file="myComServer.dll"/>]]></code>
              <para>Register a single exe server </para>
              <code><![CDATA[<comregister file="myComServer.exe"/>]]></code>
              <para>Register a set of COM files at once.</para>
              <code>
            <![CDATA[
            <comregister unregister="false">
                <fileset>         
                    <includes name="an_ExeServer.exe"/>
                    <includes name="a_TypeLibrary.tlb"/>
                    <includes name="a_DllServer.dll"/>
                    <includes name="an_OcxServer.ocx"/>
                </fileset>
            </comregister>
            ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterDllServer(System.String)">
            <summary>
            Register an inproc COM server, usually a .dll or .ocx
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterTypelib(System.String)">
            <summary>
            Register a COM type library
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterExeServer(System.String)">
            <summary>
            Register exe servers
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.FileName">
            <summary>The name of the file to register.  This is provided as an alternate to using the task's fileset.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.Unregister">
            <summary>Unregistering this time. ( /u paramater )Default is "false".</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.COMRegisterFileSet">
            <summary>the set of files to register..</summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.COMRegisterTask.DynamicPInvoke">
            <summary>
            Helper class to synamically build an assembly with the correct P
            Invoke signature
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.DynamicPInvoke.DynamicDllFuncInvoke(System.String,System.String)">
            <summary>
            register a given dll path
            </summary>
            <param name="dll"></param>
            <param name="entrypoint"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ChecksumTask">
            <summary>
            A task that calculates checksums for a set of files.
            Loosely based on Ant's Checksum task.
            </summary>
            <remarks>
            This task takes a set of input files in a fileset
            and calculates a checksum for each one of them. 
            You can specify the algorithm to use when calculating
            the checksum value (MD5 or SHA1, for example).
            The calculated value is saved to a file with the same
            name as the input file and an added extension either
            based on the algorithm name (e.g. .MD5), or whatever 
            is specified through the fileext attribute.
            </remarks>
            <example>
              <code><![CDATA[
                 <checksum algorithm="MD5" fileext="MD5">
                    <fileset>
                       <includes name="${outputdir}\*.dll"/>
                    </fileset>
                 </checksum>
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.WriteChecksum(System.String,System.String)">
            <summary>
            Writes a checksum to a destination file
            </summary>
            <param name="filename"></param>
            <param name="checksum"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.Algorithm">
            <summary>
            Name of Algorithm to use when calculating
            the checksum. Can be MD5 or SHA1.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.FileExtension">
            <summary>
            The generated checksum file's name will be the 
            original filename with "." and fileext 
            added to it. Defaults to the 
            algorithm name being used
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.FileSet">
            <summary>
            Set of files to use as input
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.CodeStatsTask.CodeStatsTask">
            <summary>
            Generates Statistics from Source Code
            </summary>
            <remarks>
            <para>Scans files in a fileset counting lines</para>
            </remarks>
            <example>
            <para>Count all .cs files for a project</para>
            <para>Verbose mode is suported and will print a summary to the Log</para>
            <para>Output can be saved to an xml file</para>
            <code>
            <![CDATA[
                <codestats outputFile="test.xml" verbose="true">
                    <fileset>
                        <includes name="**.cs" />
                    </fileset>
                </codestats>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.CodeStatsTask.TargetFileSet">
            <summary>
            The file set to work on
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.CodeStatsTask.OutputFile">
            <summary>
            If you want to save the output (in xml) specify the file name here
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ConcatTask">
            <summary>
            A task that concatenates a set of files.
            Loosely based on Ant's Concat task.
            </summary>
            <remarks>
            This task takes a set of input files in a fileset
            and concatenates them into a single file. You can 
            either replace the output file, or append to it 
            by using the append attribute.
            
            The order the files are concatenated in is not
            especified.
            </remarks>
            <example>
              <code><![CDATA[
              <concat destfile="${outputdir}\Full.txt" append="true">
                 <fileset>
                    <includes name="${outputdir}\Test-*.txt" />
                 </fileset>
              </concat>
              
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.OpenDestinationFile">
            <summary>
            Opens the destination file according
            to the specified flags
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.AppendFiles(System.IO.FileStream)">
            <summary>
            Appends all specified files
            </summary>
            <param name="output">File to write to</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.Destination">
            <summary>
            Name of Destination file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.Append">
            <summary>
            Whether to append to the destination file (true),
            or replace it (false). Default is false.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.FileSet">
            <summary>
            Set of files to use as input
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.DicsoTask">
            <summary>Discovers the URLs of XML web services on a web server and saves documents
            related to them to the local disk. The resulting .discomap, .wsdl, and .xsd files
            can be used with the <see cref="T:NAnt.Contrib.Tasks.WsdlTask"/> to produce web service clients and
            and abstract web service servers using ASP.NET.</summary>
            <example>
              <para>Generate a proxy class for a web service.</para>
              <code><![CDATA[<disco path="http://www.somewhere.com/myservice.wsdl"
                language="CS" namespace="MyCompany.MyService" outfile="MyService.cs" />]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.DicsoTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Path">
            <summary>The URL or Path to discover.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.NoSave">
            <summary>Do not save the discovered documents to the local disk.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.OutputDir">
            <summary>The output directory to save discovered documents in.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Username">
            <summary>Username of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Password">
            <summary>Password of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Domain">
            <summary>Domain of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Proxy">
            <summary>URL of a proxy server to use for HTTP requests.
            The default is to use the system proxy setting.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyUsername">
            <summary>Username of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyPassword">
            <summary>Password of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyDomain">
            <summary>Domain of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacTask">
            <summary>Manipulates the contents of the global assembly cache.</summary>
            <remarks>
              <para>This tasks provides some of the same functionality as the gacutil tool provided in the .NET SDK.</para>
              <para>Specifically, the gac task allows you to install assemblies into the cache and remove them from the cache.</para>
              <para>Refer to the <a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrfglobalassemblycacheutilitygacutilexe.htm">Global Assembly Cache Tool (Gacutil.exe)</a> for more information.</para>
            </remarks>
            <example>
              <para>Inserts the file mydll.dll into the global assembly cache.</para>
              <code>&lt;gac assembly=mydll.dll"/&gt;</code>
              <para>Removes the assembly hello from the global assembly cache and the native image cache.</para>
              <code>&lt;gac assembly="hello" uninstall="true"/&gt;</code>
              <para>Note that the previous command might remove more than one assembly from the assembly cache because the assembly name is not fully specified. For example, if both version 1.0.0.0 and 3.2.2.1 of hello are installed in the cache, the command gacutil /u hello removes both of the assemblies.</para>
              <para>Use the following example to avoid removing more than one assembly. This command removes only the hello assembly that matches the fully specified version number, culture, and public key.</para>
              <code>&lt;gac assembly='hello,Version=1.0.0.1,Culture="de",PublicKeyToken=45e343aae32233ca' uninstall="true"/&gt;</code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.AssemblyName">
            <summary>The name of a file that contains an assembly manifest.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.ActionType">
            <summary>Defines the action to take with the assembly. Supported actions are: <c>install</c>, <c>overwrite</c>, and <c>uninstall</c>.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.CopyFileSet">
            <summary>Fileset are used to define multiple assemblies.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.Silent">
            <summary>Quiet mode.</summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.HxCompTask">
            <summary>Compiles a Microsoft HTML Help 2.0 Project.</summary>
            <example>
              <para>Compile a help file.</para>
              <code><![CDATA[<hxcomp contents="MyContents.HxC" output="MyHelpFile.HxS" projectroot="HelpSourceFolder"/>]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.Contents">
            <summary>The name of the contents (.HxC) file.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.LogFile">
            <summary>ANSI/DBCS log filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UnicodeLogFile">
            <summary>Unicode log filename. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.ProjectRoot">
            <summary>Root directory containing Help 2.0 project files.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.Output">
            <summary>Output (.HxS) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoInformation">
            <summary>Generate no informational messages.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoErrors">
            <summary>Generate no error messages.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoWarnings">
            <summary>Generate no warning messages.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.Quiet">
            <summary>Quiet mode.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UncompileFile">
            <summary>File to be decompiled.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UncompileOutputDir">
            <summary>Directory to place decompiled files into.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.HxRegTask">
            <summary>Registers a Microsoft HTML Help 2.0 Collection.</summary>
            <example>
              <para>Register a help namespace.</para>
              <code><![CDATA[<hxreg namespace="MyProduct.MyHelp" title="MyProductHelp" collection="MyHelp.HxC" helpfile="MyHelp.HxS"/>]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Namespace">
            <summary>Help collection namespace.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Title">
            <summary>Title identifier.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Collection">
            <summary>Collection (.HxC) filename. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Description">
            <summary>Description of the namespace.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.HelpFile">
            <summary>Help (.HxS) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Index">
            <summary>Index (.HxI) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.SearchFile">
            <summary>Combined full-text search (.HxQ) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.AttrIndex">
            <summary>Combined attribute index (.HxR) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Language">
            <summary>Language ID.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Alias">
            <summary>Alias.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.CommandFile">
            <summary>Filename of a file containing HxReg commands.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.UnRegister">
            <summary>Unregister a namespace, title, or alias.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.MkIISDirTask">
            <summary>
            A task to Create or Modify a IIS Virtual Directory for the Default Web Site.
            </summary>
            <remarks>
            If the virtual directory does not exist it is created.
            If the virtual directory alread exists it is modified.
            Required Parameters are dirpath and vdirname.
            For a list of optional parameters see <a href="ms-help://MS.VSCC/MS.MSDNVS/iisref/html/psdk/asp/aore8v5e.htm">IIsWebVirtualDir</a>.
            </remarks>
            <example>
              <para>Creates a Temp IIS Virtual Directory pointing to <c>c:\temp</c> on the local machine.</para>
              <code><![CDATA[
                 <mkiisdir 
                    dirpath="c:\temp"
                    vdirname="TEMP"
                 />
              ]]></code>
            </example>
            <example>
              <para>Creates a Temp IIS Virtual Directory pointing to <c>c:\temp</c> on the machine <c>staging</c>.</para>
              <code><![CDATA[
                 <mkiisdir 
                    iisserver="staging"
                    dirpath="c:\temp"
                    vdirname="TEMP"
                 />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MkIISDirTask.dirpath">
            <summary>The file system path</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MkIISDirTask.vdirname">
            <summary>Name of the IIS Virtual Directory</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MkIISDirTask.iisserver">
            <summary>The IIS server.  Defaults to localhost.</summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.DelIISDirTask">
            <summary>
            A task to delete a specified IIS Virtual Directory in the Default Web Site.
            </summary>
            <example>
              <para>Delete the TEMP IIS Virtual Directory.</para>
              <code><![CDATA[
                 <deliisdir 
                    vdirname="TEMP"
                 />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DelIISDirTask.vdirname">
            <summary>Name of the IIS Virtual Directory</summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.IISDirInfoTask">
            <summary>
            A task to List the configuration settings of a specified IIS Virtual Directory in the Default Web Site.
            </summary>
            <example>
              <para>List the settings of the TEMP IIS Virtual Directory.</para>
              <code><![CDATA[
                 <iisdirinfo 
                    vdirname="TEMP"
                 />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.IISDirInfoTask.vdirname">
            <summary>Name of the IIS Virtual Directory</summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.MSITask">
            <summary>
            Builds a Windows Installer (MSI) File.
            </summary>
            <remarks>
            Requires <c>cabarc.exe</c> in the path.  This tool is included in the 
            Microsoft Cabinet SDK.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SchemaValidatedTask">
            <summary>
            Abstract Task that Validates inheriting classes 
            against an XML Schema of the same name.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.Task_OnSchemaValidate(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Occurs when a validation error is raised.
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="args">Validation arguments passed in.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes the task and verifies parameters.
            </summary>
            <param name="TaskNode">Node that contains the 
            XML fragment used to define this task instance.</param>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.ExpandPropertiesInNodes(System.Xml.XmlNodeList)">
            <summary>
            Recursively expands properties of all attributes of 
            a nodelist and their children.
            </summary>
            <param name="Nodes">The nodes to recurse.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SchemaValidatedTask.SchemaObject">
            <summary>
            Returns the object from the Schema wrapper after 
            <see cref="M:NAnt.Contrib.Tasks.SchemaValidatedTask.InitializeTask(System.Xml.XmlNode)"/> is called.
            </summary>
            <value>The object from the Schema wrapper after 
            <see cref="M:NAnt.Contrib.Tasks.SchemaValidatedTask.InitializeTask(System.Xml.XmlNode)"/> is called.</value>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initialize taks and verify parameters.
            </summary>
            <param name="TaskNode">Node that contains the XML fragment
            used to define this task instance.</param>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.ExecuteTask">
            <summary>
            Executes the Task.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.CleanOutput(System.String,System.String)">
            <summary>
            Cleans the output directory after a build.
            </summary>
            <param name="cabFile">The path to the cabinet file.</param>
            <param name="tempPath">The path to temporary files.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadBanner(WindowsInstaller.Database)">
            <summary>
            Loads the banner image.
            </summary>
            <param name="Database">The MSI database.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadBackground(WindowsInstaller.Database)">
            <summary>
            Loads the background image.
            </summary>
            <param name="Database">The MSI database.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadLicense(WindowsInstaller.Database)">
            <summary>
            Loads the license file.
            </summary>
            <param name="Database">The MSI database.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadProperties(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Properties table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadComponents(WindowsInstaller.Database,System.Type,System.Object,System.Int32@,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View)">
            <summary>
            Loads records for the Components table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="LastSequence">The sequence number of the last file in the .cab</param>
            <param name="MsiAssemblyView">View containing the MsiAssembly table.</param>
            <param name="MsiAssemblyNameView">View containing the MsiAssemblyName table.</param>
            <param name="DirectoryView">The MSI database view.</param>
            <param name="ClassView">View containing the Class table.</param>
            <param name="ProgIdView">View containing the ProgId table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadDirectories(WindowsInstaller.Database,System.Type,System.Object,WindowsInstaller.View@)">
            <summary>
            Loads records for the Directories table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="DirectoryView">The MSI database view.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.AddDirectory(WindowsInstaller.Database,WindowsInstaller.View,System.String,System.Type,System.Object,NAnt.Contrib.Schemas.MSI.MSIDirectory,System.Int32)">
            <summary>
            Adds a directory record to the directories table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="DirectoryView">The MSI database view.</param>
            <param name="ParentDirectory">The parent directory.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="Directory">This directory's Schema object.</param>
            <param name="Depth">The tree depth of this directory.</param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadMedia(WindowsInstaller.Database,System.Type,System.Object,System.Int32)">
            <summary>
            Loads records for the Media table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="LastSequence">The sequence number of the last file in the .cab.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadSummaryInfo(WindowsInstaller.Database)">
            <summary>
            Loads properties for the Summary Information Stream.
            </summary>
            <param name="Database">The MSI database.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadEnvironment(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads environment variables for the Environment table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadFeatures(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Features table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.AddFeature(WindowsInstaller.View,WindowsInstaller.View,System.String,System.Type,System.Object,NAnt.Contrib.Schemas.MSI.MSIFeature,System.Int32,System.Int32)">
            <summary>
            Adds a feature record to the Features table.
            </summary>
            <param name="FeatureView">The MSI database view for Feature table.</param>
            <param name="ConditionView">The MSI database view for Condition table.</param>
            <param name="ParentFeature">The name of this feature's parent.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI INstaller object.</param>
            <param name="Feature">This Feature's Schema element.</param>
            <param name="Depth">The tree depth of this feature.</param>
            <param name="Order">The tree order of this feature.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.AddFiles(WindowsInstaller.Database,WindowsInstaller.View,NAnt.Contrib.Schemas.MSI.MSIComponent,WindowsInstaller.View,System.Type,System.Object,System.String,System.String,System.Int32@,System.Int32@,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View)">
            <summary>
            Adds a file record to the Files table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="DirectoryView">The MSI database view.</param>
            <param name="Component">The Component's XML Element.</param>
            <param name="FileView">The MSI database view.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="ComponentDirectory">The directory of this file's component.</param>
            <param name="ComponentName">The name of this file's component.</param>
            <param name="ComponentCount">The index in the number of components of this file's component.</param>
            <param name="Sequence">The installation sequence number of this file.</param>
            <param name="MsiAssemblyView">View containing the MsiAssembly table.</param>
            <param name="MsiAssemblyNameView">View containing the MsiAssemblyName table.</param>
            <param name="ComponentView">View containing the Components table.</param>
            <param name="FeatureComponentView">View containing the FeatureComponents table.</param>
            <param name="ClassView">View containing the Class table.</param>
            <param name="ProgIdView">View containing the ProgId table.</param>
            <param name="SelfRegView">View containing the SelfReg table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.IsVersion(System.String@)">
            <summary>
            Determines if the supplied version string is valid.  A valid version string should look like:
            1
            1.1
            1.1.1
            1.1.1.1
            </summary>
            <param name="Version">The version string to verify.</param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadRegistry(WindowsInstaller.Database,System.Type,System.Object,WindowsInstaller.View@)">
            <summary>
            Loads records for the Registry table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="RegistryView">View containing the Registry table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadAssemblies(WindowsInstaller.Database,System.Type,System.Object,WindowsInstaller.View@,WindowsInstaller.View@,WindowsInstaller.View@,WindowsInstaller.View@)">
            <summary>
            Creates the assembly and assembly name tables.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="MsiAssemblyView">View containing the MsiAssembly table.</param>
            <param name="MsiAssemblyNameView">View containing the MsiAssemblyName table.</param>
            <param name="ClassView">View containing the Class table.</param>
            <param name="ProgIdView">View containing the ProgId table.</param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadRegLocator(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the RegLocator table
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadAppSearch(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the RegLocator table
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadLaunchCondition(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the LaunchCondition table
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadIcon(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Icon table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadShortcut(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Shortcut table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.AddTables(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Adds custom table(s) to the msi database
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.AddTableData(WindowsInstaller.Database,System.Type,System.Object,System.String,NAnt.Contrib.Schemas.MSI.MSITable,System.Collections.ArrayList)">
            <summary>
            Adds table data to the msi database table structure
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="currentTable">The current table name</param>
            <param name="table">Xml node representing the current table</param>
            <param name="columnList">List of column objects for the current table (Containing: column name, id, type).</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.ReorderFiles(WindowsInstaller.Database,System.Int32@)">
            <summary>
            Sets the sequence number of files to match their
            storage order in the cabinet file, after some
            files have had their filenames changed to go in
            their own component.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="LastSequence">The last file's sequence number.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.CreateCabFile(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Creates a .cab file with all source files included.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.GetShortFile(System.String)">
            <summary>
            Retrieves a DOS 8.3 filename for a file.
            </summary>
            <param name="LongFile">The file to shorten.</param>
            <returns>The new shortened file.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.GetShortPath(System.String)">
            <summary>
            Retrieves a DOS 8.3 filename for a directory.
            </summary>
            <param name="LongPath">The path to shorten.</param>
            <returns>The new shortened path.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.GetShortDir(System.String)">
            <summary>
            Retrieves a DOS 8.3 filename for a complete directory.
            </summary>
            <param name="LongPath">The path to shorten.</param>
            <returns>The new shortened path.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.GetRelativePath(WindowsInstaller.Database,System.Type,System.Object,System.String,System.String,System.String,System.Text.StringBuilder,WindowsInstaller.View)">
            <summary>
            Retrieves the relative path of a file based on
            the component it belongs to and its entry in
            the MSI directory table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="Name">The Name of the Folder</param>
            <param name="Parent">The Parent of the Folder</param>
            <param name="Default">The Relative Filesystem Path of the Folder</param>
            <param name="Path">The Path to the Folder from previous calls.</param>
            <param name="DirectoryView">The MSI database view.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.ExpandPropertiesInNodes(System.Xml.XmlNodeList)">
            <summary>
            Recursively expands properties of all attributes of
            a nodelist and their children.
            </summary>
            <param name="Nodes">The nodes to recurse.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.ByteArrayToString(System.Byte[])">
            <summary>
            Converts the Byte array in a public key
            token of an assembly to a string MSI expects.
            </summary>
            <param name="ByteArray">The array of bytes.</param>
            <returns>The string containing the array.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadTypeLibs(WindowsInstaller.Database,System.Type,System.Object,WindowsInstaller.View)">
            <summary>
            Loads TypeLibs for the TypeLib table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="RegistryView">View containing the Registry Table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadMergeModules(System.String,System.String)">
            <summary>
            Merges Merge Modules into the MSI Database.
            </summary>
            <param name="Database">The MSI Database.</param>
            <param name="TempPath">The path to temporary files.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadBinary(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Binary table.  This table stores items
            such as bitmaps, animations, and icons. The binary table is
            also used to store data for custom actions.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadDialog(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Dialog table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadControl(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Control table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadControlCondition(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ControlCondtion table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadControlEvent(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ControlEvent table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadCustomAction(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the CustomAction table
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadSequence(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the InstallUISequence, InstallExecuteSequence,
            AdminUISequence, and AdminExecute tables.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadActionText(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ActionText table.  Allows users to specify descriptions/templates for actions.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadAppMappings(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _AppMappings table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadUrlProperties(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _UrlToDir table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadVDirProperties(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _VDirToUrl table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadAppRootCreate(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _AppRootCreate table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.LoadIISProperties(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _IISProperties table.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.VerifyTableExistance(WindowsInstaller.Database,System.String)">
            <summary>
            Checks to see if the specified table exists in the database
            already.
            </summary>
            <param name="Database">The MSI database.</param>
            <param name="TableName">Name of the table to check existance.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSITask.CheckAssemblyForCOMInterop(System.String,System.Reflection.Assembly,System.Type,System.Object,System.String,System.String,WindowsInstaller.View,WindowsInstaller.View)">
            <summary>
            Enumerates the registry to see if an assembly has been registered
            for COM interop, and if so adds these registry keys to the Registry
            table, ProgIds to the ProgId table, classes to the Classes table,
            and a TypeLib to the TypeLib table.
            </summary>
            <param name="FileName">The Assembly filename.</param>
            <param name="FileAssembly">The Assembly to check.</param>
            <param name="InstallerType">The MSI Installer type.</param>
            <param name="InstallerObject">The MSI Installer object.</param>
            <param name="ComponentName">The name of the containing component.</param>
            <param name="AssemblyComponentName">The name of the containing component's assembly GUID.</param>
            <param name="ClassView">View containing the Class table.</param>
            <param name="ProgIdView">View containing the ProgId table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.TypeLibRecord">
            <summary>
            Maintains a forward reference to a .tlb file
            in the same directory as an assembly .dll
            that has been registered for COM interop.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.TypeLibRecord.#ctor(System.String,System.String,System.Reflection.AssemblyName,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:NAnt.Contrib.Tasks.TypeLibRecord"/>.
            </summary>
            <param name="LibId">The typelibrary id.</param>
            <param name="TypeLibFileName">The typelibrary filename.</param>
            <param name="AssemblyName">The name of the assembly.</param>
            <param name="FeatureName">The feature containing the typelibrary's file.</param>
            <param name="AssemblyComponent">The name of the Assembly's component.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypeLibRecord.AssemblyComponent">
            <summary>
            Retrieves the name of the Assembly's component.
            </summary>
            <value>The Assembly's component Name.</value>
            <remarks>None.</remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypeLibRecord.TypeLibFileName">
            <summary>
            Retrieves the typelibrary filename.
            </summary>
            <value>The typelibrary filename.</value>
            <remarks>None.</remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypeLibRecord.LibId">
            <summary>
            Retrieves the typelibrary id.
            </summary>
            <value>The typelibrary id.</value>
            <remarks>None.</remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypeLibRecord.AssemblyName">
            <summary>
            Retrieves the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
            <remarks>None.</remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypeLibRecord.FeatureName">
            <summary>
            Retrieves the feature containing the typelibrary's file.
            </summary>
            <value>The feature containing the typelibrary's file.</value>
            <remarks>None.</remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.MSMTask">
            <summary>
            Builds a Windows Installer Merge Module (MSM) File.
            </summary>
            <remarks>
            Requires <c>cabarc.exe</c> in the path.  This tool is included in the 
            Microsoft Cabinet SDK.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initialize taks and verify parameters.
            </summary>
            <param name="TaskNode">Node that contains the XML fragment
            used to define this task instance.</param>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.ExecuteTask">
            <summary>
            Executes the Task.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.CleanOutput(System.String,System.String)">
            <summary>
            Cleans the output directory after a build.
            </summary>
            <param name="cabFile">The path to the cabinet file.</param>
            <param name="tempPath">The path to temporary files.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadBanner(WindowsInstaller.Database)">
            <summary>
            Loads the banner image.
            </summary>
            <param name="Database">The MSM database.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadBackground(WindowsInstaller.Database)">
            <summary>
            Loads the background image.
            </summary>
            <param name="Database">The MSM database.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadLicense(WindowsInstaller.Database)">
            <summary>
            Loads the license file.
            </summary>
            <param name="Database">The MSM database.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadModuleSignature(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ModuleSignature table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadModuleDependency(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ModuleDependency table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadModuleExclusion(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ModuleExclusion table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadModuleSequence(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ModuleInstallUISequence, ModuleInstallExecuteSequence,
            ModuleAdminUISequence, ModuleAdminExecute, and ModuleAdvtExecuteSequence tables.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadModuleIgnoreTable(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ModuleIgnoreTable table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadModuleSubstitution(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ModuleSubstitution table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadModuleConfiguration(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ModuleConfiguration table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadProperties(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Properties table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadComponents(WindowsInstaller.Database,System.Type,System.Object,System.Int32@,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View)">
            <summary>
            Loads records for the Components table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="LastSequence">The sequence number of the last file in the .cab</param>
            <param name="MsiAssemblyView">View containing the MsiAssembly table.</param>
            <param name="MsiAssemblyNameView">View containing the MsiAssemblyName table.</param>
            <param name="DirectoryView">The MSM database view.</param>
            <param name="ClassView">View containing the Class table.</param>
            <param name="ProgIdView">View containing the ProgId table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadDirectories(WindowsInstaller.Database,System.Type,System.Object,WindowsInstaller.View@)">
            <summary>
            Loads records for the Directories table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="DirectoryView">The MSM database view.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.AddDirectory(WindowsInstaller.Database,WindowsInstaller.View,System.String,System.Type,System.Object,NAnt.Contrib.Schemas.MSM.MSMDirectory,System.Int32)">
            <summary>
            Adds a directory record to the directories table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="DirectoryView">The MSM database view.</param>
            <param name="ParentDirectory">The parent directory.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="Directory">This directory's Schema object.</param>
            <param name="Depth">The tree depth of this directory.</param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadSummaryInfo(WindowsInstaller.Database)">
            <summary>
            Loads properties for the Summary Information Stream.
            </summary>
            <param name="Database">The MSM database.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadEnvironment(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads environment variables for the Environment table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.AddFiles(WindowsInstaller.Database,WindowsInstaller.View,NAnt.Contrib.Schemas.MSM.MSMComponent,WindowsInstaller.View,System.Type,System.Object,System.String,System.String,System.Int32@,System.Int32@,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View,WindowsInstaller.View)">
            <summary>
            Adds a file record to the Files table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="DirectoryView">The MSM database view.</param>
            <param name="Component">The Component's XML Element.</param>
            <param name="FileView">The MSM database view.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="ComponentDirectory">The directory of this file's component.</param>
            <param name="ComponentName">The name of this file's component.</param>
            <param name="ComponentCount">The index in the number of components of this file's component.</param>
            <param name="Sequence">The installation sequence number of this file.</param>
            <param name="MsiAssemblyView">View containing the MsiAssembly table.</param>
            <param name="MsiAssemblyNameView">View containing the MsiAssemblyName table.</param>
            <param name="ComponentView">View containing the Components table.</param>
            <param name="FeatureComponentView">View containing the FeatureComponents table.</param>
            <param name="ClassView">View containing the Class table.</param>
            <param name="ProgIdView">View containing the ProgId table.</param>
            <param name="SelfRegView">View containing the SelfReg table.</param>
            <param name="modComponentView">View containing the ModuleComponent table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.IsVersion(System.String@)">
            <summary>
            Determines if the supplied version string is valid.  A valid version string should look like:
            1
            1.1
            1.1.1
            1.1.1.1
            </summary>
            <param name="Version">The version string to verify.</param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadRegistry(WindowsInstaller.Database,System.Type,System.Object,WindowsInstaller.View@)">
            <summary>
            Loads records for the Registry table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="RegistryView">View containing the Registry table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadAssemblies(WindowsInstaller.Database,System.Type,System.Object,WindowsInstaller.View@,WindowsInstaller.View@,WindowsInstaller.View@,WindowsInstaller.View@)">
            <summary>
            Creates the assembly and assembly name tables.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="MsiAssemblyView">View containing the MsiAssembly table.</param>
            <param name="MsiAssemblyNameView">View containing the MsiAssemblyName table.</param>
            <param name="ClassView">View containing the Class table.</param>
            <param name="ProgIdView">View containing the ProgId table.</param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadRegLocator(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the RegLocator table
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadAppSearch(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the RegLocator table
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadIcon(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Icon table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadShortcut(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Shortcut table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.AddTables(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Adds custom table(s) to the msi database
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.AddTableData(WindowsInstaller.Database,System.Type,System.Object,System.String,NAnt.Contrib.Schemas.MSM.MSMTable,System.Collections.ArrayList)">
            <summary>
            Adds table data to the msi database table structure
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="currentTable">The current table name</param>
            <param name="table">Xml node representing the current table</param>
            <param name="columnList">List of column objects for the current table (Containing: column name, id, type).</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.ReorderFiles(WindowsInstaller.Database,System.Int32@)">
            <summary>
            Sets the sequence number of files to match their
            storage order in the cabinet file, after some
            files have had their filenames changed to go in
            their own component.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="LastSequence">The last file's sequence number.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.CreateCabFile(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Creates a .cab file with all source files included.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.GetShortFile(System.String)">
            <summary>
            Retrieves a DOS 8.3 filename for a file.
            </summary>
            <param name="LongFile">The file to shorten.</param>
            <returns>The new shortened file.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.GetShortPath(System.String)">
            <summary>
            Retrieves a DOS 8.3 filename for a directory.
            </summary>
            <param name="LongPath">The path to shorten.</param>
            <returns>The new shortened path.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.GetShortDir(System.String)">
            <summary>
            Retrieves a DOS 8.3 filename for a complete directory.
            </summary>
            <param name="LongPath">The path to shorten.</param>
            <returns>The new shortened path.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.GetRelativePath(WindowsInstaller.Database,System.Type,System.Object,System.String,System.String,System.String,System.Text.StringBuilder,WindowsInstaller.View)">
            <summary>
            Retrieves the relative path of a file based on
            the component it belongs to and its entry in
            the MSM directory table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="Name">The Name of the Folder</param>
            <param name="Parent">The Parent of the Folder</param>
            <param name="Default">The Relative Filesystem Path of the Folder</param>
            <param name="Path">The Path to the Folder from previous calls.</param>
            <param name="DirectoryView">The MSM database view.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.ExpandPropertiesInNodes(System.Xml.XmlNodeList)">
            <summary>
            Recursively expands properties of all attributes of
            a nodelist and their children.
            </summary>
            <param name="Nodes">The nodes to recurse.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.ByteArrayToString(System.Byte[])">
            <summary>
            Converts the Byte array in a public key
            token of an assembly to a string MSM expects.
            </summary>
            <param name="ByteArray">The array of bytes.</param>
            <returns>The string containing the array.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadTypeLibs(WindowsInstaller.Database,System.Type,System.Object,WindowsInstaller.View)">
            <summary>
            Loads TypeLibs for the TypeLib table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="RegistryView">View containing the Registry Table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadBinary(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Binary table.  This table stores items
            such as bitmaps, animations, and icons. The binary table is
            also used to store data for custom actions.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadDialog(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Dialog table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadControl(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the Control table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadControlCondition(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ControlCondtion table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadControlEvent(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ControlEvent table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadCustomAction(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the CustomAction table
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadSequence(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the InstallUISequence, InstallExecuteSequence,
            AdminUISequence, AdminExecute, AdvtExecuteSequence tables.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadActionText(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the ActionText table.  Allows users to specify descriptions/templates for actions.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadAppMappings(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _AppMappings table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadUrlProperties(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _UrlToDir table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadVDirProperties(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _VDirToUrl table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadAppRootCreate(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _AppRootCreate table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.LoadIISProperties(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Loads records for the _IISProperties table.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.DropEmptyTables(WindowsInstaller.Database,System.Type,System.Object)">
            <summary>
            Drops empty tables.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <returns>True if empy and False if full.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.VerifyTableEmpty(WindowsInstaller.Database,System.String)">
            <summary>
            Checks to see if the specified table is empty.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="TableName">Name of the table to check existance.</param>
            <returns>True if empy and False if full.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.VerifyTableExistance(WindowsInstaller.Database,System.String)">
            <summary>
            Checks to see if the specified table exists in the database
            already.
            </summary>
            <param name="Database">The MSM database.</param>
            <param name="TableName">Name of the table to check existance.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MSMTask.CheckAssemblyForCOMInterop(System.String,System.Reflection.Assembly,System.Type,System.Object,System.String,System.String,WindowsInstaller.View,WindowsInstaller.View)">
            <summary>
            Enumerates the registry to see if an assembly has been registered
            for COM interop, and if so adds these registry keys to the Registry
            table, ProgIds to the ProgId table, classes to the Classes table,
            and a TypeLib to the TypeLib table.
            </summary>
            <param name="FileName">The Assembly filename.</param>
            <param name="FileAssembly">The Assembly to check.</param>
            <param name="InstallerType">The MSM Installer type.</param>
            <param name="InstallerObject">The MSM Installer object.</param>
            <param name="ComponentName">The name of the containing component.</param>
            <param name="AssemblyComponentName">The name of the containing component's assembly GUID.</param>
            <param name="ClassView">View containing the Class table.</param>
            <param name="ProgIdView">View containing the ProgId table.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.MgmtClassGenTask">
            <summary>
            A task that generates strongly typed
            WMI classes using mgmtclassgen.exe.
            </summary>
            <remarks>
            The Management Strongly Typed Class Generator 
            enables you to quickly generate an early-bound 
            managed class for a specified Windows Management 
            Instrumentation (WMI) class. The generated 
            class simplifies the code you must write to access 
            an instance of the WMI class.
            </remarks>
            <example>
              <code><![CDATA[
              <mgmtclassgen 
                    wmiclass="Win32_LogicalDisk" 
                    language="CS"
                    machine="SomeMachine"
                    path="Root\cimv2"
                    namespace="Winterdom.WMI"
                    out="${outputdir}\LogicalDisk.cs"
                    username="Administrator"
                    password="password"
              />
              
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MgmtClassGenTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MgmtClassGenTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.WmiClass">
            <summary>
            Specifies the name of the WMI class
            to generate the strongly typed class
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Language">
            <summary>
            Specifies the language in which to generate
            the class. Possible values are: CS, VB, JS
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Machine">
            <summary>
            Specifies the machine to connect to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Path">
            <summary>
            Specifies the path to the WMI namespace
            that contains the class.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Namespace">
            <summary>
            Namespace of the generated .NET class
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.OutFile">
            <summary>
            Path of the file to generate
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Username">
            <summary>
            User name to use when connecting to
            the specified machine
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Password">
            <summary>
            Password to use when connecting to the 
            specified machine
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.ProgramFileName">
            <summary>
            Filename of program to execute
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NGenTask">
            <summary>Pre-translates native code for an
            assembly containing IL (Intermediary Language
            bytecode) on the Windows platform.</summary>
            <example>
              <code><![CDATA[<ngen assembly="MyAssembly.dll" />]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NGenTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Assembly">
            <summary>Assembly path or display name.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Show">
            <summary>If existing images should be shown.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Delete">
            <summary>If existing images should be deleted.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Debug">
            <summary>If an image should be generated which
            can be used under a debugger.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.DebugOptimized">
            <summary>If an image should be generated which
            can be used under a debugger in optimized
            debugging mode.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Profiled">
            <summary>If an image should be generated which
            can be used under a profiler.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Silent">
            <summary>Prevents NGen from displaying success message.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NUnitReportTask">
            <summary>
            A task that generates a summary HTML
            from a set of NUnit xml report files.
            Loosely based on Erik Hatcher JUnitReport for Ant.
            </summary>
            <remarks>
            This task can generate a combined HTML report out of a
            set of NUnit result files generated using the 
            XML Result Formatter.
            
            By default, NUnitReport will generate the combined
            report using the NUnitSummary.xsl file located at the
            assembly's location, but you can specify a different
            XSLT template to use with the <code>xslfile</code>
            attribute.
            
            Also, all the properties defined in the current
            project will be passed down to the XSLT file as 
            template parameters, so you can access properties
            such as nant.project.name, nant.version, etc.
            </remarks>
            <example>
              <code><![CDATA[
              <nunitreport 
                    out="${outputdir}\TestSummary.html"
                    >
                 <fileset>
                    <includes name="${outputdir}\Test-*.xml" />
                 </fileset>
              </nunitreport>
              
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.CreateSummaryXmlDoc">
            <summary>
            Initializes the XmlDocument instance
            used to summarize the test results
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.GetPropertyList">
            <summary>
            Builds an XsltArgumentList with all
            the properties defined in the 
            current project as XSLT parameters.
            </summary>
            <returns>Property List</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.LoadTransform">
            <summary>
            Loads the XSLT Transform
            </summary>
            <remarks>
            This method will load the file specified
            through the the xslfile attribute, or
            the default transformation included
            as a managed resource.
            </remarks>
            <returns>The Transformation to use</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.OutFilename">
            <summary>
            Name of Output HTML file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.XslFile">
            <summary>
            XSLT file used to generate the report.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.XmlFileSet">
            <summary>
            Set of XML files to use as input
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NUnitReportTask.LocalResXmlResolver">
            <summary>
            Custom XmlResolver used to load the 
            XSLT files out of this assembly resources.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.LocalResXmlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Loads the XSLT file
            </summary>
            <param name="absoluteUri"></param>
            <param name="role"></param>
            <param name="objToReturn"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.RecordTask">
            <summary>
            A task that records the build's output to a file. Loosely based on Ant's 
            <a href="http://ant.apache.org/manual/CoreTasks/recorder.html">Record</a>
            task.
            </summary>
            <remarks>
            This task allows you to record the build's output, or parts of it to a 
            file. You can start and stop recording at any place in the build process.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <record name="${outputdir}\Buildlog.txt" level="Info" action="Start"/>
            <record name="${outputdir}\Buildlog.txt" action="Close"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.RecordTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.LogName">
            <summary>
            Name of destination file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.Action">
            <summary>
            Action to apply to this log instance - either <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/>,
            <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Stop"/>, <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Close"/> or
            <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Flush"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.AutoFlush">
            <summary>
            Determines whether the recorder will flush it's buffer after every 
            write to it. The default is <see langword="false"/>.
            </summary>
            <remarks>
            Effective only with the <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/> action.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.ThresholdLevel">
            <summary>
            Determine the level of logging - either <see cref="F:NAnt.Core.Level.Debug"/>, 
            <see cref="F:NAnt.Core.Level.Verbose"/>, <see cref="F:NAnt.Core.Level.Info"/>, 
            <see cref="F:NAnt.Core.Level.Warning"/> or <see cref="F:NAnt.Core.Level.Error"/>. 
            The default is <see cref="F:NAnt.Core.Level.Info"/>.
            </summary>
            <remarks>
            Effective only with the <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/> action.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.RegasmTask">
            <summary>
            Registers an assembly for use from COM clients.
            </summary>
            <remarks>
              <para>
              Refer to the <see href="ms-help://MS.VSCC/MS.MSDNVS/cptools/html/cpgrfassemblyregistrationtoolregasmexe.htm">Regasm</see> 
              documentation for more information on the regasm tool.
              </para>
            </remarks>
            <example>
              <para>
              Register a single assembly.
              </para>
              <code>
                <![CDATA[
            <regasm assembly="myAssembly.dll" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Register an assembly while exporting a typelibrary.
              </para>
              <code>
                <![CDATA[
            <regasm assembly="myAssembly.dll" typelib="myAssembly.tlb" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Register a set of assemblies at once.
              </para>
              <code>
                <![CDATA[
            <regasm unregister="false" codebase="true">
                <fileset>
                    <includes name="**/*.dll" />
                  <excludes name="notanassembly.dll" />
                </fileset>
            </regasm>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.AssemblyName">
            <summary>
            The name of the file to register. This is provided as an alternate 
            to using the task's fileset.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.RegistryFile">
            <summary>
            Registry file to export to instead of entering the types directly 
            into the registry. If a fileset is used then the entries are all 
            collated into this file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.CodeBase">
            <summary>
            Set the code base registry setting.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.Silent">
            <summary>
            Silent mode. Prevents displaying of success messages. The default 
            is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.ExportTypelib">
            <summary>
            Export a typelib and register it. The typelib will have the same 
            name as the source assembly unless the <see cref="P:NAnt.Contrib.Tasks.RegasmTask.TypeLib"/> 
            attribute is used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.Registered">
            <summary>
            Only refer to already registered type libraries.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.TypeLib">
            <summary>
            Export the assembly to the specified type library and register it.
            This attribute is ignored when a fileset is specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.Unregister">
            <summary>
            Unregister the assembly. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.RegasmFileSet">
            <summary>
            The set of files to register.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SchemaValidatorAttribute">
            <summary>
            Indicates that class should be validated by an XML Schema.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatorAttribute.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:NAnt.Contrib.Tasks.SchemaValidatorAttribute"/>.
            </summary>
            <param name="schemaType">The <see cref="T:System.Type"/> of the object 
            created by the xsd NAnt task to represent the root node of 
            your task.</param>
            <remarks>None.</remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SchemaValidatorAttribute.ValidatorType">
            <summary>
            Returns or sets The <see cref="T:System.Type"/> of the object 
            created by the xsd NAnt task to represent the root node of 
            your task.
            </summary>
            <value>The <see cref="T:System.Type"/> of the object 
            created by the xsd NAnt task to represent the root node of 
            your task.</value>
            <remarks>None.</remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ScpTask">
            <summary>Copies a file using scp to a remote server.</summary>
            <remarks>
              <para>Copies a file using scp to a remote server.</para>
              <para>The Username Environment variable is used.</para>
            </remarks>
            <example>
              <para>Copy a single file to a remote server and path.</para>
              <code>
            <![CDATA[
              <scp file="myfile.zip" server="myServer" path="~" />
            ]]>
              <para>This basically turns into "scp myfile.zip user@mySerer:~/myfile.zip".</para>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramName">
            <summary>The program to execute, default is "scp".</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.Options">
            <summary>The command line arguments.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.BaseDirectory">
            <summary>The directory in which the command will be executed.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.FileName">
            <summary> The file to transfer</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ServerName">
            <summary> The server to send the file to.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.RemotePath">
            <summary> The path on the remote server.
            <para>Defaults to "~".</para>
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.Username">
            <summary> The username to connect as.
            <para>Defaults to USERNAME environment var.</para>
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramPathSep">
            <summary> The Path Seperator used by the program.
            <para>Defaults to "/"</para>
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SlingshotTask">
            <summary>
            Converts a Visual Studio.NET Solution to a NAnt build file or nmake file.
            </summary>
            <example>
              <para>
              Convert the solution <c>MySolution.sln</c> to the NAnt build file 
              <c>MySolution.build</c> and call the new build file.
              </para>
              <code>
            <![CDATA[
            <slingshot solution="MySolution.sln" format="nant" output="MySolution.build"> 
                <parameters>
                    <option name="build.basedir" value="..\bin"/>
                </parameters> 
            </slingshot>
            <nant buildfile="MySolution.build"/>
            ]]>
              </code>
            </example>
            <example>
              <para>
              Convert the solution <c>MySolution.sln</c> to the NAnt build file 
              <c>MySolution.build</c>.  As the solution contains one or more web 
              projects, one or more maps needs to be specified.
              </para>
              <code>
            <![CDATA[
            <slingshot solution="MySolution.sln" format="nant" output="MySolution.build">
                <parameters>
                    <option name="build.basedir" value="..\bin"/>
                </parameters> 
                <maps>
                    <option name="http://localhost" value="C:\Inetpub\wwwroot"/>
                </maps>
            </slingshot>
            ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SlingshotTask.CreateSolutionWriter(System.String)">
            <summary>
            Creates the <see cref="T:SLiNgshoT.Core.SolutionWriter"/> for the specified format.
            </summary>
            <returns>
            The <see cref="T:SLiNgshoT.Core.SolutionWriter"/> for the specified format, or 
            <see langword="null"/> if an unknown format was specified.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SlingshotTask.OptionCollectionToHashtable(NAnt.Core.Types.OptionCollection,System.String)">
            <summary>
            Converts an <see cref="T:NAnt.Core.Types.OptionCollection"/> to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Solution">
            <summary>
            The Visual Studio.NET solution file to convert.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Format">
            <summary>
            The output file format - either <c>nant</c> or <c>nmake</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Output">
            <summary>
            The output file name.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Maps">
            <summary>
            Mappings from URI to directories.  These are required for web projects.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Parameters">
            <summary>
            Parameters to pass to SLiNgshoT.  The parameter <c>build.basedir</c> is required.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SqlTask">
            <summary>
            A task to execute arbitrary SQL statements against a OLEDB data source.
            </summary>
            <remarks>
            You can specify a set of sql statements inside the
            sql element, or execute them from a text file that contains them. You can also
            choose to execute the statements in a single batch, or execute them one by one
            (even inside a transaction, if you want to).
            </remarks>
            <example>
              <para>
              Execute a set of statements inside a transaction.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter=";"
                delimstyle="Normal"
            >
                INSERT INTO jobs (job_desc, min_lvl, max_lvl) VALUES('My Job', 22, 45);
                INSERT INTO jobs (job_desc, min_lvl, max_lvl) VALUES('Other Job', 09, 43);
                SELECT * FROM jobs;
            </sql>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Execute a set of statements from a file and write all query results 
              to a file.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter=";"
                delimstyle="Normal"
                print="true"
                source="sql.txt"
                output="${outputdir}/results.txt"
            />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Execute a SQL script generated by SQL Server Enterprise Manager.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter="GO"
                delimstyle="Line"
                print="true"
                source="pubs.xml"
                batch="false"
                output="${outputdir}/results.txt"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">XML node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteStatements(NAnt.Contrib.Util.SqlHelper)">
            <summary>
            Executes the SQL Statements one by one.
            </summary>
            <param name="sqlHelper"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteStatementsInBatch(NAnt.Contrib.Util.SqlHelper)">
            <summary>
            Executes the SQL statements in a single batch.
            </summary>
            <param name="sqlHelper"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ProcessResults(System.Data.IDataReader,System.IO.TextWriter)">
            <summary>
            Process a result set.
            </summary>
            <param name="results">Result set.</param>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> to write output to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.ConnectionString">
            <summary>
            Connection string used to access database.
            This should be an OleDB connection string.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Source">
            <summary>
            File where the sql statements are defined.
            </summary>
            <remarks>
            You cannot specify both a source and an inline set of statements.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Delimiter">
            <summary>
            String that separates statements from one another.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Batch">
            <summary>
            If true, the statements will be executed as a single batch.
            If false, they will be executed one by one. Default is true.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.ExpandProperties">
            <summary>
            If true, the any nant-style properties on the sql will be
            expanded before execution. Default is true.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.CommandTimeout">
            <summary>
            Command timeout to use when creating commands.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.DelimiterStyle">
            <summary>
            Kind of delimiter used. Allowed values are Normal or Line.
            </summary>
            <remarks>
            Delimiters can be of two kinds: Normal delimiters are
            always specified inline, so they permit having two
            different statements in the same line. Line delimiters,
            however, need to be in a line by their own.
            Default is Normal.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Print">
            <summary>
            If set to true, results from the statements will be
            output to the build log.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Output">
            <summary>
            If set, the results from the statements will be output to the 
            specified file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.UseTransaction">
            <summary>
            If set to <see langword="true" />, all statements will be executed
            within a single transaction. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.OutputWriter">
            <summary>
            Gets the underlying <see cref="T:System.IO.TextWriter"/> to which output will 
            be written if <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/> is set.
            </summary>
            <value>
            A <see cref="T:System.IO.TextWriter"/> for the file specified in <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/>,
            or <see langword="null"/> if <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/> is not set.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.TypedCollectionTask">
             <summary>Generates collection classes based on a given XML specification file. Code generation is in the specified language.</summary>
            <remarks>
               <para>See the <a href="http://www.sellsbrothers.com/tools/">CollectionGen tool page</a> for more information.</para>
            </remarks>
             <example>   
               <code>
             <![CDATA[
             <typedcollection language="CSharp">
                <fileset>
                    <includes name="collections.xml"/>
                </fileset>
            </typedcollection>
             ]]>
               </code>
             </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.TypedCollectionTask.GenerateCollectionClasses(System.String,System.String)">
            <summary>
            The actual generation work is done here.
            </summary>
            <param name="path"></param>
            <param name="language"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.Language">
            <summary>The language to generate collection classes for.  Valid values are "CSharp" or "VB".</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.FileName">
            <summary>The name of the template file for collection generation. This is provided as an alternate to using the task's fileset.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.TypedCollFileSet">
            <summary>
            All files in this fileset will be run thru the collection generator.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ValidateXmlTask">
            <summary>
            Validates a set of XML files based on a set of XML Schemas (XSD).
            </summary>
            <example>
              <code>
                <![CDATA[
            <validatexml>
                <schemas>
                    <schema source="rcf-schema.xsd" />
                    <schema namespace="urn:schemas-company-com:base" source="base-schema.xsd" />
                </schemas>
                <files>
                    <includes name="*.xml" />
                </files>
            </validatexml>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ValidateXmlTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ValidateXmlTask.XmlFiles">
            <summary>
            The XML files that must be validated.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ValidateXmlTask.Schemas">
            <summary>
            The XML Schemas (XSD) to use for validation.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Vb6Task">
            <summary>
            Compiles Microsoft Visual Basic 6 programs.
            </summary>
            <remarks>
                <para>Uses the VB6.EXE executable included with the Visual Basic 6 environment.</para>
                <para>The compiler uses the settings and source files specified in the project or group file.</para>
            </remarks>
            <example>
              <para>Build the project <c>HelloWorld.vbp</c> in the <c>build</c> directory.</para>
              <code>
                <![CDATA[
            <vb6 project="HelloWorld.vbp" outdir="build" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ExecuteTask">
            <summary>
            Compiles the Visual Basic project or project group.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ParseGroupFile(System.String)">
            <summary>
            Parses a VB group file and extract the file names of the sub-projects 
            in the group.
            </summary>
            <param name="groupFile">The file name of the group file.</param>
            <returns>
            A string collection containing the list of sub-projects in the group.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ProjectNeedsCompiling(System.String)">
            <summary>
            Determines if a VB project needs to be recompiled by comparing the timestamp of 
            the project's files and references to the timestamp of the last built version.
            </summary>
            <param name="projectFile">The file name of the project file.</param>
            <returns>true if the project should be compiled, false otherwise</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ParseProjectFile(System.String,NAnt.Core.Types.FileSet,NAnt.Core.Types.FileSet)">
            <summary>
            Parses a VB project file and extracts the source files, reference files, and 
            the name of the compiled file for the project.
            </summary>
            <param name="projectFile">The filename of the project file.</param>
            <param name="sources">
            A fileset representing the source files of the project, which will
            populated by the method.
            </param>
            <param name="references">
            A fileset representing the references of the project, which will
            populated by the method.
            </param>
            <returns>A string containing the output file name for the project.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.OutDir">
            <summary>
            Output directory for the compilation target.  
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProjectFile">
            <summary>
            Visual Basic project or group file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.CheckReferences">
            <summary>
            Determines whether project references are checked when deciding 
            whether the project needs to be recompiled.  The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ErrorFile">
            <summary>
            The file to which the Visual Basic compiler should log errors.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>
            The filename of the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.VersionTask">
            <summary>
            Increments a version number counter from a text file. The resulting 
            version string is written back to the file and entered in a NAnt property 
            defined by <c>prefix</c> + &quot;version&quot;.
            </summary>
            <remarks>
              <para><c>buildtype</c> determines how the build number is generated:
              <list type="bullet">
               <item><term>monthday</term><description>use the # months since start of project * 100 + current day in month as build number</description></item>
               <item><term>increment</term><description>increment a build number stored in the build.number file in current directory</description></item>
               <item><term>noincrement</term><description>do not increment the build number - we use this if we need to update an existing build</description></item>
              </list></para>
              <para><c>revisiontype</c> determines how the revision number is generated:
              <list type="bullet">
               <item><term>automatic</term><description>use the # seconds since the start of today / 10</description></item>
               <item><term>increment</term><description>use the file version's revision number spec'd by the revisionbin attribute</description></item>
              </list></para>
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateMonthDayBuildNumber">
            <summary>
            Calculates the build number based on the number of months since the 
            start date.
            </summary>
            <returns>
            The build number based on the number of months since the start date.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.Prefix">
            <summary>
            The string to prefix the property name with. The default is 
            <c>'sys.'</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.StartDate">
            <summary>
            Start of project. Date from which to calculate build number. 
            Required if &quot;monthday&quot; is used as <c>buildtype</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.Path">
            <summary>
            Path to the file containing the current version number. The default 
            file is <c>'build.number'</c> in the project base directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.BuildType">
            <summary>
            Algorithm for generating build number. Valid values are &quot;monthday&quot;,
            &quot;increment&quot; and &quot;noincrement&quot;. The default is &quot;monthday&quot;.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.RevisionType">
            <summary>
            Algorithm for generating revision number. Valid values are &quot;automatic&quot; and
            &quot;increment&quot;.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.WsdlTask">
            <summary>Generates code for web service clients and xml web services
            using ASP.NET from WSDL contract files, XSD Schemas and .discomap
            discovery documents. Can be used in conjunction with .disco files.</summary>
            <example>
              <para>Generate a proxy class for a web service.</para>
              <code><![CDATA[<wsdl path="http://www.somewhere.com/myservice.wsdl"
                language="CS" namespace="MyCompany.MyService" outfile="MyService.cs" />]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.WsdlTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Path">
            <summary>URL or Path to a WSDL, XSD, or .discomap document.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Language">
            <summary>Language of generated code. 'CS', 'VB', 'JS',
            or the fully-qualified name of a class implementing
            System.CodeDom.Compiler.CodeDomCompiler. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ForServer">
            <summary>Compiles server-side ASP.NET abstract classes
            based on the web service contract. The default is to
            create client side proxy classes. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Namespace">
            <summary>Microsoft.NET namespace of generated classes.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.OutFile">
            <summary>Output filename of the created proxy. Default name is derived from the service name.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Protocol">
            <summary>Override default protocol to implement. Choose from 'SOAP',
            'HttpGet', 'HttpPost', or a custom protocol as specified in the
            configuration file.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Username">
            <summary>Username of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Password">
            <summary>Password of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Domain">
            <summary>Domain of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Proxy">
            <summary>URL of a proxy server to use for HTTP requests.
            The default is to use the system proxy setting.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyUsername">
            <summary>Username of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyPassword">
            <summary>Password of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyDomain">
            <summary>Domain of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.UrlKey">
            <summary>Configuration key to use in the code generation to
            read the default value for the Url property. The default is
            not to read from the config file.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.BaseUrl">
            <summary>Base Url to use when calculating the Url fragment.
            The UrlKey attribute must also be specified. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.XsdTask">
            <summary>Compiles an XML Schema into a Microsoft.NET Assembly
            containing types that can marshal back and forth from XML elements
            and the objects that represent them. Also can create a W3C XML
            schema from an existing Microsoft.NET Assembly, XML document,
            or an old XDR format schema.</summary>
            <example>
              <para>Compile a schema.</para>
              <code><![CDATA[<xsd schema="MySchema.xsd" element="MyRootElement"
                language="CS" namespace="MyCompany.MySchema" outputdir="build\bin"
                uri="http://MySchema'sTargetNamespace" />]]></code>
              <para>Generate a schema from an Assembly.</para>
              <code><![CDATA[<xsd assembly="MyAssembly.dll" outputdir="build\Schemas" />]]></code>
              <para>Generate a schema from an XML doc.</para>
              <code><![CDATA[<xsd xmldoc="MyDoc.xml" outputdir="build\Schemas" />]]></code>
              <para>Generate a schema from an XDR schema.</para>
              <code><![CDATA[<xsd xdr="MyOldSchema.xdr" outputdir="build\Schemas" />]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.XsdTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Schema">
            <summary>XML Schema (.xsd) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Target">
            <summary>Target of XML Schema compilation. Can be "classes" or "dataset".</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Element">
            <summary>XML element in the Schema to process.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Language">
            <summary>Language of generated code. 'CS', 'VB', 'JS',
            or the fully-qualified name of a class implementing
            System.CodeDom.Compiler.CodeDomCompiler. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Namespace">
            <summary>Microsoft.NET namespace of generated classes.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.OutputDir">
            <summary>Output directory in which to place generated files.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Assembly">
            <summary>Assembly (.dll or .exe) to generate a W3C XML Schema for.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Types">
            <summary>Types in the assembly for which an XML schema is being created.
            If you don't specify this, all types in the assembly will be included.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Uri">
            <summary>Uri of elements from the Schema to process.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.XmlDoc">
            <summary>XML document to generate a W3C XML Schema for.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Xdr">
            <summary>XDR schema to generate a W3C XML Schema for.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReference">
            <summary>
            Represents the schema collection element.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReference.Namespace">
            <summary>
            Namespace URI associated with this schema. 
            If not present, it is assumed that the 
            schema's targetNamespace value is to be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReference.Source">
            <summary>
            Location of this schema. Could be a 
            local file path or an HTTP URL.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor(NAnt.Contrib.Types.XmlSchemaReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Add(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.AddRange(NAnt.Contrib.Types.XmlSchemaReference[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.AddRange(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Contains(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with 
            value <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.CopyTo(NAnt.Contrib.Types.XmlSchemaReference[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.IndexOf(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/>. If the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Insert(System.Int32,NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Remove(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with the specified name.
            </summary>
            <param name="value">The name of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to get.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.#ctor(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Util.ChecksumHelper">
            <summary>
            Helper class to calculate checksums
            of files.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.#ctor(System.String)">
            <summary>
            Create a new instance
            </summary>
            <param name="providerName">Name of hash algorithm to use</param>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.CalculateChecksum(System.String)">
            <summary>
            Calculates a checksum for a given file
            and returns it in a hex string
            </summary>
            <param name="filename">name of the input file</param>
            <returns>hex checksum string</returns>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.ChecksumToString(System.Byte[])">
            <summary>
            Converts a checksum value (a byte array)
            into a Hex-formatted string.
            </summary>
            <param name="checksum">Checksum value to convert</param>
            <returns>Hexified string value</returns>
        </member>
        <member name="T:NAnt.Contrib.Util.IRecorder">
            <summary>
            Recorder interface user with the Record task
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Start">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Stop">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Close">
            <summary>
            Closes the recorder.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Flush">
            <summary>
            Flushes the recorder.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.Name">
            <summary>
            Gets the name of this recorder (possibly a file name).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.Logger">
            <summary>
            Gets The underlying <see cref="T:NAnt.Core.IBuildLogger"/> instance.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.AutoFlush">
            <summary>
            Defines whether the underlying writer is automatically flushes or 
            not.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.RecorderCollection">
            <summary>
            Keeps track of used recorders
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Util.FileLogListener"/>
            class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.Flush">
            <summary>
            Flushes buffered build events or messages to the underlying storage.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.BuildStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a build has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event is fired before any targets have started.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.BuildFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that the last target has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TargetStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a target has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TargetFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TaskStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TaskFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.MessageLogged(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a message has been logged.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            Only messages with a priority higher or equal to the threshold of
            the logger will actually be output in the build log.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.Log(System.String)">
            <summary>
            Empty implementation which allows derived classes to receive the
            output that is generated in this logger.
            </summary>
            <param name="message">The message being logged.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.OutputMessage(NAnt.Core.Level,System.String,System.Int32)">
            <summary>
            Outputs an indented message to the build log if its priority is
            greather than or equal to the <see cref="P:NAnt.Contrib.Util.FileLogListener.Threshold"/> of the
            logger.
            </summary>
            <param name="mesageLevel">The priority of the message to output.</param>
            <param name="message">The message to output.</param>
            <param name="indentationLength">The number of characters that the message should be indented.</param>
        </member>
        <member name="P:NAnt.Contrib.Util.FileLogListener.Threshold">
            <summary>
            Gets or sets the highest level of message this logger should respond
            to.
            </summary>
            <value>
            The highest level of message this logger should respond to.
            </value>
            <remarks>
            Only messages with a message level higher than or equal to the given
            level should be written to the log.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Util.FileLogListener.OutputWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> to which the logger is
            to send its output.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlHelper">
            <summary>
            Helper class used to execute Sql Statements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="connectionString">OleDB Connection string</param>
            <param name="useTransaction">True if you want to use a transaction</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.Close(System.Boolean)">
            <summary>
            Close the connection and terminate
            </summary>
            <param name="commit">true if the transaction should be commited</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.Execute(System.String,System.Int32)">
            <summary>
            Executes a SQL statement.
            </summary>
            <param name="sql">SQL statement to execute</param>
            <param name="cmdTimeout">Command timeout to use</param>
            <returns>Data reader used to check the result</returns>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlHelper.Connection">
            <summary>
            OleDB Connection object
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlStatementAdapter">
            <summary>
            Helper class to adapt SQL statements from some
            input into something OLEDB can consume directly
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.#ctor(NAnt.Contrib.Util.SqlStatementList)">
            <summary>
            Creates a new instance
            </summary>
            
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.AdaptSql(System.String)">
            <summary>
            Adapts a set of Sql statements from a string.
            </summary>
            <param name="sql">A string containing the original sql statements</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.AdaptSqlFile(System.String)">
            <summary>
            Adapts a set of Sql statements from a string.
            </summary>
            <param name="file">Path of file containing all sql statements</param>
            <returns>The new instance</returns>
        </member>
        <member name="T:NAnt.Contrib.Util.DelimiterStyle">
            <summary>
            Determines how the delimiter is 
            interpreted in a sql string
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Util.DelimiterStyle.Normal">
            <summary>Delimiter can appear anywhere on a line</summary>
        </member>
        <member name="F:NAnt.Contrib.Util.DelimiterStyle.Line">
            <summary>Delimiter always appears by itself on a line</summary>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlStatementList">
            <summary>
            Helper class to maintain a list of Sql Statements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.#ctor(System.String,NAnt.Contrib.Util.DelimiterStyle)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="delimiter">String that separates statements from each other</param>
            <param name="style">Style of the delimiter</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ParseSql(System.String)">
            <summary>
            Parses the Sql into the internal list using the specified delimiter
            and delimiter style
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ParseSqlFromFile(System.String)">
            <summary>
            Parses the contents of the file into the 
            internal list using the specified delimiter
            and delimiter style
            </summary>
            <param name="file">File name</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.GetEnumerator">
            <summary>
            Allows foreach().
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.StripComments(System.String)">
            <summary>
            Strips all single line comments 
            in the specified sql
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ExpandProps(System.String)">
            <summary>
            Expands project properties in the
            sql string
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Count">
            <summary>
            Number of statements in the list
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Item(System.Int32)">
            <summary>
            Get the statement specified by the index
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Properties">
            <summary>
            Project's properties for property expansion
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.msi">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.properties">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.search">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.launchconditions">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.tables">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.directories">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.environment">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.features">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.components">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.dialogs">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.controls">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.controlconditions">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.controlevents">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.mergemodules">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.registry">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.icons">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.shortcuts">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.binaries">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.customactions">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.sequences">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.actiontext">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.appmappings">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.urlproperties">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.vdirproperties">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.approots">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.iisproperties">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.output">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.sourcedir">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.license">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.banner">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.background">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.template">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.errortemplate">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.verbose">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.msi.debug">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.property">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.property.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.property.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIIISProperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIIISProperty.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIIISProperty.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIIISProperty.defaultdoc">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIAppRoot">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIAppRoot.component">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIAppRoot.urlproperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIAppRoot.inprocflag">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIVDirProperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIVDirProperty.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIVDirProperty.portproperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIVDirProperty.urlproperty">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIURLProperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIURLProperty.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIURLProperty.property">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIAppMapping">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIAppMapping.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIAppMapping.extension">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIAppMapping.exepath">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIAppMapping.verbs">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIActionTextAction">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIActionTextAction.description">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIActionTextAction.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIActionTextAction.template">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSISequence">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequence.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequence.action">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequence.value">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequence.condition">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSISequenceTable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequenceTable.installexecute">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequenceTable.installui">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequenceTable.adminexecute">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequenceTable.adminui">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISequenceTable.advtexecute">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSICustomAction">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSICustomAction.action">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSICustomAction.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSICustomAction.source">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSICustomAction.target">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIBinary">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIBinary.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIBinary.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIShortcut">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.description">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.filename">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.displayname">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.component">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.target">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.arguments">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.hotkey">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.icon">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.iconindex">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.iconindexSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.showcmd">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.showcmdSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIShortcut.wkdir">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIIcon">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIIcon.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIIcon.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyValue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyValue.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyValue.value">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyValue.dword">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyValue.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyValue.Value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIRegistryKey">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKey.value">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKey.path">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKey.root">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKey.component">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyRoot">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyRoot.machine">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyRoot.classes">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyRoot.users">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRegistryKeyRoot.user">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIMerge">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIMerge.modules">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIMerge.feature">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.NAntFileSet">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.NAntFileSet.includes">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.NAntFileSet.excludes">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.NAntFileSet.basedir">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.NAntFileSetPattern">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.NAntFileSetPattern.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.NAntFileSetPattern.asIs">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.NAntFileSetPattern.asIsSpecified">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIControlEvent">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlEvent.dialog">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlEvent.control">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlEvent.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlEvent.argument">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlEvent.condition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlEvent.order">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlEvent.orderSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlEvent.remove">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIControlCondition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlCondition.dialog">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlCondition.control">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlCondition.action">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlCondition.condition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControlCondition.remove">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIControl">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.dialog">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.x">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.y">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.width">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.height">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.property">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.text">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.nextcontrol">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.help">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIControl.remove">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIDialog">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.hcenter">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.vcenter">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.width">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.height">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.title">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.firstcontrol">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.defaultcontrol">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDialog.cancelcontrol">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIFileOverride">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFileOverride.file">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFileOverride.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFileOverride.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFileOverride.version">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFileOverride.language">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFileOverride.checkinterop">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIKeyFile">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIKeyFile.file">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIComponent">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.key">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.fileset">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.forceid">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.feature">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.condition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.fileattr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIComponent.checkinterop">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIFeatureCondition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeatureCondition.expression">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeatureCondition.level">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIFeature">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.description">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.conditions">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.feature">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.title">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.display">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.typical">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIFeature.directory">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIVariable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIVariable.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIVariable.append">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIVariable.component">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIDirectory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDirectory.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDirectory.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIDirectory.foldername">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSIRootDirectory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSIRootDirectory.root">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSITableRowColumnData">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableRowColumnData.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableRowColumnData.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSITableRow">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableRow.columns">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSITableColumn">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.nullable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.category">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.categorySpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.key">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.minvalue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.minvalueSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.maxvalue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.maxvalueSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.keytable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.keycolumn">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.keycolumnSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.set">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumn.description">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Text">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.UpperCase">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.LowerCase">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Integer">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.DoubleInteger">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.TimeDate">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Identifier">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Property">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Filename">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.WildCardFilename">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Path">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Paths">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.AnyPath">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.DefaultDir">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.RegPath">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Formatted">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Template">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Condition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.GUID">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Version">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Language">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Binary">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Cabinet">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITableColumnCategoryType.Shortcut">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSITable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITable.columns">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITable.rows">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSITable.name">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSILaunchCondition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSILaunchCondition.description">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSILaunchCondition.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSILaunchCondition.condition">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.searchKeyValue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.searchKeyValue.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.searchKeyValue.setproperty">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.searchKey">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.searchKey.value">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.searchKey.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.searchKey.path">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.searchKey.root">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSI.MSISearchKeyType">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISearchKeyType.registry">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSI.MSISearchKeyType.file">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.msm">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.properties">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.search">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.tables">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.moduledependencies">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.moduleexclusions">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.modulesequences">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.moduleignoretables">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.modulesubstitutions">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.moduleconfigurations">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.directories">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.environment">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.components">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.dialogs">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.controls">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.controlconditions">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.controlevents">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.registry">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.icons">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.shortcuts">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.binaries">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.customactions">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.sequences">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.actiontext">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.appmappings">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.urlproperties">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.vdirproperties">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.approots">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.iisproperties">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.output">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.sourcedir">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.license">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.banner">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.background">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.language">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.version">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.template">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.errortemplate">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.verbose">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.msm.debug">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.property">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.property.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.property.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMIISProperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMIISProperty.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMIISProperty.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMIISProperty.defaultdoc">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMAppRoot">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMAppRoot.component">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMAppRoot.urlproperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMAppRoot.inprocflag">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMVDirProperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMVDirProperty.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMVDirProperty.portproperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMVDirProperty.urlproperty">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMURLProperty">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMURLProperty.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMURLProperty.property">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMAppMapping">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMAppMapping.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMAppMapping.extension">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMAppMapping.exepath">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMAppMapping.verbs">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMActionTextAction">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMActionTextAction.description">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMActionTextAction.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMActionTextAction.template">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMSequence">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequence.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequence.action">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequence.value">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequence.condition">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMSequenceTable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequenceTable.installexecute">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequenceTable.installui">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequenceTable.adminexecute">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequenceTable.adminui">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSequenceTable.advtexecute">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMCustomAction">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMCustomAction.action">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMCustomAction.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMCustomAction.source">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMCustomAction.target">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMBinary">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMBinary.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMBinary.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMShortcut">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.description">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.filename">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.displayname">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.component">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.target">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.arguments">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.hotkey">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.icon">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.iconindex">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.iconindexSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.showcmd">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.showcmdSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMShortcut.wkdir">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMIcon">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMIcon.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMIcon.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyValue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyValue.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyValue.value">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyValue.dword">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyValue.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyValue.Value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMRegistryKey">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKey.value">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKey.path">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKey.root">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKey.component">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyRoot">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyRoot.machine">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyRoot.classes">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyRoot.users">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRegistryKeyRoot.user">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMControlEvent">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlEvent.dialog">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlEvent.control">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlEvent.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlEvent.argument">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlEvent.condition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlEvent.order">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlEvent.orderSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlEvent.remove">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMControlCondition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlCondition.dialog">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlCondition.control">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlCondition.action">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlCondition.condition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControlCondition.remove">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMControl">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.dialog">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.x">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.y">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.width">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.height">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.property">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.text">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.nextcontrol">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.help">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMControl.remove">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMDialog">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.hcenter">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.vcenter">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.width">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.height">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.title">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.firstcontrol">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.defaultcontrol">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDialog.cancelcontrol">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMFileOverride">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMFileOverride.file">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMFileOverride.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMFileOverride.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMFileOverride.version">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMFileOverride.language">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMFileOverride.checkinterop">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.NAntFileSetPattern">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.NAntFileSetPattern.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.NAntFileSetPattern.asIs">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.NAntFileSetPattern.asIsSpecified">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.NAntFileSet">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.NAntFileSet.includes">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.NAntFileSet.excludes">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.NAntFileSet.basedir">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMKeyFile">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMKeyFile.file">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMComponent">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.key">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.fileset">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.forceid">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.feature">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.condition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.fileattr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMComponent.checkinterop">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMVariable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMVariable.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMVariable.append">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMVariable.component">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMDirectory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDirectory.directory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDirectory.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMDirectory.foldername">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMRootDirectory">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMRootDirectory.root">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.format">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.contextdata">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.defaultvalue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.attr">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.displayname">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.description">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.helplocation">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfiguration.helpkeyword">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMModuleConfigurationFormat">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfigurationFormat.text">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfigurationFormat.key">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfigurationFormat.integer">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleConfigurationFormat.bitfield">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMModuleSubstitution">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSubstitution.table">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSubstitution.row">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSubstitution.column">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSubstitution.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMModuleIgnoreTable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleIgnoreTable.name">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMModuleSequence">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSequence.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSequence.action">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSequence.sequence">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSequence.sequenceSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSequence.baseaction">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSequence.after">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleSequence.condition">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMModuleExclusion">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleExclusion.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleExclusion.language">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleExclusion.minversion">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleExclusion.maxversion">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMModuleDependency">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleDependency.id">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleDependency.language">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMModuleDependency.version">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMTableRowColumnData">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableRowColumnData.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableRowColumnData.value">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMTableRow">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableRow.columns">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMTableColumn">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.nullable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.category">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.categorySpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.key">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.minvalue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.minvalueSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.maxvalue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.maxvalueSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.keytable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.keycolumn">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.keycolumnSpecified">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.set">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumn.description">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Text">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.UpperCase">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.LowerCase">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Integer">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.DoubleInteger">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.TimeDate">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Identifier">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Property">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Filename">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.WildCardFilename">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Path">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Paths">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.AnyPath">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.DefaultDir">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.RegPath">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Formatted">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Template">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Condition">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.GUID">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Version">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Language">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Binary">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Cabinet">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTableColumnCategoryType.Shortcut">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMTable">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTable.columns">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTable.rows">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMTable.name">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.searchKeyValue">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.searchKeyValue.name">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.searchKeyValue.setproperty">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.searchKey">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.searchKey.value">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.searchKey.type">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.searchKey.path">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.searchKey.root">
            <remarks/>
        </member>
        <member name="T:NAnt.Contrib.Schemas.MSM.MSMSearchKeyType">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSearchKeyType.registry">
            <remarks/>
        </member>
        <member name="F:NAnt.Contrib.Schemas.MSM.MSMSearchKeyType.file">
            <remarks/>
        </member>
    </members>
</doc>
